{"version":3,"sources":["webpack://keeptrack.space/./src/js/lib/meuusjs.js","webpack://keeptrack.space/./src/js/lib/numeric.js","webpack://keeptrack.space/./src/js/lib/satellite.js","webpack://keeptrack.space/./src/js/positionCruncher.js","webpack://keeptrack.space/webpack/bootstrap","webpack://keeptrack.space/webpack/runtime/compat get default export","webpack://keeptrack.space/webpack/runtime/define property getters","webpack://keeptrack.space/webpack/runtime/global","webpack://keeptrack.space/webpack/runtime/hasOwnProperty shorthand","webpack://keeptrack.space/webpack/runtime/make namespace object","webpack://keeptrack.space/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,OAAO,+JAA+J,2BAA2B,6EAA6E,WAAW,WAAW,wBAAwB,sBAAsB,yBAAyB,6FAA6F,qCAAqC;AAC7e,wBAAwB,4EAA4E,UAAU,YAAY,qBAAqB,oBAAoB,oGAAoG,wBAAwB,4EAA4E,UAAU;AACrX,qBAAqB,oBAAoB;AACzC,SAAS,2BAA2B,uBAAuB,cAAc,6BAA6B,6CAA6C,wBAAwB,oDAAoD,6BAA6B,0BAA0B,uBAAuB,kDAAkD,mBAAmB,gFAAgF,4BAA4B;AAC9d,uBAAuB,4BAA4B,sBAAsB,4DAA4D,uBAAuB,uEAAuE,cAAc,iFAAiF,uBAAuB,wEAAwE,cAAc,wCAAwC,oBAAoB;AAC3e,sBAAsB,wBAAwB,eAAe,oCAAoC,kBAAkB,sBAAsB,kBAAkB,+EAA+E,UAAU,sBAAsB,4BAA4B,iBAAiB,uBAAuB,4BAA4B,iBAAiB,yBAAyB,8BAA8B,uBAAuB,sBAAsB,8BAA8B,WAAW;AACxgB;AACA,gYAAgY,SAAS,wDAAwD,SAAS,mBAAmB,oBAAoB,OAAO,uHAAuH,UAAU,wBAAwB,kCAAkC,gCAAgC,4BAA4B,OAAO,0DAA0D,4BAA4B,qDAAqD,4BAA4B,qCAAqC,0BAA0B,+CAA+C,UAAU,2CAA2C;AAChkC,uBAAuB,sBAAsB,yCAAyC,mBAAmB,qCAAqC,2BAA2B,wCAAwC,4BAA4B,yCAAyC,uBAAuB,iEAAiE;AAC9W,4CAA4C,4DAA4D,yCAAyC,+DAA+D,kCAAkC,2BAA2B,wBAAwB;AACrS,iCAAiC,2GAA2G;AAC5I,kDAAkD,wBAAwB,wBAAwB,+FAA+F,+CAA+C,wBAAwB,yEAAyE,2CAA2C;AAC5X,iCAAiC,kCAAkC,uBAAuB,sBAAsB;AAChH,qCAAqC,oBAAoB,eAAe,8EAA8E,aAAa,kCAAkC,8BAA8B,+BAA+B,oCAAoC,wBAAwB,OAAO,6DAA6D,0CAA0C;AAC5a,wCAAwC,IAAI,OAAO,wCAAwC,uCAAuC,0CAA0C,QAAQ,mBAAmB,KAAK,YAAY,SAAS,kBAAkB,8DAA8D,sBAAsB,iBAAiB,yCAAyC,eAAe,IAAI,gBAAgB,SAAS,yBAAyB,mBAAmB,2BAA2B,QAAQ,qBAAqB,4BAA4B,gCAAgC,4DAA4D,qDAAqD,OAAO,4EAA4E,qCAAqC,qGAAqG,kCAAkC,OAAO;AACp8B,kCAAkC,qCAAqC,iCAAiC,oCAAoC,+BAA+B,8CAA8C,4DAA4D,OAAO,gCAAgC,6BAA6B,iBAAiB,4FAA4F,2BAA2B,iBAAiB;AAClf,2DAA2D,uBAAuB,4BAA4B,sCAAsC,qBAAqB,iBAAiB,mMAAmM,uBAAuB,gCAAgC,qDAAqD;AACze,KAAK,+EAA+E,gCAAgC,wCAAwC,4GAA4G;AACxQ,6PAA6P,wCAAwC,UAAU,sDAAsD,QAAQ,4GAA4G,QAAQ,mBAAmB,KAAK;AACzf,aAAa,gDAAgD,cAAc,aAAa,iBAAiB,UAAU,MAAM,2BAA2B,YAAY,MAAM,2BAA2B,YAAY,MAAM,uBAAuB,QAAQ,mBAAmB,wEAAwE,iBAAiB,MAAM,2BAA2B,MAAM,2BAA2B,MAAM,sBAAsB,OAAO;AACnc,wBAAwB;AACxB;AACA;AACA;AACA,8RAA8R,aAAa,+BAA+B,6BAA6B,kDAAkD,6BAA6B,8CAA8C,yBAAyB,wBAAwB,6BAA6B,sBAAsB,+GAA+G,yBAAyB;AAChtB,sBAAsB,YAAY,qBAAqB,sBAAsB,8ZAA8Z,KAAK,KAAK;AACrf,mDAAmD,6BAA6B,mBAAmB,OAAO,6EAA6E,0BAA0B,wCAAwC,yBAAyB,+CAA+C,2BAA2B,wCAAwC,yBAAyB,0BAA0B,2BAA2B;AACld,iHAAiH,iCAAiC,6UAA6U;AAC/d;AACA;AACA,kdAAkd,YAAY,gEAAgE,iCAAiC,mCAAmC,kCAAkC,cAAc,cAAc,sBAAsB,uCAAuC,mFAAmF,oCAAoC,kCAAkC,kBAAkB;AACx4B,oBAAoB,cAAc,oBAAoB,WAAW,kBAAkB,2CAA2C,sBAAsB,iCAAiC,WAAW,MAAM,0BAA0B,2BAA2B,yBAAyB,kBAAkB,mDAAmD,QAAQ,sJAAsJ,oCAAoC,6BAA6B,kEAAkE,uBAAuB,+BAA+B,oCAAoC,+BAA+B,oCAAoC,kBAAkB,6BAA6B;AACt0B,uBAAuB,OAAO,6KAA6K,2BAA2B,cAAc,+EAA+E,6BAA6B,4BAA4B,cAAc,8FAA8F;AACxe,UAAU,kBAAkB,6HAA6H,6BAA6B,2CAA2C,mEAAmE,wCAAwC,iBAAiB,eAAe,WAAW,YAAY,wEAAwE,uBAAuB,yDAAyD,kBAAkB,8CAA8C,mBAAmB,yBAAyB,8BAA8B,uBAAuB,yBAAyB,kDAAkD,qBAAqB,yBAAyB,8BAA8B,sBAAsB;AACz2B,OAAO,+CAA+C,0BAA0B,8BAA8B,6BAA6B,kCAAkC,sBAAsB,0BAA0B,8CAA8C,8BAA8B,6BAA6B,yBAAyB,4CAA4C,yBAAyB,2BAA2B,wBAAwB;AACvd,4CAA4C,kEAAkE,gCAAgC,SAAS,uDAAuD,2CAA2C,iCAAiC,mEAAmE,cAAc,qFAAqF,qCAAqC,2EAA2E,kCAAkC;AACllB,6BAA6B,qCAAqC,iCAAiC,qCAAqC,wBAAwB,8CAA8C,OAAO,WAAW,6BAA6B,iBAAiB,0FAA0F,2BAA2B,qBAAqB,mCAAmC,wBAAwB,4BAA4B;AAC/e,OAAO,qBAAqB,iBAAiB,2NAA2N,4CAA4C,yBAAyB,sEAAsE,2BAA2B;AAC9a,iIAAiI,OAAO,2DAA2D,iCAAiC,uBAAuB,oFAAoF,kBAAkB,wCAAwC,aAAa,kBAAkB,uFAAuF,kBAAkB,uFAAuF,uBAAuB,uFAAuF,sBAAsB,uFAAuF,mBAAmB,0BAA0B;AACh3B,gBAAgB,+CAA+C,yCAAyC,kCAAkC,KAAK,KAAK,oBAAoB,4CAA4C,kBAAkB;AACtO;AACA;;AAEa;;;;;;;;;;;;AC/CA;;AAEb,cAAc,MAA8B,GAAG,CAAqB;AACpE,WAAW,qBAAM;AACjB,IAAI,qBAAM;AACV;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbsBAAsB,QAAQ;AAC9B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,qBAAqB;AACrB,oBAAoB;AACpB,oBAAoB;AACpB,qBAAqB;AACrB,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,wCAAwC,YAAY;AACpD;AACA,cAAc,cAAc,EAAE;AAC9B,+DAA+D;AAC/D,kDAAkD;AAClD,6BAA6B;AAC7B,sBAAsB;AACtB,mCAAmC;AACnC,4BAA4B,KAAK,MAAM;AACvC,kEAAkE;AAClE,kBAAkB;AAClB,8BAA8B;AAC9B,cAAc;AACd,wBAAwB,KAAK,OAAO;AACpC,2BAA2B;AAC3B;AACA;AACA,cAAc;AACd,6BAA6B;AAC7B;AACA;AACA,cAAc;AACd,cAAc;AACd,0BAA0B;AAC1B,2BAA2B;AAC3B;AACA;AACA;AACA,cAAc;AACd,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,sBAAsB;AACtB;AACA,cAAc;AACd,uBAAuB,OAAO,MAAM;AACpC,2BAA2B;AAC3B;AACA;AACA,cAAc;AACd,cAAc;AACd,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA,eAAe,UAAU;AACzB;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,8CAA8C;AAC9C,yBAAyB;AACzB;AACA;AACA,UAAU;AACV,+BAA+B;AAC/B,wBAAwB,KAAK;AAC7B;AACA,mBAAmB;AACnB,wBAAwB;AACxB,UAAU;AACV;AACA;AACA,oBAAoB,OAAO,MAAM;AACjC;AACA;AACA;AACA,UAAU;AACV,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,OAAO,MAAM;AACjC;AACA;AACA,UAAU;AACV,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;;AAEA,uDAAuD;AACvD,uDAAuD;AACvD,2BAA2B,8CAA8C,wBAAwB;AACjG,2BAA2B,8CAA8C,wBAAwB,EAAE;;AAEnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sBAAsB;AACpD,gCAAgC,qBAAqB;AACrD,uBAAuB,kBAAkB;AACzC,wBAAwB,kBAAkB;AAC1C,mCAAmC,kBAAkB;AACrD;AACA,oCAAoC;AACpC,uDAAuD;AACvD;AACA,+DAA+D;AAC/D,iCAAiC,0CAA0C;AAC3E,iCAAiC,yCAAyC;AAC1E;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,2CAA2C;AAC3C,6BAA6B,MAAM,MAAM;AACzC,wCAAwC;AACxC,kDAAkD;AAClD,8FAA8F;AAC9F,yEAAyE;AACzE,wBAAwB,yEAAyE;AACjG;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,6BAA6B,MAAM,MAAM;AACzC,wCAAwC;AACxC,+EAA+E;AAC/E,0DAA0D;AAC1D,sBAAsB,WAAW;AACjC;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,yBAAyB;AACzB,4CAA4C;AAC5C,+CAA+C;AAC/C,8BAA8B;AAC9B;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,uBAAuB;AACvB,4CAA4C;AAC5C,uDAAuD;AACvD;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,gCAAgC;AAChC;AACA,sBAAsB;AACtB,sCAAsC;AACtC,sBAAsB;AACtB,qEAAqE;AACrE,wDAAwD;AACxD;AACA;AACA,0BAA0B;AAC1B,4BAA4B;AAC5B,yCAAyC;AACzC,+BAA+B,OAAO,MAAM;AAC5C,oDAAoD;AACpD;AACA,sBAAsB;AACtB,sBAAsB;AACtB,kCAAkC;AAClC;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,oCAAoC;AACpC,4BAA4B;AAC5B;AACA;AACA;AACA,8BAA8B;AAC9B,4BAA4B;AAC5B;AACA;AACA;AACA,iCAAiC;AACjC,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B,uBAAuB,UAAU;AACjC,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA,+BAA+B,SAAS;AACxC,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,mBAAmB,QAAQ;AAC3B;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,mBAAmB,QAAQ;AAC3B;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,uBAAuB,UAAU;AACjC;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,4CAA4C,sBAAsB,EAAE;AACpE;AACA;AACA,sBAAsB;AACtB,wBAAwB;AACxB;AACA;AACA,eAAe;AACf,gBAAgB;AAChB;AACA;AACA,eAAe;AACf,cAAc;AACd,sBAAsB;AACtB;AACA;AACA,eAAe;AACf,cAAc;AACd;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA;AACA,cAAc;AACd,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,wFAAwF;AACxF;AACA;AACA,+BAA+B;AAC/B,gDAAgD;AAChD;AACA;AACA,oCAAoC;AACpC,6CAA6C;AAC7C,2BAA2B;AAC3B;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA,4CAA4C;AAC5C,gFAAgF;AAChF,2BAA2B;AAC3B;AACA;AACA,4CAA4C;AAC5C,oEAAoE;AACpE,wDAAwD;AACxD;AACA;AACA,+BAA+B;AAC/B,kCAAkC,uCAAuC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA,KAAK;AACL,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA,2BAA2B,OAAO;AAClC;AACA,2BAA2B,OAAO;AAClC;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,YAAY;AACZ;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,gBAAgB;AAClC,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,mBAAmB,WAAW;AAC9B,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA,+BAA+B,UAAU;AACzC,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,iDAAiD;AACjD,iFAAiF;AACjF,6DAA6D;AAC7D,+DAA+D;AAC/D,0BAA0B;AAC1B,iCAAiC;AACjC;AACA,qBAAqB,IAAI,MAAM;AAC/B,0BAA0B,cAAc;AACxC,wBAAwB,OAAO,MAAM;AACrC,2BAA2B;AAC3B,0BAA0B;AAC1B,2BAA2B;AAC3B,qBAAqB;AACrB,gBAAgB;AAChB,0BAA0B,cAAc;AACxC,wBAAwB,OAAO,MAAM;AACrC,2BAA2B;AAC3B,8BAA8B;AAC9B,iCAAiC;AACjC,6BAA6B;AAC7B,uBAAuB;AACvB,kBAAkB;AAClB,gBAAgB;AAChB,2BAA2B;AAC3B,0BAA0B,cAAc;AACxC,wBAAwB,OAAO,sBAAsB;AACrD,0BAA0B,cAAc;AACxC,wBAAwB,OAAO,MAAM;AACrC,2BAA2B;AAC3B,2BAA2B;AAC3B,2BAA2B;AAC3B;AACA;AACA,4BAA4B;AAC5B,gBAAgB;AAChB,0BAA0B,cAAc;AACxC,wBAAwB,OAAO,kBAAkB;AACjD,0BAA0B,cAAc;AACxC,wBAAwB,OAAO,kBAAkB;AACjD,cAAc;AACd,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,mBAAmB,WAAW;AAC9B;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,6CAA6C,OAAO;AACpD;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,6CAA6C,OAAO;AACpD;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbuBAAuB,UAAU;AACjzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uBAAuB,OAAO;AAC9B;AACA;;AAEA,uBAAuB,OAAO;AAC9B;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,UAAU;AAC7B,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA,uBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA,+BAA+B,UAAU;AACzC;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA,uBAAuB,UAAU;AACjC;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAU;AACpC,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAU;AACpC,0BAA0B,UAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAU;AACpC,0BAA0B,UAAU;AACpC,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,mCAAmC;AACnC,mCAAmC;AACnC,4BAA4B;AAC5B;AACA,sCAAsC;AACtC,mCAAmC;AACnC;AACA,wBAAwB;AACxB,mCAAmC;AACnC;AACA,+BAA+B;AAC/B,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,sBAAsB;AACtB;AACA;AACA,oCAAoC;AACpC,2BAA2B;AAC3B,8BAA8B;AAC9B;AACA;AACA;AACA,uBAAuB;AACvB,uBAAuB;AACvB,yBAAyB;AACzB;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,eAAe,QAAQ;AACvB;AACA,mBAAmB;AACnB;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,2BAA2B,UAAU;AACrC;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,mBAAmB,QAAQ;AAC3B;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,QAAQ;AAC/B;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,WAAW;AAClC;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,QAAQ;AAC/B;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,8BAA8B,QAAQ;AACtC,2BAA2B,QAAQ;AACnC;AACA;AACA;;AAEA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,eAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB,mCAAmC,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC,WAAW;AAC5C;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,iCAAiC,WAAW;AAC5C;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA,mBAAmB,4CAA4C;AAC/D;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA,2BAA2B,OAAO;AAClC;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,uBAAuB,OAAO;AAC9B;AACA,2BAA2B,OAAO;AAClC,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,uBAAuB,OAAO;AAC9B,uBAAuB,OAAO;AAC9B;AACA,2BAA2B,OAAO;AAClC,2BAA2B,OAAO;AAClC;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA,2BAA2B,OAAO;AAClC;AACA,2BAA2B,OAAO;AAClC;AACA,uBAAuB,OAAO;AAC9B,SAAS,iBAAiB,OAAO;AACjC;AACA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B,+BAA+B,mBAAmB;AAClD;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,cAAc;;AAE7B;AACA,eAAe,OAAO;AACtB;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;AACZ;;;;;;;;;;;AC3yMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,KAA4D;AAC9D,EAAE,CACwG;AAC1G,CAAC,qBAAqB;;AAEtB;AACA;AACA;AACA;AACA;AACA,oBAAoB;;AAEpB,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;;AAEhmDAAmD;;AAEnD,wEAAwE;;AAExE;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA,sBAAsB;;AAEtB,wBAAwB;;AAExB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;;AAEzuCAAuC;;AAEvC;AACA;AACA;AACA,yBAAyB;;AAEzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA,yCAAyC;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;AAGP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+HAA+H;;AAE/H,0CAA0C;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;AAGP;AACA;AACA,OAAO;AACP;AACA;;AAEA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;;AAGA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;;AAExB;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;;AAEvB;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA,KAAK;;;AAGL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA,gCAAgC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA,0CAA0C;;AAE1C;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,6DAA6D;;AAE7D;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;;AAEvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;;AAEA,oGAAoG;;AAEpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yFAAyF;;AAEzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B,mCAAmC;AACnC;;AAEA,sCAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;;AAExC;AACA;;AAEA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAsC;;AAEtC;AACA;AACA,OAAO;AACP;AACA;;AAEA,0CAA0C;;AAE1C;AACA;AACA;AACA,yCAAyC;;AAEzqCAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mKAAmK;;AAEnK;AACA;AACA;AACA;AACA;AACA,uDAAuD;;AAEvD,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA,mCAAmC;;AAEnC,2CAA2C;;AAE3C;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,0CAA0C,SAAS;;AAEnD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uEAAuE,aAAa;AACpF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;;AAEA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;;AAEA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;;AAEA;AACA;AACA;AACA;AACA,qEAAqE;AACraAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe;AACf;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;;;;;;;;;;;AC/gGD;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEa;AACyC;AACX;AACM;;AAEjD;AACA;AACA,mBAAmB;AACnB,0BAA0B;AAC1B,0BAA0B;AAC1B,6BAA6B;AAC7B,iCAAiC;AACjC,6BAA6B;AAC7B,6BAA6B;AAC7B;;AAEA;AACA,kBAAkB;AAClB,4BAA4B;AAC5B,mBAAmB;AACnB,cAAc;AACd,aAAa;AACb,6BAA6B;;AAE7B;AACA,iCAAiC;AACjC,wCAAwC;AACxC,+BAA+B;AAC/B,gBAAgB;AAChB,mBAAmB;AACnB,iBAAiB;AACjB,8BAA8B;;AAE9B;AACA,wBAAwB;AACxB,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,6BAA6B,oEAAwB;AACrD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,8CAA8C;AAC9C,+CAA+C;AAC/C,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kCAAkC,oEAAwB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,sCAAsC;AACtC,uCAAuC;AACvC,gEAAgE;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,mEAAuB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;;AAE/C,eAAe,4DAAgB;;AAE/B;AACA;AACA,sBAAsB,+DAAW,IAAI;AACrC,oBAAoB,wEAAoB;AACxC,qBAAqB,wEAAoB;AACzC;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,+EAA2B;AAC5C,oBAAoB,+EAA2B;AAC/C;AACA;AACA;;AAEA;AACA,oBAAoB,+DAAW,CAAC,wEAAoB;AACpD,gBAAgB,uEAAmB;AACnC;AACA;AACA;AACA,gDAAgD;;AAEhD;AACA,iBAAiB,8DAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,mBAAmB,4DAAgB;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,iBAAiB,0DAAc;AAC/B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,8DAAkB,oBAAoB;AAC5E,qCAAqC,qEAAyB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,+DAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;;AAEA;AACA,oCAAoC;AACpC;;AAEA;AACA,oCAAoC;AACpC;AACA;;AAEA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,8DAAkB;AAChE;AACA;AACA,kCAAkC;AAClC,6CAA6C,qEAAyB;AACtE;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mGAAmG;AACnG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,0BAA0B,8DAAkB,EAAE,mBAAmB;AACjE,gBAAgB,mEAAuB,EAAE,mBAAmB,yBAAyB,6DAAiB;AACtG,8BAA8B,6DAAiB;AAC/C;AACA;AACA,yBAAyB,qEAAyB;;AAElD;AACA;AACA;;AAEA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8DAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8DAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,8DAAkB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,8DAAkB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8DAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,kCAAkC,8DAAkB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,sCAAsC,8DAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,8DAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8DAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iCAAiC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8DAAkB;;AAEtD;AACA,yCAAyC,mEAAuB;AAChE;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qEAAyB;AACtE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qDAAqD,mEAAuB;AAC5E;AACA;;AAEA;AACA;AACA,iDAAiD;AACjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qEAAyB;AACtE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qDAAqD,mEAAuB;AAC5E;AACA;;AAEA;AACA;AACA,iDAAiD;AACjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC7lDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA;WACA,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA;WACA,CAAC,I;;;;;WCPD,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"positionCruncher.js","sourcesContent":["/*!\n Copyright (c) 2016 Fabio Soldati, www.peakfinder.org\n License MIT: http://www.opensource.org/licenses/MIT\n*/\nvar A={JMod:2400000.5,J2000:2451545,J1900:2415020,B1900:2415020.3135,B1950:2433282.4235,JulianYear:365.25,JulianCentury:36525,BesselianYear:365.2421988,AU:149597870};A.EclCoord=function(a,b,c){if(isNaN(a)||isNaN(b))throw Error(\"Invalid EclCoord object: (\"+a+\", \"+b+\")\");this.lat=a;this.lng=b;void 0!==c&&(this.h=c)};A.EclCoord.prototype={toWgs84String:function(){return A.Math.formatNum(180*this.lat/Math.PI)+\", \"+A.Math.formatNum(180*-this.lng/Math.PI)}};A.EclCoord.fromWgs84=function(a,b,c){return new A.EclCoord(a*Math.PI/180,-b*Math.PI/180,c)};\nA.EqCoord=function(a,b){if(isNaN(a)||isNaN(b))throw Error(\"Invalid EqCoord object: (\"+a+\", \"+b+\")\");this.ra=a;this.dec=b};A.EqCoord.prototype={toString:function(){return\"ra:\"+A.Math.formatNum(180*this.ra/Math.PI)+\", dec:\"+A.Math.formatNum(180*this.dec/Math.PI)}};A.HzCoord=function(a,b){if(isNaN(a)||isNaN(b))throw Error(\"Invalid HzCoord object: (\"+a+\", \"+b+\")\");this.az=a;this.alt=b};\nA.HzCoord.prototype={toString:function(){return\"azi:\"+A.Math.formatNum(180*this.az/Math.PI)+\", alt:\"+A.Math.formatNum(180*this.alt/Math.PI)}};\nA.Coord={dmsToDeg:function(a,b,c,d){d=(60*(60*b+c)+d)/3600;return a?-d:d},calcAngle:function(a,b,c,d){return A.Coord.dmsToDeg(a,b,c,d)*Math.PI/180},calcRA:function(a,b,c){return A.Coord.dmsToDeg(!1,a,b,c)%24*15*Math.PI/180},secondsToHMSStr:function(a){var b=Math.floor(a/86400);a=A.Math.pMod(a,86400);var c=Math.floor(a/3600)%24,d=Math.floor(a/60)%60;a=Math.floor(a%60);return(0!==b?b+\"d \":\"\")+(10>c?\"0\":\"\")+c+\":\"+(10>d?\"0\":\"\")+d+\":\"+(10>a?\"0\":\"\")+a},secondsToHMStr:function(a){var b=Math.floor(a/86400);\na=A.Math.pMod(a,86400);var c=Math.floor(a/3600)%24;a=Math.floor(a/60)%60;return(0!==b?b+\"d \":\"\")+(10>c?\"0\":\"\")+c+\":\"+(10>a?\"0\":\"\")+a},eqToEcl:function(a,b){var c=Math.sin(a.ra),d=Math.sin(a.dec),e=Math.cos(a.dec),f=Math.sin(b);b=Math.cos(b);return new A.EclCoord(Math.atan2(c*b+d/e*f,Math.cos(a.ra)),Math.asin(d*b-e*f*c))},eclToEq:function(a,b){var c=Math.sin(a.lat),d=Math.sin(a.lng),e=Math.cos(a.lng),f=Math.sin(b);b=Math.cos(b);a=Math.atan2(c*b-d/e*f,Math.cos(a.lat));0>a&&(a+=2*Math.PI);return new A.EqCoord(a,\nMath.asin(d*b+e*f*c))},eqToHz:function(a,b,c){c=c-b.lng-a.ra;var d=Math.cos(c),e=Math.sin(b.lat);b=Math.cos(b.lat);var f=Math.sin(a.dec);a=Math.cos(a.dec);return new A.HzCoord(Math.atan2(Math.sin(c),d*e-f/a*b),Math.asin(e*f+b*a*d))}};A.DeltaT={jdToJde:function(a,b){b||(b=A.DeltaT.estimate(a));return a+b/86400},jdeToJd:function(a,b){b||(b=A.DeltaT.estimate(a));return a-b/86400},decimalYear:function(a){a=A.JulianDay.jdToCalendar(a);return a.y+(a.m-.5)/12},estimate:function(a){var b=A.DeltaT.decimalYear(a);a=Math.pow;return-500>b?-20+32*a((b-1820)/100,2):500>b?(b/=100,10583.6-1014.41*b+33.78311*a(b,2)-5.952053*a(b,3)-.1798452*a(b,4)+.022174192*a(b,5)+.0090316521*a(b,6)):1600>b?(b=(b-1E3)/100,1574.2-556.01*b+71.23472*a(b,2)+.319781*\na(b,3)-.8503463*a(b,4)-.005050998*a(b,5)+.0083572073*a(b,6)):1700>b?(b-=1600,120-.9808*b-.01532*a(b,2)+a(b,3)/7129):1800>b?(b-=1700,8.83+.1603*b-.0059285*a(b,2)+1.3336E-4*a(b,3)-a(b,4)/1174E3):1860>b?(b-=1800,13.72-.332447*b+.0068612*a(b,2)+.0041116*a(b,3)-3.7436E-4*a(b,4)+1.21272E-5*a(b,5)-1.699E-7*a(b,6)+8.75E-10*a(b,7)):1900>b?(b-=1860,7.62+.5737*b-.251754*a(b,2)+.01680668*a(b,3)-4.473624E-4*a(b,4)+a(b,5)/233174):1920>b?(b-=1900,-2.79+1.494119*b-.0598939*a(b,2)+.0061966*a(b,3)-1.97E-4*a(b,4)):\n1941>b?(b-=1920,21.2+.84493*b-.0761*a(b,2)+.0020936*a(b,3)):1961>b?(b-=1950,29.07+.407*b-a(b,2)/233+a(b,3)/2547):1986>b?(b-=1975,45.45+1.067*b-a(b,2)/260-a(b,3)/718):2005>b?(b-=2E3,63.86+.3345*b-.060374*a(b,2)+.0017275*a(b,3)+6.51814E-4*a(b,4)+2.373599E-5*a(b,5)):2050>b?(b-=2E3,62.92+.32217*b+.005589*a(b,2)):2150>b?-20+32*a((b-1820)/100,2)-.5628*(2150-b):-20+32*a((b-1820)/100,2)}};A.Globe={Er:6378.14,Fl:1/298.257,parallaxConstants:function(a,b){b||(b=0);var c=1-A.Globe.Fl;b=.001*b/A.Globe.Er;return{rhoslat:Math.sin(Math.atan(c*Math.tan(a)))*c+b*Math.sin(a),rhoclat:Math.cos(Math.atan(c*Math.tan(a)))+b*Math.cos(a)}}};A.Interp={newLen3:function(a,b,c){if(3!=c.length)throw\"Error not 3\";if(b==a)throw\"Error no x range\";var d=c[1]-c[0],e=c[2]-c[1];return{x1:a,x3:b,y:c,a:d,b:e,c:e-d,abSum:d+e,xSum:b+a,xDiff:b-a}},interpolateX:function(a,b){return A.Interp.interpolateN(a,(2*b-a.xSum)/a.xDiff)},interpolateN:function(a,b){return a.y[1]+.5*b*(a.abSum+b*a.c)}};A.JulianDay=function(a,b){a instanceof Date&&(a=A.JulianDay.dateToJD(a));this.jd=a;this.deltaT=b?b:A.DeltaT.estimate(this.jd);this.jde=A.DeltaT.jdToJde(this.jd,this.deltaT)};\nA.JulianDay.prototype={toCalendar:function(){return A.JulianDay.jdToCalendar(this.jd)},toDate:function(){return A.JulianDay.jdToDate(this.jd)},jdJ2000Century:function(){return(this.jd-A.J2000)/A.JulianCentury},jdeJ2000Century:function(){return(this.jde-A.J2000)/A.JulianCentury},startOfDay:function(){return new A.JulianDay(Math.floor(this.jde-.5)+.5,this.deltaT)}};A.JulianDay.gregorianTimeStart=Date.UTC(1582,9,4);\nA.JulianDay.jdFromGregorian=function(a,b,c){return new A.JulianDay(A.JulianDay.jdFromGregorian(a,b,c))};A.JulianDay.jdFromJulian=function(a,b,c){return new A.JulianDay(A.JulianDay.calendarJulianToJD(a,b,c))};A.JulianDay.jdFromJDE=function(a){var b=A.DeltaT.estimate(a);a=A.DeltaT.jdeToJd(a,b);return new A.JulianDay(a,b)};\nA.JulianDay.dateToJD=function(a){var b=a.getUTCDate()+A.JulianDay.secondsFromHMS(a.getUTCHours(),a.getUTCMinutes(),a.getUTCSeconds())/86400;return a.getTime()<A.JulianDay.gregorianTimeStart?A.JulianDay.calendarJulianToJD(a.getUTCFullYear(),a.getUTCMonth()+1,b):A.JulianDay.calendarGregorianToJD(a.getUTCFullYear(),a.getUTCMonth()+1,b)};\nA.JulianDay.calendarGregorianToJD=function(a,b,c){if(1==b||2==b)a--,b+=12;var d=Math.floor(a/100);return Math.floor(36525*(a+4716)/100)+Math.floor(306*(b+1)/10)+(2-d+Math.floor(d/4))+c-1524.5};A.JulianDay.calendarJulianToJD=function(a,b,c){if(1==b||2==b)a--,b+=12;return Math.floor(36525*(a+4716)/100)+Math.floor(306*(b+1)/10)+c-1524.5};A.JulianDay.secondsFromHMS=function(a,b,c){return 3600*a+60*b+c};\nA.JulianDay.jdToDate=function(a){var b=A.JulianDay.jdToCalendar(a);a=A.Math.modF(a+.5)[1];a=Math.round(86400*a);return new Date(Date.UTC(b.y,b.m-1,Math.floor(b.d),Math.floor(a/3600)%24,Math.floor(a/60)%60,Math.floor(a%60)))};\nA.JulianDay.jdToCalendar=function(a){a=A.Math.modF(a+.5);var b=a[0],c=b;2299151<=b&&(c=Math.floor((100*b-186721625)/3652425),c=b+1+c-Math.floor(c/4));var d=c+1524;b=Math.floor((100*d-12210)/36525);var e=Math.floor(36525*b/100);c=Math.floor(1E4*(d-e)/306001);a=d-e-Math.floor(306001*c/1E4)+a[1];c=14==c||15==c?c-13:c-1;return{y:1==c||2==c?Math.floor(b)-4715:Math.floor(b)-4716,m:c,d:a}};A.JulianDay.leapYearGregorian=function(a){return 0===a%4&&0!==a%100||0===a%400};\nA.JulianDay.dayOfYear=function(a,b,c,d){a=2;d&&a--;return A.JulianDay._wholeMonths(b,a)+c};A.JulianDay._wholeMonths=function(a,b){return Math.round(275*a/9-(a+9)/12*b-30)};A.Math={pMod:function(a,b){a%=b;0>a&&(a+=b);return a},modF:function(a){return 0>a?(a=-a,[-Math.floor(a),-(a%1)]):[Math.floor(a),a%1]},horner:function(a,b){var c=b.length-1;if(0>=c)throw\"empty array not supported\";for(var d=b[c];0<c;)c--,d=d*a+b[c];return d},formatNum:function(a,b){b=Math.pow(10,b|4);return Math.round(a*b)/b}};A.Moon={parallax:function(a){return Math.asin(6378.14/a)},apparentEquatorial:function(a){var b=A.Moon.geocentricPosition(a),c=A.Nutation.nutation(a);a=A.Nutation.meanObliquityLaskar(a)+c.deltaobliquity;return{eq:A.Coord.eclToEq(new A.EclCoord(b.lng+c.deltalng,b.lat),a),delta:b.delta}},apparentTopocentric:function(a,b,c){var d=A.Moon.apparentEquatorial(a),e=A.Globe.parallaxConstants(b.lat,b.h),f=A.Moon.parallax(d.delta);c||(c=A.Sidereal.apparentInRa(a));return{eq:A.Parallax.topocentric(d.eq,f,e.rhoslat,\ne.rhoclat,b.lng,c),delta:d.delta}},topocentricPosition:function(a,b,c){var d=A.Sidereal.apparentInRa(a);a=A.Moon.apparentTopocentric(a,b,d);var e=A.Coord.eqToHz(a.eq,b,d);!0===c&&(e.alt+=A.Refraction.bennett2(e.alt));b=A.Moon.parallacticAngle(b.lat,d-(b.lng+a.eq.ra),a.eq.dec);return{hz:e,eq:a.eq,delta:a.delta,q:b}},approxTransit:function(a,b){a=a.startOfDay();return A.Rise.approxTransit(b,A.Sidereal.apparent0UT(a),A.Moon.apparentTopocentric(a,b).eq)},approxTimes:function(a,b){a=a.startOfDay();var c=\nA.Moon.apparentTopocentric(a,b),d=A.Moon.parallax(c.delta);d=A.Rise.stdh0Lunar(d);a=A.Sidereal.apparent0UT(a);return A.Rise.approxTimes(b,d,a,c.eq)},times:function(a,b){a=a.startOfDay();var c=A.Moon.apparentTopocentric(new A.JulianDay(a.jd-1,a.deltaT),b),d=A.Moon.apparentTopocentric(a,b),e=A.Moon.apparentTopocentric(new A.JulianDay(a.jd+1,a.deltaT),b),f=A.Moon.parallax(d.delta);f=A.Rise.stdh0Lunar(f);var g=A.Sidereal.apparent0UT(a);return A.Rise.times(b,a.deltaT,f,g,[c.eq,d.eq,e.eq])},parallacticAngle:function(a,\nb,c){return Math.atan2(Math.sin(b),Math.tan(a)*Math.cos(c)-Math.sin(c)*Math.cos(b))},geocentricPosition:function(a){var b=Math.PI/180,c=a.jdeJ2000Century();a=A.Math.pMod(A.Math.horner(c,[218.3164477*b,481267.88123421*b,-.0015786*b,b/538841,-b/65194E3]),2*Math.PI);var d=A.Math.pMod(A.Math.horner(c,[297.8501921*b,445267.1114034*b,-.0018819*b,b/545868,-b/113065E3]),2*Math.PI),e=A.Math.pMod(A.Math.horner(c,[357.5291092*b,35999.0502909*b,-1.535E-4*b,b/2449E4]),2*Math.PI),f=A.Math.pMod(A.Math.horner(c,\n[134.9633964*b,477198.8675055*b,.0087414*b,b/69699,-b/14712E3]),2*Math.PI),g=A.Math.pMod(A.Math.horner(c,[93.272095*b,483202.0175233*b,-.0036539*b,-b/3526E3,b/86331E4]),2*Math.PI),l=119.75*b+131.849*b*c,m=53.09*b+479264.29*b*c,h=313.45*b+481266.484*b*c;c=A.Math.horner(c,[1,-.002516,-7.4E-6]);var p=c*c;m=3958*Math.sin(l)+1962*Math.sin(a-g)+318*Math.sin(m);var n=0;l=-2235*Math.sin(a)+382*Math.sin(h)+175*Math.sin(l-g)+175*Math.sin(l+g)+127*Math.sin(a-f)-115*Math.sin(a+f);for(h=0;h<A.Moon.ta.length;h++){var k=\nA.Moon.ta[h];var r=d*k[0]+e*k[1]+f*k[2]+g*k[3],q=Math.sin(r);r=Math.cos(r);switch(k[1]){case 0:m+=k[4]*q;n+=k[5]*r;break;case 1:case -1:m+=k[4]*q*c;n+=k[5]*r*c;break;case 2:case -2:m+=k[4]*q*p;n+=k[5]*r*p;break;default:throw\"error\";}}for(h=0;h<A.Moon.tb.length;h++)switch(k=A.Moon.tb[h],q=Math.sin(d*k[0]+e*k[1]+f*k[2]+g*k[3]),k[1]){case 0:l+=k[4]*q;break;case 1:case -1:l+=k[4]*q*c;break;case 2:case -2:l+=k[4]*q*p;break;default:throw\"error\";}return{lng:A.Math.pMod(a,2*Math.PI)+1E-6*m*b,lat:1E-6*l*b,\ndelta:385000.56+.001*n}},ta:[[0,0,1,0,6288774,-20905355],[2,0,-1,0,1274027,-3699111],[2,0,0,0,658314,-2955968],[0,0,2,0,213618,-569925],[0,1,0,0,-185116,48888],[0,0,0,2,-114332,-3149],[2,0,-2,0,58793,246158],[2,-1,-1,0,57066,-152138],[2,0,1,0,53322,-170733],[2,-1,0,0,45758,-204586],[0,1,-1,0,-40923,-129620],[1,0,0,0,-34720,108743],[0,1,1,0,-30383,104755],[2,0,0,-2,15327,10321],[0,0,1,2,-12528,0],[0,0,1,-2,10980,79661],[4,0,-1,0,10675,-34782],[0,0,3,0,10034,-23210],[4,0,-2,0,8548,-21636],[2,1,-1,0,\n-7888,24208],[2,1,0,0,-6766,30824],[1,0,-1,0,-5163,-8379],[1,1,0,0,4987,-16675],[2,-1,1,0,4036,-12831],[2,0,2,0,3994,-10445],[4,0,0,0,3861,-11650],[2,0,-3,0,3665,14403],[0,1,-2,0,-2689,-7003],[2,0,-1,2,-2602,0],[2,-1,-2,0,2390,10056],[1,0,1,0,-2348,6322],[2,-2,0,0,2236,-9884],[0,1,2,0,-2120,5751],[0,2,0,0,-2069,0],[2,-2,-1,0,2048,-4950],[2,0,1,-2,-1773,4130],[2,0,0,2,-1595,0],[4,-1,-1,0,1215,-3958],[0,0,2,2,-1110,0],[3,0,-1,0,-892,3258],[2,1,1,0,-810,2616],[4,-1,-2,0,759,-1897],[0,2,-1,0,-713,-2117],\n[2,2,-1,0,-700,2354],[2,1,-2,0,691,0],[2,-1,0,-2,596,0],[4,0,1,0,549,-1423],[0,0,4,0,537,-1117],[4,-1,0,0,520,-1571],[1,0,-2,0,-487,-1739],[2,1,0,-2,-399,0],[0,0,2,-2,-381,-4421],[1,1,1,0,351,0],[3,0,-2,0,-340,0],[4,0,-3,0,330,0],[2,-1,2,0,327,0],[0,2,1,0,-323,1165],[1,1,-1,0,299,0],[2,0,3,0,294,0],[2,0,-1,-2,0,8752]],tb:[[0,0,0,1,5128122],[0,0,1,1,280602],[0,0,1,-1,277693],[2,0,0,-1,173237],[2,0,-1,1,55413],[2,0,-1,-1,46271],[2,0,0,1,32573],[0,0,2,1,17198],[2,0,1,-1,9266],[0,0,2,-1,8822],[2,-1,0,\n-1,8216],[2,0,-2,-1,4324],[2,0,1,1,4200],[2,1,0,-1,-3359],[2,-1,-1,1,2463],[2,-1,0,1,2211],[2,-1,-1,-1,2065],[0,1,-1,-1,-1870],[4,0,-1,-1,1828],[0,1,0,1,-1794],[0,0,0,3,-1749],[0,1,-1,1,-1565],[1,0,0,1,-1491],[0,1,1,1,-1475],[0,1,1,-1,-1410],[0,1,0,-1,-1344],[1,0,0,-1,-1335],[0,0,3,1,1107],[4,0,0,-1,1021],[4,0,-1,1,833],[0,0,1,-3,777],[4,0,-2,1,671],[2,0,0,-3,607],[2,0,2,-1,596],[2,-1,1,-1,491],[2,0,-2,1,-451],[0,0,3,-1,439],[2,0,2,1,422],[2,0,-3,-1,421],[2,1,-1,1,-366],[2,1,0,1,-351],[4,0,0,1,331],\n[2,-1,1,1,315],[2,-2,0,-1,302],[0,0,1,3,-283],[2,1,1,-1,-229],[1,1,0,-1,223],[1,1,0,1,223],[0,1,-2,-1,-220],[2,1,-1,-1,-220],[1,0,1,1,-185],[2,-1,-2,-1,181],[0,1,2,1,-177],[4,0,-2,-1,176],[4,-1,-1,-1,166],[1,0,1,-1,-164],[4,0,1,-1,132],[1,0,-1,-1,-119],[4,-1,0,-1,115],[2,-2,0,1,107]]};A.MoonIllum={phaseAngleEq:function(a,b,c,d){a=A.MoonIllum._coselong(a,c);return Math.atan2(d*Math.sin(Math.acos(a)),b-d*a)},phaseAngleEq2:function(a,b){return Math.acos(-A.MoonIllum._coselong(a,b))},illuminated:function(a){return(1+Math.cos(a))/2},positionAngle:function(a,b){var c=Math.cos(b.dec);return Math.atan2(c*Math.sin(b.ra-a.ra),Math.sin(b.dec)*Math.cos(a.dec)-c*Math.sin(a.dec)*Math.cos(b.ra-a.ra))},_coselong:function(a,b){return Math.sin(b.dec)*Math.sin(a.dec)+Math.cos(b.dec)*Math.cos(a.dec)*\nMath.cos(b.ra-a.ra)}};A.Nutation={nutation:function(a){a=a.jdeJ2000Century();for(var b=A.Math.horner(a,[297.85036,445267.11148,-.0019142,1/189474])*Math.PI/180,c=A.Math.horner(a,[357.52772,35999.05034,-1.603E-4,-1/3E5])*Math.PI/180,d=A.Math.horner(a,[134.96298,477198.867398,.0086972,1/5620])*Math.PI/180,e=A.Math.horner(a,[93.27191,483202.017538,-.0036825,1/327270])*Math.PI/180,f=A.Math.horner(a,[125.04452,-1934.136261,.0020708,1/45E4])*Math.PI/180,g=0,l=0,m=A.Nutation.table22A.length-1;0<=m;m--){var h=A.Nutation.table22A[m],\np=h[0]*b+h[1]*c+h[2]*d+h[3]*e+h[4]*f,n=Math.cos(p);g+=Math.sin(p)*(h[5]+h[6]*a);l+=n*(h[7]+h[8]*a)}return{deltalng:1E-4/3600*g*(Math.PI/180),deltaobliquity:1E-4/3600*l*(Math.PI/180)}},nutationInRA:function(a){var b=A.Nutation.meanObliquityLaskar(a);a=A.Nutation.nutation(a);return a.deltalng*Math.cos(b+a.deltaobliquity)},trueObliquity:function(a){var b=A.Nutation.meanObliquityLaskar(a);a=A.Nutation.nutation(a);return b+a.deltaobliquity},meanObliquity:function(a){return A.Math.horner(a.jdeJ2000Century(),\n[84381.448/3600*(Math.PI/180),-46.815/3600*(Math.PI/180),-5.9E-4/3600*(Math.PI/180),.001813/3600*(Math.PI/180)])},meanObliquityLaskar:function(a){return A.Math.horner(.01*a.jdeJ2000Century(),[84381.448/3600*(Math.PI/180),-4680.93/3600*(Math.PI/180),-1.55/3600*(Math.PI/180),1999.25/3600*(Math.PI/180),-51.38/3600*(Math.PI/180),-249.67/3600*(Math.PI/180),-39.05/3600*(Math.PI/180),7.12/3600*(Math.PI/180),27.87/3600*(Math.PI/180),5.79/3600*(Math.PI/180),2.45/3600*(Math.PI/180)])},table22A:[[0,0,0,0,1,\n-171996,-174.2,92025,8.9],[-2,0,0,2,2,-13187,-1.6,5736,-3.1],[0,0,0,2,2,-2274,-.2,977,-.5],[0,0,0,0,2,2062,.2,-895,.5],[0,1,0,0,0,1426,-3.4,54,-.1],[0,0,1,0,0,712,.1,-7,0],[-2,1,0,2,2,-517,1.2,224,-.6],[0,0,0,2,1,-386,-.4,200,0],[0,0,1,2,2,-301,0,129,-.1],[-2,-1,0,2,2,217,-.5,-95,.3],[-2,0,1,0,0,-158,0,0,0],[-2,0,0,2,1,129,.1,-70,0],[0,0,-1,2,2,123,0,-53,0],[2,0,0,0,0,63,0,0,0],[0,0,1,0,1,63,.1,-33,0],[2,0,-1,2,2,-59,0,26,0],[0,0,-1,0,1,-58,-.1,32,0],[0,0,1,2,1,-51,0,27,0],[-2,0,2,0,0,48,0,0,0],[0,\n0,-2,2,1,46,0,-24,0],[2,0,0,2,2,-38,0,16,0],[0,0,2,2,2,-31,0,13,0],[0,0,2,0,0,29,0,0,0],[-2,0,1,2,2,29,0,-12,0],[0,0,0,2,0,26,0,0,0],[-2,0,0,2,0,-22,0,0,0],[0,0,-1,2,1,21,0,-10,0],[0,2,0,0,0,17,-.1,0,0],[2,0,-1,0,1,16,0,-8,0],[-2,2,0,2,2,-16,.1,7,0],[0,1,0,0,1,-15,0,9,0],[-2,0,1,0,1,-13,0,7,0],[0,-1,0,0,1,-12,0,6,0],[0,0,2,-2,0,11,0,0,0],[2,0,-1,2,1,-10,0,5,0],[2,0,1,2,2,-8,0,3,0],[0,1,0,2,2,7,0,-3,0],[-2,1,1,0,0,-7,0,0,0],[0,-1,0,2,2,-7,0,3,0],[2,0,0,2,1,-7,0,3,0],[2,0,1,0,0,6,0,0,0],[-2,0,2,2,2,\n6,0,-3,0],[-2,0,1,2,1,6,0,-3,0],[2,0,-2,0,1,-6,0,3,0],[2,0,0,0,1,-6,0,3,0],[0,-1,1,0,0,5,0,0,0],[-2,-1,0,2,1,-5,0,3,0],[-2,0,0,0,1,-5,0,3,0],[0,0,2,2,1,-5,0,3,0],[-2,0,2,0,1,4,0,0,0],[-2,1,0,2,1,4,0,0,0],[0,0,1,-2,0,4,0,0,0],[-1,0,1,0,0,-4,0,0,0],[-2,1,0,0,0,-4,0,0,0],[1,0,0,0,0,-4,0,0,0],[0,0,1,2,0,3,0,0,0],[0,0,-2,2,2,-3,0,0,0],[-1,-1,1,0,0,-3,0,0,0],[0,1,1,0,0,-3,0,0,0],[0,-1,1,2,2,-3,0,0,0],[2,-1,-1,2,2,-3,0,0,0],[0,0,3,2,2,-3,0,0,0],[2,-1,0,2,2,-3,0,0,0]]};A.Parallax={earthsunParallax:8.794/60/60*Math.PI/180,horizontal:function(a){return 8.794/60/60*Math.PI/180/a},topocentric:function(a,b,c,d,e,f){e=A.Math.pMod(f-e-a.ra,2*Math.PI);b=Math.sin(b);f=Math.cos(e);var g=Math.cos(a.dec);e=Math.atan2(-d*b*Math.sin(e),g-d*b*f);return new A.EqCoord(a.ra+e,Math.atan2((Math.sin(a.dec)-c*b)*Math.cos(e),g-d*b*f))},topocentric2:function(a,b,c,d,e,f){e=A.Math.pMod(f-e-a.ra,2*Math.PI);f=Math.cos(a.dec);return new A.EqCoord(a.ra+-b*d*Math.sin(e)/f,a.dec+-b*(c*f-d*Math.cos(e)*\nMath.sin(a.dec)))}};A.Refraction={bennett:function(a){0>a&&(a=0);var b=Math.PI/180;return b/60/Math.tan(a+7.31*b*b/(a+4.4*b))},bennett2:function(a){var b=Math.PI/180,c=60/b,d=.06/c;c=14.7*c*b;b*=13;a=A.Refraction.bennett(a);return a-d*Math.sin(c*a+b)},saemundsson:function(a){var b=Math.PI/180;return 1.02*b/60/Math.tan(a+10.3*b*b/(a+5.11*b))}};A.Rise={meanRefraction:.5667*Math.PI/180,stdh0Stellar:-.5667*Math.PI/180,stdh0Solar:-.8333*Math.PI/180,stdh0LunarMean:.125*Math.PI/180,stdh0Lunar:function(a){return.7275*a-A.Rise.meanRefraction},circumpolar:function(a,b,c){a=(Math.sin(b)-Math.sin(a)*Math.sin(c))/(Math.cos(a)*Math.cos(c));return-1>a||1<a?null:a},approxTransit:function(a,b,c){return 43200*(c.ra+a.lng)/Math.PI-b},approxTimes:function(a,b,c,d){b=A.Rise.circumpolar(a.lat,b,d.dec);if(!b)return null;b=43200*Math.acos(b)/Math.PI;a=43200*\n(d.ra+a.lng)/Math.PI-c;return{transit:A.Math.pMod(a,86400),transitd:Math.floor(a/86400),rise:A.Math.pMod(a-b,86400),rised:Math.floor((a-b)/86400),set:A.Math.pMod(a+b,86400),setd:Math.floor((a+b)/86400)}},times:function(a,b,c,d,e){function f(e){var f=A.Math.pMod(d+360.985647*e/360,86400),g=e+b,h=A.Interp.interpolateX(l,g);g=A.Interp.interpolateX(m,g);f=f*Math.PI/43200-(a.lng+h);h=Math.cos(g);return A.Math.pMod(e+(p*Math.sin(g)+n*h*Math.cos(f)-c)/(h*n*Math.sin(f))*43200/Math.PI,86400)}var g=A.Rise.approxTimes(a,\nc,d,e[1]);if(!g)return null;var l=A.Interp.newLen3(-86400,86400,[e[0].ra,e[1].ra,e[2].ra]),m=A.Interp.newLen3(-86400,86400,[e[0].dec,e[1].dec,e[2].dec]);e=d+360.985647*g.transit/360;var h=A.Interp.interpolateX(l,g.transit+b);g.transit=A.Math.pMod(g.transit-(e-43200*(a.lng+h)/Math.PI),86400);var p=Math.sin(a.lat),n=Math.cos(a.lat);g.rise=f(g.rise);g.set=f(g.set);return g}};A.Sidereal={iau82:[24110.54841,8640184.812866,.093104,6.2E-6],jdToCFrac:function(a){a=A.Math.modF(a.jd+.5);return[(new A.JulianDay(a[0]-.5)).jdJ2000Century(),a[1]]},mean:function(a){return A.Math.pMod(A.Sidereal._mean(a),86400)},_mean:function(a){a=A.Sidereal._mean0UT(a);return a.s+86636.55536784*a.f},_meanInRA:function(a){a=A.Sidereal._mean0UT(a);return a.s*Math.PI/43200+2.0054758187*a.f*Math.PI},mean0UT:function(a){a=A.Sidereal._mean0UT(a);return A.Math.pMod(a.s,86400)},_mean0UT:function(a){a=A.Sidereal.jdToCFrac(a);\nreturn{s:A.Math.horner(a[0],A.Sidereal.iau82),f:a[1]}},apparentInRa:function(a){var b=A.Sidereal._meanInRA(a);a=A.Nutation.nutationInRA(a);return A.Math.pMod(b+a,2*Math.PI)},apparent:function(a){var b=A.Sidereal._mean(a);a=648E3*A.Nutation.nutationInRA(a)/Math.PI/15;return A.Math.pMod(b+a,86400)},apparentLocal:function(a,b){a=A.Sidereal.apparent(a);return A.Math.pMod(a-43200*b/Math.PI,86400)},apparent0UT:function(a){var b=A.Math.modF(a.jd+.5);a=A.Math.modF(a.jde+.5);b=A.Math.horner((b[0]-.5-A.J2000)/\n36525,A.Sidereal.iau82)+86636.55536784*b[1];a=648E3*A.Nutation.nutationInRA(new A.JulianDay(a[0]))/Math.PI/15;return A.Math.pMod(b+a,86400)}};A.Solar={earthsunDelta:149597870,apparentEquatorial:function(a){var b=a.jdJ2000Century(),c=A.Solar.node(b);b=A.Solar.apparentLongitude(b,c);a=A.Nutation.meanObliquityLaskar(a)+.00256*Math.PI/180*Math.cos(c);c=Math.sin(b);return new A.EqCoord(Math.atan2(Math.cos(a)*c,Math.cos(b)),Math.asin(Math.sin(a)*c))},apparentTopocentric:function(a,b,c){var d=A.Solar.apparentEquatorial(a),e=A.Globe.parallaxConstants(b.lat,b.h);c||(c=A.Sidereal.apparentInRa(a));return A.Parallax.topocentric2(d,A.Parallax.earthsunParallax,\ne.rhoslat,e.rhoclat,b.lng,c)},topocentricPosition:function(a,b,c){var d=A.Sidereal.apparentInRa(a);a=A.Solar.apparentTopocentric(a,b,d);b=A.Coord.eqToHz(a,b,d);!0===c&&(b.alt+=A.Refraction.bennett2(b.alt));return{hz:b,eq:a}},approxTransit:function(a,b){a=a.startOfDay();return A.Rise.approxTransit(b,A.Sidereal.apparent0UT(a),A.Solar.apparentTopocentric(a,b))},approxTimes:function(a,b){var c=a.startOfDay();a=A.Solar.apparentTopocentric(c,b);var d=A.Rise.stdh0Solar;c=A.Sidereal.apparent0UT(c);return A.Rise.approxTimes(b,\nd,c,a)},times:function(a,b){a=a.startOfDay();var c=A.Solar.apparentTopocentric(new A.JulianDay(a.jd-1,a.deltaT),b),d=A.Solar.apparentTopocentric(a,b),e=A.Solar.apparentTopocentric(new A.JulianDay(a.jd+1,a.deltaT),b),f=A.Rise.stdh0Solar,g=A.Sidereal.apparent0UT(a);return A.Rise.times(b,a.deltaT,f,g,[c,d,e])},meanAnomaly:function(a){return A.Math.horner(a,[357.52911,35999.05029,-1.537E-4])*Math.PI/180},trueLongitude:function(a){var b=A.Math.horner(a,[280.46646,36000.76983,3.032E-4])*Math.PI/180,c=A.Solar.meanAnomaly(a);\na=(A.Math.horner(a,[1.914602,-.004817,-1.4E-5])*Math.sin(c)+(.019993-1.01E-4*a)*Math.sin(2*c)+2.89E-4*Math.sin(3*c))*Math.PI/180;return{s:A.Math.pMod(b+a,2*Math.PI),v:A.Math.pMod(c+a,2*Math.PI)}},apparentLongitude:function(a,b){b||(b=A.Solar.node(a));return A.Solar.trueLongitude(a).s-.00569*Math.PI/180-.00478*Math.PI/180*Math.sin(b)},node:function(a){return(125.04-1934.136*a)*Math.PI/180}};A.Solistice={march:function(a){return 1E3>a?A.Solistice._eq(a,A.Solistice.mc0):A.Solistice._eq(a-2E3,A.Solistice.mc2)},june:function(a){return 1E3>a?A.Solistice._eq(a,A.Solistice.jc0):A.Solistice._eq(a-2E3,A.Solistice.jc2)},september:function(a){return 1E3>a?A.Solistice._eq(a,A.Solistice.sc0):A.Solistice._eq(a-2E3,A.Solistice.sc2)},december:function(a){return 1E3>a?A.Solistice._eq(a,A.Solistice.dc0):A.Solistice._eq(a-2E3,A.Solistice.dc2)},_eq:function(a,b){a=A.Math.horner(.001*a,b);b=(a-A.J2000)/\nA.JulianCentury;var c=35999.373*Math.PI/180*b-2.47*Math.PI/180;c=1+.0334*Math.cos(c)+7E-4*Math.cos(2*c);for(var d=0,e=this.terms.length-1;0<=e;e--){var f=this.terms[e];d+=f[0]*Math.cos((f[1]+f[2]*b)*Math.PI/180)}return a+1E-5*d/c},mc0:[1721139.29189,365242.1374,.06134,.00111,-7.1E-4],jc0:[1721233.25401,365241.72562,-.05232,.00907,2.5E-4],sc0:[1721325.70455,365242.49558,-.11677,-.00297,7.4E-4],dc0:[1721414.39987,365242.88257,-.00769,-.00933,-6E-5],mc2:[2451623.80984,365242.37404,.05169,-.00411,-5.7E-4],\njc2:[2451716.56767,365241.62603,.00325,.00888,-3E-4],sc2:[2451810.21715,365242.01767,-.11575,.00337,7.8E-4],dc2:[2451900.05952,365242.74049,-.06223,-.00823,3.2E-4],terms:[[485,324.96,1934.136],[203,337.23,32964.467],[199,342.08,20.186],[182,27.85,445267.112],[156,73.14,45036.886],[136,171.52,22518.443],[77,222.54,65928.934],[74,296.72,3034.906],[70,243.58,9037.513],[58,119.81,33718.147],[52,297.17,150.678],[50,21.02,2281.226],[45,247.54,29929.562],[44,325.15,31555.956],[29,60.93,4443.417],[18,155.12,\n67555.328],[17,288.79,4562.452],[16,198.04,62894.029],[14,199.76,31436.921],[12,95.39,14577.848],[12,287.11,31931.756],[12,320.81,34777.259],[9,227.73,1222.114],[8,15.45,16859.074]]};\n\nexport { A };\n","'use strict';\n\nvar numeric = typeof exports === 'undefined' ? function numeric() {} : exports;\nif (typeof global !== 'undefined') {\n    global.numeric = numeric;\n}\n\nnumeric.version = '1.2.6';\n\n// 1. Utility functions\nnumeric.bench = function bench(f, interval) {\n    var t1, t2, n, i;\n    if (typeof interval === 'undefined') {\n        interval = 15;\n    }\n    n = 0.5;\n    t1 = new Date();\n    while (1) {\n        n *= 2;\n        for (i = n; i > 3; i -= 4) {\n            f();\n            f();\n            f();\n            f();\n        }\n        while (i > 0) {\n            f();\n            i--;\n        }\n        t2 = new Date();\n        if (t2 - t1 > interval) break;\n    }\n    for (i = n; i > 3; i -= 4) {\n        f();\n        f();\n        f();\n        f();\n    }\n    while (i > 0) {\n        f();\n        i--;\n    }\n    t2 = new Date();\n    return (1000 * (3 * n - 1)) / (t2 - t1);\n};\n\nnumeric._myIndexOf = function _myIndexOf(w) {\n    var n = this.length,\n        k;\n    for (k = 0; k < n; ++k) if (this[k] === w) return k;\n    return -1;\n};\nnumeric.myIndexOf = Array.prototype.indexOf\n    ? Array.prototype.indexOf\n    : numeric._myIndexOf;\n\nnumeric.Function = Function;\nnumeric.precision = 4;\nnumeric.largeArray = 50;\n\nnumeric.prettyPrint = function prettyPrint(x) {\n    function fmtnum(x) {\n        if (x === 0) {\n            return '0';\n        }\n        if (isNaN(x)) {\n            return 'NaN';\n        }\n        if (x < 0) {\n            return '-' + fmtnum(-x);\n        }\n        if (isFinite(x)) {\n            var scale = Math.floor(Math.log(x) / Math.log(10));\n            var normalized = x / Math.pow(10, scale);\n            var basic = normalized.toPrecision(numeric.precision);\n            if (parseFloat(basic) === 10) {\n                scale++;\n                normalized = 1;\n                basic = normalized.toPrecision(numeric.precision);\n            }\n            return parseFloat(basic).toString() + 'e' + scale.toString();\n        }\n        return 'Infinity';\n    }\n    var ret = [];\n    function foo(x) {\n        var k;\n        if (typeof x === 'undefined') {\n            ret.push(Array(numeric.precision + 8).join(' '));\n            return false;\n        }\n        if (typeof x === 'string') {\n            ret.push('\"' + x + '\"');\n            return false;\n        }\n        if (typeof x === 'boolean') {\n            ret.push(x.toString());\n            return false;\n        }\n        if (typeof x === 'number') {\n            var a = fmtnum(x);\n            var b = x.toPrecision(numeric.precision);\n            var c = parseFloat(x.toString()).toString();\n            var d = [\n                a,\n                b,\n                c,\n                parseFloat(b).toString(),\n                parseFloat(c).toString(),\n            ];\n            for (k = 1; k < d.length; k++) {\n                if (d[k].length < a.length) a = d[k];\n            }\n            ret.push(Array(numeric.precision + 8 - a.length).join(' ') + a);\n            return false;\n        }\n        if (x === null) {\n            ret.push('null');\n            return false;\n        }\n        if (typeof x === 'function') {\n            ret.push(x.toString());\n            var flag = false;\n            for (k in x) {\n                if (x.hasOwnProperty(k)) {\n                    if (flag) ret.push(',\\n');\n                    else ret.push('\\n{');\n                    flag = true;\n                    ret.push(k);\n                    ret.push(': \\n');\n                    foo(x[k]);\n                }\n            }\n            if (flag) ret.push('}\\n');\n            return true;\n        }\n        if (x instanceof Array) {\n            if (x.length > numeric.largeArray) {\n                ret.push('...Large Array...');\n                return true;\n            }\n            var flag = false;\n            ret.push('[');\n            for (k = 0; k < x.length; k++) {\n                if (k > 0) {\n                    ret.push(',');\n                    if (flag) ret.push('\\n ');\n                }\n                flag = foo(x[k]);\n            }\n            ret.push(']');\n            return true;\n        }\n        ret.push('{');\n        var flag = false;\n        for (k in x) {\n            if (x.hasOwnProperty(k)) {\n                if (flag) ret.push(',\\n');\n                flag = true;\n                ret.push(k);\n                ret.push(': \\n');\n                foo(x[k]);\n            }\n        }\n        ret.push('}');\n        return true;\n    }\n    foo(x);\n    return ret.join('');\n};\n\nnumeric.parseDate = function parseDate(d) {\n    function foo(d) {\n        if (typeof d === 'string') {\n            return Date.parse(d.replace(/-/g, '/'));\n        }\n        if (!(d instanceof Array)) {\n            throw new Error('parseDate: parameter must be arrays of strings');\n        }\n        var ret = [],\n            k;\n        for (k = 0; k < d.length; k++) {\n            ret[k] = foo(d[k]);\n        }\n        return ret;\n    }\n    return foo(d);\n};\n\nnumeric.parseFloat = function parseFloat_(d) {\n    function foo(d) {\n        if (typeof d === 'string') {\n            return parseFloat(d);\n        }\n        if (!(d instanceof Array)) {\n            throw new Error('parseFloat: parameter must be arrays of strings');\n        }\n        var ret = [],\n            k;\n        for (k = 0; k < d.length; k++) {\n            ret[k] = foo(d[k]);\n        }\n        return ret;\n    }\n    return foo(d);\n};\n\nnumeric.parseCSV = function parseCSV(t) {\n    var foo = t.split('\\n');\n    var j, k;\n    var ret = [];\n    var pat = /(([^'\",]*)|('[^']*')|(\"[^\"]*\")),/g;\n    var patnum = /^\\s*(([+-]?[0-9]+(\\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\\.[0-9]+)?(e[+-]?[0-9]+)?))\\s*$/;\n    var stripper = function (n) {\n        return n.substr(0, n.length - 1);\n    };\n    var count = 0;\n    for (k = 0; k < foo.length; k++) {\n        var bar = (foo[k] + ',').match(pat),\n            baz;\n        if (bar.length > 0) {\n            ret[count] = [];\n            for (j = 0; j < bar.length; j++) {\n                baz = stripper(bar[j]);\n                if (patnum.test(baz)) {\n                    ret[count][j] = parseFloat(baz);\n                } else ret[count][j] = baz;\n            }\n            count++;\n        }\n    }\n    return ret;\n};\n\nnumeric.toCSV = function toCSV(A) {\n    var s = numeric.dim(A);\n    var i, j, m, n, row, ret;\n    m = s[0];\n    n = s[1];\n    ret = [];\n    for (i = 0; i < m; i++) {\n        row = [];\n        for (j = 0; j < m; j++) {\n            row[j] = A[i][j].toString();\n        }\n        ret[i] = row.join(', ');\n    }\n    return ret.join('\\n') + '\\n';\n};\n\nnumeric.getURL = function getURL(url) {\n    var client = new XMLHttpRequest();\n    client.open('GET', url, false);\n    client.send();\n    return client;\n};\n\nnumeric.imageURL = function imageURL(img) {\n    function base64(A) {\n        var n = A.length,\n            i,\n            x,\n            y,\n            z,\n            p,\n            q,\n            r,\n            s;\n        var key =\n            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        var ret = '';\n        for (i = 0; i < n; i += 3) {\n            x = A[i];\n            y = A[i + 1];\n            z = A[i + 2];\n            p = x >> 2;\n            q = ((x & 3) << 4) + (y >> 4);\n            r = ((y & 15) << 2) + (z >> 6);\n            s = z & 63;\n            if (i + 1 >= n) {\n                r = s = 64;\n            } else if (i + 2 >= n) {\n                s = 64;\n            }\n            ret +=\n                key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);\n        }\n        return ret;\n    }\n    function crc32Array(a, from, to) {\n        if (typeof from === 'undefined') {\n            from = 0;\n        }\n        if (typeof to === 'undefined') {\n            to = a.length;\n        }\n        var table = [\n            0x00000000,\n            0x77073096,\n            0xee0e612c,\n            0x990951ba,\n            0x076dc419,\n            0x706af48f,\n            0xe963a535,\n            0x9e6495a3,\n            0x0edb8832,\n            0x79dcb8a4,\n            0xe0d5e91e,\n            0x97d2d988,\n            0x09b64c2b,\n            0x7eb17cbd,\n            0xe7b82d07,\n            0x90bf1d91,\n            0x1db71064,\n            0x6ab020f2,\n            0xf3b97148,\n            0x84be41de,\n            0x1adad47d,\n            0x6ddde4eb,\n            0xf4d4b551,\n            0x83d385c7,\n            0x136c9856,\n            0x646ba8c0,\n            0xfd62f97a,\n            0x8a65c9ec,\n            0x14015c4f,\n            0x63066cd9,\n            0xfa0f3d63,\n            0x8d080df5,\n            0x3b6e20c8,\n            0x4c69105e,\n            0xd56041e4,\n            0xa2677172,\n            0x3c03e4d1,\n            0x4b04d447,\n            0xd20d85fd,\n            0xa50ab56b,\n            0x35b5a8fa,\n            0x42b2986c,\n            0xdbbbc9d6,\n            0xacbcf940,\n            0x32d86ce3,\n            0x45df5c75,\n            0xdcd60dcf,\n            0xabd13d59,\n            0x26d930ac,\n            0x51de003a,\n            0xc8d75180,\n            0xbfd06116,\n            0x21b4f4b5,\n            0x56b3c423,\n            0xcfba9599,\n            0xb8bda50f,\n            0x2802b89e,\n            0x5f058808,\n            0xc60cd9b2,\n            0xb10be924,\n            0x2f6f7c87,\n            0x58684c11,\n            0xc1611dab,\n            0xb6662d3d,\n            0x76dc4190,\n            0x01db7106,\n            0x98d220bc,\n            0xefd5102a,\n            0x71b18589,\n            0x06b6b51f,\n            0x9fbfe4a5,\n            0xe8b8d433,\n            0x7807c9a2,\n            0x0f00f934,\n            0x9609a88e,\n            0xe10e9818,\n            0x7f6a0dbb,\n            0x086d3d2d,\n            0x91646c97,\n            0xe6635c01,\n            0x6b6b51f4,\n            0x1c6c6162,\n            0x856530d8,\n            0xf262004e,\n            0x6c0695ed,\n            0x1b01a57b,\n            0x8208f4c1,\n            0xf50fc457,\n            0x65b0d9c6,\n            0x12b7e950,\n            0x8bbeb8ea,\n            0xfcb9887c,\n            0x62dd1ddf,\n            0x15da2d49,\n            0x8cd37cf3,\n            0xfbd44c65,\n            0x4db26158,\n            0x3ab551ce,\n            0xa3bc0074,\n            0xd4bb30e2,\n            0x4adfa541,\n            0x3dd895d7,\n            0xa4d1c46d,\n            0xd3d6f4fb,\n            0x4369e96a,\n            0x346ed9fc,\n            0xad678846,\n            0xda60b8d0,\n            0x44042d73,\n            0x33031de5,\n            0xaa0a4c5f,\n            0xdd0d7cc9,\n            0x5005713c,\n            0x270241aa,\n            0xbe0b1010,\n            0xc90c2086,\n            0x5768b525,\n            0x206f85b3,\n            0xb966d409,\n            0xce61e49f,\n            0x5edef90e,\n            0x29d9c998,\n            0xb0d09822,\n            0xc7d7a8b4,\n            0x59b33d17,\n            0x2eb40d81,\n            0xb7bd5c3b,\n            0xc0ba6cad,\n            0xedb88320,\n            0x9abfb3b6,\n            0x03b6e20c,\n            0x74b1d29a,\n            0xead54739,\n            0x9dd277af,\n            0x04db2615,\n            0x73dc1683,\n            0xe3630b12,\n            0x94643b84,\n            0x0d6d6a3e,\n            0x7a6a5aa8,\n            0xe40ecf0b,\n            0x9309ff9d,\n            0x0a00ae27,\n            0x7d079eb1,\n            0xf00f9344,\n            0x8708a3d2,\n            0x1e01f268,\n            0x6906c2fe,\n            0xf762575d,\n            0x806567cb,\n            0x196c3671,\n            0x6e6b06e7,\n            0xfed41b76,\n            0x89d32be0,\n            0x10da7a5a,\n            0x67dd4acc,\n            0xf9b9df6f,\n            0x8ebeeff9,\n            0x17b7be43,\n            0x60b08ed5,\n            0xd6d6a3e8,\n            0xa1d1937e,\n            0x38d8c2c4,\n            0x4fdff252,\n            0xd1bb67f1,\n            0xa6bc5767,\n            0x3fb506dd,\n            0x48b2364b,\n            0xd80d2bda,\n            0xaf0a1b4c,\n            0x36034af6,\n            0x41047a60,\n            0xdf60efc3,\n            0xa867df55,\n            0x316e8eef,\n            0x4669be79,\n            0xcb61b38c,\n            0xbc66831a,\n            0x256fd2a0,\n            0x5268e236,\n            0xcc0c7795,\n            0xbb0b4703,\n            0x220216b9,\n            0x5505262f,\n            0xc5ba3bbe,\n            0xb2bd0b28,\n            0x2bb45a92,\n            0x5cb36a04,\n            0xc2d7ffa7,\n            0xb5d0cf31,\n            0x2cd99e8b,\n            0x5bdeae1d,\n            0x9b64c2b0,\n            0xec63f226,\n            0x756aa39c,\n            0x026d930a,\n            0x9c0906a9,\n            0xeb0e363f,\n            0x72076785,\n            0x05005713,\n            0x95bf4a82,\n            0xe2b87a14,\n            0x7bb12bae,\n            0x0cb61b38,\n            0x92d28e9b,\n            0xe5d5be0d,\n            0x7cdcefb7,\n            0x0bdbdf21,\n            0x86d3d2d4,\n            0xf1d4e242,\n            0x68ddb3f8,\n            0x1fda836e,\n            0x81be16cd,\n            0xf6b9265b,\n            0x6fb077e1,\n            0x18b74777,\n            0x88085ae6,\n            0xff0f6a70,\n            0x66063bca,\n            0x11010b5c,\n            0x8f659eff,\n            0xf862ae69,\n            0x616bffd3,\n            0x166ccf45,\n            0xa00ae278,\n            0xd70dd2ee,\n            0x4e048354,\n            0x3903b3c2,\n            0xa7672661,\n            0xd06016f7,\n            0x4969474d,\n            0x3e6e77db,\n            0xaed16a4a,\n            0xd9d65adc,\n            0x40df0b66,\n            0x37d83bf0,\n            0xa9bcae53,\n            0xdebb9ec5,\n            0x47b2cf7f,\n            0x30b5ffe9,\n            0xbdbdf21c,\n            0xcabac28a,\n            0x53b39330,\n            0x24b4a3a6,\n            0xbad03605,\n            0xcdd70693,\n            0x54de5729,\n            0x23d967bf,\n            0xb3667a2e,\n            0xc4614ab8,\n            0x5d681b02,\n            0x2a6f2b94,\n            0xb40bbe37,\n            0xc30c8ea1,\n            0x5a05df1b,\n            0x2d02ef8d,\n        ];\n\n        var crc = -1,\n            y = 0,\n            n = a.length,\n            i;\n\n        for (i = from; i < to; i++) {\n            y = (crc ^ a[i]) & 0xff;\n            crc = (crc >>> 8) ^ table[y];\n        }\n\n        return crc ^ -1;\n    }\n\n    var h = img[0].length,\n        w = img[0][0].length,\n        s1,\n        s2,\n        next,\n        k,\n        length,\n        a,\n        b,\n        i,\n        j,\n        adler32,\n        crc32;\n    var stream = [\n        137,\n        80,\n        78,\n        71,\n        13,\n        10,\n        26,\n        10, //  0: PNG signature\n        0,\n        0,\n        0,\n        13, //  8: IHDR Chunk length\n        73,\n        72,\n        68,\n        82, // 12: \"IHDR\"\n        (w >> 24) & 255,\n        (w >> 16) & 255,\n        (w >> 8) & 255,\n        w & 255, // 16: Width\n        (h >> 24) & 255,\n        (h >> 16) & 255,\n        (h >> 8) & 255,\n        h & 255, // 20: Height\n        8, // 24: bit depth\n        2, // 25: RGB\n        0, // 26: deflate\n        0, // 27: no filter\n        0, // 28: no interlace\n        -1,\n        -2,\n        -3,\n        -4, // 29: CRC\n        -5,\n        -6,\n        -7,\n        -8, // 33: IDAT Chunk length\n        73,\n        68,\n        65,\n        84, // 37: \"IDAT\"\n        // RFC 1950 header starts here\n        8, // 41: RFC1950 CMF\n        29, // 42: RFC1950 FLG\n    ];\n    crc32 = crc32Array(stream, 12, 29);\n    stream[29] = (crc32 >> 24) & 255;\n    stream[30] = (crc32 >> 16) & 255;\n    stream[31] = (crc32 >> 8) & 255;\n    stream[32] = crc32 & 255;\n    s1 = 1;\n    s2 = 0;\n    for (i = 0; i < h; i++) {\n        if (i < h - 1) {\n            stream.push(0);\n        } else {\n            stream.push(1);\n        }\n        a = (3 * w + 1 + (i === 0)) & 255;\n        b = ((3 * w + 1 + (i === 0)) >> 8) & 255;\n        stream.push(a);\n        stream.push(b);\n        stream.push(~a & 255);\n        stream.push(~b & 255);\n        if (i === 0) stream.push(0);\n        for (j = 0; j < w; j++) {\n            for (k = 0; k < 3; k++) {\n                a = img[k][i][j];\n                if (a > 255) a = 255;\n                else if (a < 0) a = 0;\n                else a = Math.round(a);\n                s1 = (s1 + a) % 65521;\n                s2 = (s2 + s1) % 65521;\n                stream.push(a);\n            }\n        }\n        stream.push(0);\n    }\n    adler32 = (s2 << 16) + s1;\n    stream.push((adler32 >> 24) & 255);\n    stream.push((adler32 >> 16) & 255);\n    stream.push((adler32 >> 8) & 255);\n    stream.push(adler32 & 255);\n    length = stream.length - 41;\n    stream[33] = (length >> 24) & 255;\n    stream[34] = (length >> 16) & 255;\n    stream[35] = (length >> 8) & 255;\n    stream[36] = length & 255;\n    crc32 = crc32Array(stream, 37);\n    stream.push((crc32 >> 24) & 255);\n    stream.push((crc32 >> 16) & 255);\n    stream.push((crc32 >> 8) & 255);\n    stream.push(crc32 & 255);\n    stream.push(0);\n    stream.push(0);\n    stream.push(0);\n    stream.push(0);\n    //    a = stream.length;\n    stream.push(73); // I\n    stream.push(69); // E\n    stream.push(78); // N\n    stream.push(68); // D\n    stream.push(174); // CRC1\n    stream.push(66); // CRC2\n    stream.push(96); // CRC3\n    stream.push(130); // CRC4\n    return 'data:image/png;base64,' + base64(stream);\n};\n\n// 2. Linear algebra with Arrays.\nnumeric._dim = function _dim(x) {\n    var ret = [];\n    while (typeof x === 'object') {\n        ret.push(x.length);\n        x = x[0];\n    }\n    return ret;\n};\n\nnumeric.dim = function dim(x) {\n    var y, z;\n    if (typeof x === 'object') {\n        y = x[0];\n        if (typeof y === 'object') {\n            z = y[0];\n            if (typeof z === 'object') {\n                return numeric._dim(x);\n            }\n            return [x.length, y.length];\n        }\n        return [x.length];\n    }\n    return [];\n};\n\nnumeric.mapreduce = function mapreduce(body, init) {\n    return Function(\n        'x',\n        'accum',\n        '_s',\n        '_k',\n        'if(typeof accum === \"undefined\") accum = ' +\n            init +\n            ';\\n' +\n            'if(typeof x === \"number\") { var xi = x; ' +\n            body +\n            '; return accum; }\\n' +\n            'if(typeof _s === \"undefined\") _s = numeric.dim(x);\\n' +\n            'if(typeof _k === \"undefined\") _k = 0;\\n' +\n            'var _n = _s[_k];\\n' +\n            'var i,xi;\\n' +\n            'if(_k < _s.length-1) {\\n' +\n            '    for(i=_n-1;i>=0;i--) {\\n' +\n            '        accum = arguments.callee(x[i],accum,_s,_k+1);\\n' +\n            '    }' +\n            '    return accum;\\n' +\n            '}\\n' +\n            'for(i=_n-1;i>=1;i-=2) { \\n' +\n            '    xi = x[i];\\n' +\n            '    ' +\n            body +\n            ';\\n' +\n            '    xi = x[i-1];\\n' +\n            '    ' +\n            body +\n            ';\\n' +\n            '}\\n' +\n            'if(i === 0) {\\n' +\n            '    xi = x[i];\\n' +\n            '    ' +\n            body +\n            '\\n' +\n            '}\\n' +\n            'return accum;'\n    );\n};\nnumeric.mapreduce2 = function mapreduce2(body, setup) {\n    return Function(\n        'x',\n        'var n = x.length;\\n' +\n            'var i,xi;\\n' +\n            setup +\n            ';\\n' +\n            'for(i=n-1;i!==-1;--i) { \\n' +\n            '    xi = x[i];\\n' +\n            '    ' +\n            body +\n            ';\\n' +\n            '}\\n' +\n            'return accum;'\n    );\n};\n\nnumeric.same = function same(x, y) {\n    var i, n;\n    if (!(x instanceof Array) || !(y instanceof Array)) {\n        return false;\n    }\n    n = x.length;\n    if (n !== y.length) {\n        return false;\n    }\n    for (i = 0; i < n; i++) {\n        if (x[i] === y[i]) {\n            continue;\n        }\n        if (typeof x[i] === 'object') {\n            if (!same(x[i], y[i])) return false;\n        } else {\n            return false;\n        }\n    }\n    return true;\n};\n\nnumeric.rep = function rep(s, v, k) {\n    if (typeof k === 'undefined') {\n        k = 0;\n    }\n    var n = s[k],\n        ret = Array(n),\n        i;\n    if (k === s.length - 1) {\n        for (i = n - 2; i >= 0; i -= 2) {\n            ret[i + 1] = v;\n            ret[i] = v;\n        }\n        if (i === -1) {\n            ret[0] = v;\n        }\n        return ret;\n    }\n    for (i = n - 1; i >= 0; i--) {\n        ret[i] = numeric.rep(s, v, k + 1);\n    }\n    return ret;\n};\n\nnumeric.dotMMsmall = function dotMMsmall(x, y) {\n    var i, j, k, p, q, r, ret, foo, bar, woo, i0, k0, p0, r0;\n    p = x.length;\n    q = y.length;\n    r = y[0].length;\n    ret = Array(p);\n    for (i = p - 1; i >= 0; i--) {\n        foo = Array(r);\n        bar = x[i];\n        for (k = r - 1; k >= 0; k--) {\n            woo = bar[q - 1] * y[q - 1][k];\n            for (j = q - 2; j >= 1; j -= 2) {\n                i0 = j - 1;\n                woo += bar[j] * y[j][k] + bar[i0] * y[i0][k];\n            }\n            if (j === 0) {\n                woo += bar[0] * y[0][k];\n            }\n            foo[k] = woo;\n        }\n        ret[i] = foo;\n    }\n    return ret;\n};\nnumeric._getCol = function _getCol(A, j, x) {\n    var n = A.length,\n        i;\n    for (i = n - 1; i > 0; --i) {\n        x[i] = A[i][j];\n        --i;\n        x[i] = A[i][j];\n    }\n    if (i === 0) x[0] = A[0][j];\n};\nnumeric.dotMMbig = function dotMMbig(x, y) {\n    var gc = numeric._getCol,\n        p = y.length,\n        v = Array(p);\n    var m = x.length,\n        n = y[0].length,\n        A = new Array(m),\n        xj;\n    var VV = numeric.dotVV;\n    var i, j, k, z;\n    --p;\n    --m;\n    for (i = m; i !== -1; --i) A[i] = Array(n);\n    --n;\n    for (i = n; i !== -1; --i) {\n        gc(y, i, v);\n        for (j = m; j !== -1; --j) {\n            z = 0;\n            xj = x[j];\n            A[j][i] = VV(xj, v);\n        }\n    }\n    return A;\n};\n\nnumeric.dotMV = function dotMV(x, y) {\n    var p = x.length,\n        q = y.length,\n        i;\n    var ret = Array(p),\n        dotVV = numeric.dotVV;\n    for (i = p - 1; i >= 0; i--) {\n        ret[i] = dotVV(x[i], y);\n    }\n    return ret;\n};\n\nnumeric.dotVM = function dotVM(x, y) {\n    var i,\n        j,\n        k,\n        p,\n        q,\n        r,\n        ret,\n        foo,\n        bar,\n        woo,\n        i0,\n        k0,\n        p0,\n        r0,\n        s1,\n        s2,\n        s3,\n        baz,\n        accum;\n    p = x.length;\n    q = y[0].length;\n    ret = Array(q);\n    for (k = q - 1; k >= 0; k--) {\n        woo = x[p - 1] * y[p - 1][k];\n        for (j = p - 2; j >= 1; j -= 2) {\n            i0 = j - 1;\n            woo += x[j] * y[j][k] + x[i0] * y[i0][k];\n        }\n        if (j === 0) {\n            woo += x[0] * y[0][k];\n        }\n        ret[k] = woo;\n    }\n    return ret;\n};\n\nnumeric.dotVV = function dotVV(x, y) {\n    var i,\n        n = x.length,\n        i1,\n        ret = x[n - 1] * y[n - 1];\n    for (i = n - 2; i >= 1; i -= 2) {\n        i1 = i - 1;\n        ret += x[i] * y[i] + x[i1] * y[i1];\n    }\n    if (i === 0) {\n        ret += x[0] * y[0];\n    }\n    return ret;\n};\n\nnumeric.dot = function dot(x, y) {\n    var d = numeric.dim;\n    switch (d(x).length * 1000 + d(y).length) {\n        case 2002:\n            if (y.length < 10) return numeric.dotMMsmall(x, y);\n            else return numeric.dotMMbig(x, y);\n        case 2001:\n            return numeric.dotMV(x, y);\n        case 1002:\n            return numeric.dotVM(x, y);\n        case 1001:\n            return numeric.dotVV(x, y);\n        case 1000:\n            return numeric.mulVS(x, y);\n        case 1:\n            return numeric.mulSV(x, y);\n        case 0:\n            return x * y;\n        default:\n            throw new Error('numeric.dot only works on vectors and matrices');\n    }\n};\n\nnumeric.diag = function diag(d) {\n    var i,\n        i1,\n        j,\n        n = d.length,\n        A = Array(n),\n        Ai;\n    for (i = n - 1; i >= 0; i--) {\n        Ai = Array(n);\n        i1 = i + 2;\n        for (j = n - 1; j >= i1; j -= 2) {\n            Ai[j] = 0;\n            Ai[j - 1] = 0;\n        }\n        if (j > i) {\n            Ai[j] = 0;\n        }\n        Ai[i] = d[i];\n        for (j = i - 1; j >= 1; j -= 2) {\n            Ai[j] = 0;\n            Ai[j - 1] = 0;\n        }\n        if (j === 0) {\n            Ai[0] = 0;\n        }\n        A[i] = Ai;\n    }\n    return A;\n};\nnumeric.getDiag = function (A) {\n    var n = Math.min(A.length, A[0].length),\n        i,\n        ret = Array(n);\n    for (i = n - 1; i >= 1; --i) {\n        ret[i] = A[i][i];\n        --i;\n        ret[i] = A[i][i];\n    }\n    if (i === 0) {\n        ret[0] = A[0][0];\n    }\n    return ret;\n};\n\nnumeric.identity = function identity(n) {\n    return numeric.diag(numeric.rep([n], 1));\n};\nnumeric.pointwise = function pointwise(params, body, setup) {\n    if (typeof setup === 'undefined') {\n        setup = '';\n    }\n    var fun = [];\n    var k;\n    var avec = /\\[i\\]$/,\n        p,\n        thevec = '';\n    var haveret = false;\n    for (k = 0; k < params.length; k++) {\n        if (avec.test(params[k])) {\n            p = params[k].substring(0, params[k].length - 3);\n            thevec = p;\n        } else {\n            p = params[k];\n        }\n        if (p === 'ret') haveret = true;\n        fun.push(p);\n    }\n    fun[params.length] = '_s';\n    fun[params.length + 1] = '_k';\n    fun[params.length + 2] =\n        'if(typeof _s === \"undefined\") _s = numeric.dim(' +\n        thevec +\n        ');\\n' +\n        'if(typeof _k === \"undefined\") _k = 0;\\n' +\n        'var _n = _s[_k];\\n' +\n        'var i' +\n        (haveret ? '' : ', ret = Array(_n)') +\n        ';\\n' +\n        'if(_k < _s.length-1) {\\n' +\n        '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee(' +\n        params.join(',') +\n        ',_s,_k+1);\\n' +\n        '    return ret;\\n' +\n        '}\\n' +\n        setup +\n        '\\n' +\n        'for(i=_n-1;i!==-1;--i) {\\n' +\n        '    ' +\n        body +\n        '\\n' +\n        '}\\n' +\n        'return ret;';\n    return Function.apply(null, fun);\n};\nnumeric.pointwise2 = function pointwise2(params, body, setup) {\n    if (typeof setup === 'undefined') {\n        setup = '';\n    }\n    var fun = [];\n    var k;\n    var avec = /\\[i\\]$/,\n        p,\n        thevec = '';\n    var haveret = false;\n    for (k = 0; k < params.length; k++) {\n        if (avec.test(params[k])) {\n            p = params[k].substring(0, params[k].length - 3);\n            thevec = p;\n        } else {\n            p = params[k];\n        }\n        if (p === 'ret') haveret = true;\n        fun.push(p);\n    }\n    fun[params.length] =\n        'var _n = ' +\n        thevec +\n        '.length;\\n' +\n        'var i' +\n        (haveret ? '' : ', ret = Array(_n)') +\n        ';\\n' +\n        setup +\n        '\\n' +\n        'for(i=_n-1;i!==-1;--i) {\\n' +\n        body +\n        '\\n' +\n        '}\\n' +\n        'return ret;';\n    return Function.apply(null, fun);\n};\nnumeric._biforeach = function _biforeach(x, y, s, k, f) {\n    if (k === s.length - 1) {\n        f(x, y);\n        return;\n    }\n    var i,\n        n = s[k];\n    for (i = n - 1; i >= 0; i--) {\n        _biforeach(\n            typeof x === 'object' ? x[i] : x,\n            typeof y === 'object' ? y[i] : y,\n            s,\n            k + 1,\n            f\n        );\n    }\n};\nnumeric._biforeach2 = function _biforeach2(x, y, s, k, f) {\n    if (k === s.length - 1) {\n        return f(x, y);\n    }\n    var i,\n        n = s[k],\n        ret = Array(n);\n    for (i = n - 1; i >= 0; --i) {\n        ret[i] = _biforeach2(\n            typeof x === 'object' ? x[i] : x,\n            typeof y === 'object' ? y[i] : y,\n            s,\n            k + 1,\n            f\n        );\n    }\n    return ret;\n};\nnumeric._foreach = function _foreach(x, s, k, f) {\n    if (k === s.length - 1) {\n        f(x);\n        return;\n    }\n    var i,\n        n = s[k];\n    for (i = n - 1; i >= 0; i--) {\n        _foreach(x[i], s, k + 1, f);\n    }\n};\nnumeric._foreach2 = function _foreach2(x, s, k, f) {\n    if (k === s.length - 1) {\n        return f(x);\n    }\n    var i,\n        n = s[k],\n        ret = Array(n);\n    for (i = n - 1; i >= 0; i--) {\n        ret[i] = _foreach2(x[i], s, k + 1, f);\n    }\n    return ret;\n};\n\n/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');\nnumeric.allV = numeric.mapreduce('if(!xi) return false;','true');\nnumeric.any = function(x) { if(typeof x.length === \"undefined\") return x; return numeric.anyV(x); }\nnumeric.all = function(x) { if(typeof x.length === \"undefined\") return x; return numeric.allV(x); }*/\n\nnumeric.ops2 = {\n    add: '+',\n    sub: '-',\n    mul: '*',\n    div: '/',\n    mod: '%',\n    and: '&&',\n    or: '||',\n    eq: '===',\n    neq: '!==',\n    lt: '<',\n    gt: '>',\n    leq: '<=',\n    geq: '>=',\n    band: '&',\n    bor: '|',\n    bxor: '^',\n    lshift: '<<',\n    rshift: '>>',\n    rrshift: '>>>',\n};\nnumeric.opseq = {\n    addeq: '+=',\n    subeq: '-=',\n    muleq: '*=',\n    diveq: '/=',\n    modeq: '%=',\n    lshifteq: '<<=',\n    rshifteq: '>>=',\n    rrshifteq: '>>>=',\n    bandeq: '&=',\n    boreq: '|=',\n    bxoreq: '^=',\n};\nnumeric.mathfuns = [\n    'abs',\n    'acos',\n    'asin',\n    'atan',\n    'ceil',\n    'cos',\n    'exp',\n    'floor',\n    'log',\n    'round',\n    'sin',\n    'sqrt',\n    'tan',\n    'isNaN',\n    'isFinite',\n];\nnumeric.mathfuns2 = ['atan2', 'pow', 'max', 'min'];\nnumeric.ops1 = {\n    neg: '-',\n    not: '!',\n    bnot: '~',\n    clone: '',\n};\nnumeric.mapreducers = {\n    any: ['if(xi) return true;', 'var accum = false;'],\n    all: ['if(!xi) return false;', 'var accum = true;'],\n    sum: ['accum += xi;', 'var accum = 0;'],\n    prod: ['accum *= xi;', 'var accum = 1;'],\n    norm2Squared: ['accum += xi*xi;', 'var accum = 0;'],\n    norminf: [\n        'accum = max(accum,abs(xi));',\n        'var accum = 0, max = Math.max, abs = Math.abs;',\n    ],\n    norm1: ['accum += abs(xi)', 'var accum = 0, abs = Math.abs;'],\n    sup: ['accum = max(accum,xi);', 'var accum = -Infinity, max = Math.max;'],\n    inf: ['accum = min(accum,xi);', 'var accum = Infinity, min = Math.min;'],\n};\n(function () {\n    var i, o;\n    for (i = 0; i < numeric.mathfuns2.length; ++i) {\n        o = numeric.mathfuns2[i];\n        numeric.ops2[o] = o;\n    }\n    for (i in numeric.ops2) {\n        if (numeric.ops2.hasOwnProperty(i)) {\n            o = numeric.ops2[i];\n            var code,\n                codeeq,\n                setup = '';\n            if (numeric.myIndexOf.call(numeric.mathfuns2, i) !== -1) {\n                setup = 'var ' + o + ' = Math.' + o + ';\\n';\n                code = function (r, x, y) {\n                    return r + ' = ' + o + '(' + x + ',' + y + ')';\n                };\n                codeeq = function (x, y) {\n                    return x + ' = ' + o + '(' + x + ',' + y + ')';\n                };\n            } else {\n                code = function (r, x, y) {\n                    return r + ' = ' + x + ' ' + o + ' ' + y;\n                };\n                if (numeric.opseq.hasOwnProperty(i + 'eq')) {\n                    codeeq = function (x, y) {\n                        return x + ' ' + o + '= ' + y;\n                    };\n                } else {\n                    codeeq = function (x, y) {\n                        return x + ' = ' + x + ' ' + o + ' ' + y;\n                    };\n                }\n            }\n            numeric[i + 'VV'] = numeric.pointwise2(\n                ['x[i]', 'y[i]'],\n                code('ret[i]', 'x[i]', 'y[i]'),\n                setup\n            );\n            numeric[i + 'SV'] = numeric.pointwise2(\n                ['x', 'y[i]'],\n                code('ret[i]', 'x', 'y[i]'),\n                setup\n            );\n            numeric[i + 'VS'] = numeric.pointwise2(\n                ['x[i]', 'y'],\n                code('ret[i]', 'x[i]', 'y'),\n                setup\n            );\n            numeric[i] = Function(\n                'var n = arguments.length, i, x = arguments[0], y;\\n' +\n                    'var VV = numeric.' +\n                    i +\n                    'VV, VS = numeric.' +\n                    i +\n                    'VS, SV = numeric.' +\n                    i +\n                    'SV;\\n' +\n                    'var dim = numeric.dim;\\n' +\n                    'for(i=1;i!==n;++i) { \\n' +\n                    '  y = arguments[i];\\n' +\n                    '  if(typeof x === \"object\") {\\n' +\n                    '      if(typeof y === \"object\") x = numeric._biforeach2(x,y,dim(x),0,VV);\\n' +\n                    '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\\n' +\n                    '  } else if(typeof y === \"object\") x = numeric._biforeach2(x,y,dim(y),0,SV);\\n' +\n                    '  else ' +\n                    codeeq('x', 'y') +\n                    '\\n' +\n                    '}\\nreturn x;\\n'\n            );\n            numeric[o] = numeric[i];\n            numeric[i + 'eqV'] = numeric.pointwise2(\n                ['ret[i]', 'x[i]'],\n                codeeq('ret[i]', 'x[i]'),\n                setup\n            );\n            numeric[i + 'eqS'] = numeric.pointwise2(\n                ['ret[i]', 'x'],\n                codeeq('ret[i]', 'x'),\n                setup\n            );\n            numeric[i + 'eq'] = Function(\n                'var n = arguments.length, i, x = arguments[0], y;\\n' +\n                    'var V = numeric.' +\n                    i +\n                    'eqV, S = numeric.' +\n                    i +\n                    'eqS\\n' +\n                    'var s = numeric.dim(x);\\n' +\n                    'for(i=1;i!==n;++i) { \\n' +\n                    '  y = arguments[i];\\n' +\n                    '  if(typeof y === \"object\") numeric._biforeach(x,y,s,0,V);\\n' +\n                    '  else numeric._biforeach(x,y,s,0,S);\\n' +\n                    '}\\nreturn x;\\n'\n            );\n        }\n    }\n    for (i = 0; i < numeric.mathfuns2.length; ++i) {\n        o = numeric.mathfuns2[i];\n        delete numeric.ops2[o];\n    }\n    for (i = 0; i < numeric.mathfuns.length; ++i) {\n        o = numeric.mathfuns[i];\n        numeric.ops1[o] = o;\n    }\n    for (i in numeric.ops1) {\n        if (numeric.ops1.hasOwnProperty(i)) {\n            setup = '';\n            o = numeric.ops1[i];\n            if (numeric.myIndexOf.call(numeric.mathfuns, i) !== -1) {\n                if (Math.hasOwnProperty(o))\n                    setup = 'var ' + o + ' = Math.' + o + ';\\n';\n            }\n            numeric[i + 'eqV'] = numeric.pointwise2(\n                ['ret[i]'],\n                'ret[i] = ' + o + '(ret[i]);',\n                setup\n            );\n            numeric[i + 'eq'] = Function(\n                'x',\n                'if(typeof x !== \"object\") return ' +\n                    o +\n                    'x\\n' +\n                    'var i;\\n' +\n                    'var V = numeric.' +\n                    i +\n                    'eqV;\\n' +\n                    'var s = numeric.dim(x);\\n' +\n                    'numeric._foreach(x,s,0,V);\\n' +\n                    'return x;\\n'\n            );\n            numeric[i + 'V'] = numeric.pointwise2(\n                ['x[i]'],\n                'ret[i] = ' + o + '(x[i]);',\n                setup\n            );\n            numeric[i] = Function(\n                'x',\n                'if(typeof x !== \"object\") return ' +\n                    o +\n                    '(x)\\n' +\n                    'var i;\\n' +\n                    'var V = numeric.' +\n                    i +\n                    'V;\\n' +\n                    'var s = numeric.dim(x);\\n' +\n                    'return numeric._foreach2(x,s,0,V);\\n'\n            );\n        }\n    }\n    for (i = 0; i < numeric.mathfuns.length; ++i) {\n        o = numeric.mathfuns[i];\n        delete numeric.ops1[o];\n    }\n    for (i in numeric.mapreducers) {\n        if (numeric.mapreducers.hasOwnProperty(i)) {\n            o = numeric.mapreducers[i];\n            numeric[i + 'V'] = numeric.mapreduce2(o[0], o[1]);\n            numeric[i] = Function(\n                'x',\n                's',\n                'k',\n                o[1] +\n                    'if(typeof x !== \"object\") {' +\n                    '    xi = x;\\n' +\n                    o[0] +\n                    ';\\n' +\n                    '    return accum;\\n' +\n                    '}' +\n                    'if(typeof s === \"undefined\") s = numeric.dim(x);\\n' +\n                    'if(typeof k === \"undefined\") k = 0;\\n' +\n                    'if(k === s.length-1) return numeric.' +\n                    i +\n                    'V(x);\\n' +\n                    'var xi;\\n' +\n                    'var n = x.length, i;\\n' +\n                    'for(i=n-1;i!==-1;--i) {\\n' +\n                    '   xi = arguments.callee(x[i]);\\n' +\n                    o[0] +\n                    ';\\n' +\n                    '}\\n' +\n                    'return accum;\\n'\n            );\n        }\n    }\n})();\n\nnumeric.truncVV = numeric.pointwise(\n    ['x[i]', 'y[i]'],\n    'ret[i] = round(x[i]/y[i])*y[i];',\n    'var round = Math.round;'\n);\nnumeric.truncVS = numeric.pointwise(\n    ['x[i]', 'y'],\n    'ret[i] = round(x[i]/y)*y;',\n    'var round = Math.round;'\n);\nnumeric.truncSV = numeric.pointwise(\n    ['x', 'y[i]'],\n    'ret[i] = round(x/y[i])*y[i];',\n    'var round = Math.round;'\n);\nnumeric.trunc = function trunc(x, y) {\n    if (typeof x === 'object') {\n        if (typeof y === 'object') return numeric.truncVV(x, y);\n        return numeric.truncVS(x, y);\n    }\n    if (typeof y === 'object') return numeric.truncSV(x, y);\n    return Math.round(x / y) * y;\n};\n\nnumeric.inv = function inv(x) {\n    var s = numeric.dim(x),\n        abs = Math.abs,\n        m = s[0],\n        n = s[1];\n    var A = numeric.clone(x),\n        Ai,\n        Aj;\n    var I = numeric.identity(m),\n        Ii,\n        Ij;\n    var i, j, k, x;\n    for (j = 0; j < n; ++j) {\n        var i0 = -1;\n        var v0 = -1;\n        for (i = j; i !== m; ++i) {\n            k = abs(A[i][j]);\n            if (k > v0) {\n                i0 = i;\n                v0 = k;\n            }\n        }\n        Aj = A[i0];\n        A[i0] = A[j];\n        A[j] = Aj;\n        Ij = I[i0];\n        I[i0] = I[j];\n        I[j] = Ij;\n        x = Aj[j];\n        for (k = j; k !== n; ++k) Aj[k] /= x;\n        for (k = n - 1; k !== -1; --k) Ij[k] /= x;\n        for (i = m - 1; i !== -1; --i) {\n            if (i !== j) {\n                Ai = A[i];\n                Ii = I[i];\n                x = Ai[j];\n                for (k = j + 1; k !== n; ++k) Ai[k] -= Aj[k] * x;\n                for (k = n - 1; k > 0; --k) {\n                    Ii[k] -= Ij[k] * x;\n                    --k;\n                    Ii[k] -= Ij[k] * x;\n                }\n                if (k === 0) Ii[0] -= Ij[0] * x;\n            }\n        }\n    }\n    return I;\n};\n\nnumeric.det = function det(x) {\n    var s = numeric.dim(x);\n    if (s.length !== 2 || s[0] !== s[1]) {\n        throw new Error('numeric: det() only works on square matrices');\n    }\n    var n = s[0],\n        ret = 1,\n        i,\n        j,\n        k,\n        A = numeric.clone(x),\n        Aj,\n        Ai,\n        alpha,\n        temp,\n        k1,\n        k2,\n        k3;\n    for (j = 0; j < n - 1; j++) {\n        k = j;\n        for (i = j + 1; i < n; i++) {\n            if (Math.abs(A[i][j]) > Math.abs(A[k][j])) {\n                k = i;\n            }\n        }\n        if (k !== j) {\n            temp = A[k];\n            A[k] = A[j];\n            A[j] = temp;\n            ret *= -1;\n        }\n        Aj = A[j];\n        for (i = j + 1; i < n; i++) {\n            Ai = A[i];\n            alpha = Ai[j] / Aj[j];\n            for (k = j + 1; k < n - 1; k += 2) {\n                k1 = k + 1;\n                Ai[k] -= Aj[k] * alpha;\n                Ai[k1] -= Aj[k1] * alpha;\n            }\n            if (k !== n) {\n                Ai[k] -= Aj[k] * alpha;\n            }\n        }\n        if (Aj[j] === 0) {\n            return 0;\n        }\n        ret *= Aj[j];\n    }\n    return ret * A[j][j];\n};\n\nnumeric.transpose = function transpose(x) {\n    var i,\n        j,\n        m = x.length,\n        n = x[0].length,\n        ret = Array(n),\n        A0,\n        A1,\n        Bj;\n    for (j = 0; j < n; j++) ret[j] = Array(m);\n    for (i = m - 1; i >= 1; i -= 2) {\n        A1 = x[i];\n        A0 = x[i - 1];\n        for (j = n - 1; j >= 1; --j) {\n            Bj = ret[j];\n            Bj[i] = A1[j];\n            Bj[i - 1] = A0[j];\n            --j;\n            Bj = ret[j];\n            Bj[i] = A1[j];\n            Bj[i - 1] = A0[j];\n        }\n        if (j === 0) {\n            Bj = ret[0];\n            Bj[i] = A1[0];\n            Bj[i - 1] = A0[0];\n        }\n    }\n    if (i === 0) {\n        A0 = x[0];\n        for (j = n - 1; j >= 1; --j) {\n            ret[j][0] = A0[j];\n            --j;\n            ret[j][0] = A0[j];\n        }\n        if (j === 0) {\n            ret[0][0] = A0[0];\n        }\n    }\n    return ret;\n};\nnumeric.negtranspose = function negtranspose(x) {\n    var i,\n        j,\n        m = x.length,\n        n = x[0].length,\n        ret = Array(n),\n        A0,\n        A1,\n        Bj;\n    for (j = 0; j < n; j++) ret[j] = Array(m);\n    for (i = m - 1; i >= 1; i -= 2) {\n        A1 = x[i];\n        A0 = x[i - 1];\n        for (j = n - 1; j >= 1; --j) {\n            Bj = ret[j];\n            Bj[i] = -A1[j];\n            Bj[i - 1] = -A0[j];\n            --j;\n            Bj = ret[j];\n            Bj[i] = -A1[j];\n            Bj[i - 1] = -A0[j];\n        }\n        if (j === 0) {\n            Bj = ret[0];\n            Bj[i] = -A1[0];\n            Bj[i - 1] = -A0[0];\n        }\n    }\n    if (i === 0) {\n        A0 = x[0];\n        for (j = n - 1; j >= 1; --j) {\n            ret[j][0] = -A0[j];\n            --j;\n            ret[j][0] = -A0[j];\n        }\n        if (j === 0) {\n            ret[0][0] = -A0[0];\n        }\n    }\n    return ret;\n};\n\nnumeric._random = function _random(s, k) {\n    var i,\n        n = s[k],\n        ret = Array(n),\n        rnd;\n    if (k === s.length - 1) {\n        rnd = Math.random;\n        for (i = n - 1; i >= 1; i -= 2) {\n            ret[i] = rnd();\n            ret[i - 1] = rnd();\n        }\n        if (i === 0) {\n            ret[0] = rnd();\n        }\n        return ret;\n    }\n    for (i = n - 1; i >= 0; i--) ret[i] = _random(s, k + 1);\n    return ret;\n};\nnumeric.random = function random(s) {\n    return numeric._random(s, 0);\n};\n\nnumeric.norm2 = function norm2(x) {\n    return Math.sqrt(numeric.norm2Squared(x));\n};\n\nnumeric.linspace = function linspace(a, b, n) {\n    if (typeof n === 'undefined') n = Math.max(Math.round(b - a) + 1, 1);\n    if (n < 2) {\n        return n === 1 ? [a] : [];\n    }\n    var i,\n        ret = Array(n);\n    n--;\n    for (i = n; i >= 0; i--) {\n        ret[i] = (i * b + (n - i) * a) / n;\n    }\n    return ret;\n};\n\nnumeric.getBlock = function getBlock(x, from, to) {\n    var s = numeric.dim(x);\n    function foo(x, k) {\n        var i,\n            a = from[k],\n            n = to[k] - a,\n            ret = Array(n);\n        if (k === s.length - 1) {\n            for (i = n; i >= 0; i--) {\n                ret[i] = x[i + a];\n            }\n            return ret;\n        }\n        for (i = n; i >= 0; i--) {\n            ret[i] = foo(x[i + a], k + 1);\n        }\n        return ret;\n    }\n    return foo(x, 0);\n};\n\nnumeric.setBlock = function setBlock(x, from, to, B) {\n    var s = numeric.dim(x);\n    function foo(x, y, k) {\n        var i,\n            a = from[k],\n            n = to[k] - a;\n        if (k === s.length - 1) {\n            for (i = n; i >= 0; i--) {\n                x[i + a] = y[i];\n            }\n        }\n        for (i = n; i >= 0; i--) {\n            foo(x[i + a], y[i], k + 1);\n        }\n    }\n    foo(x, B, 0);\n    return x;\n};\n\nnumeric.getRange = function getRange(A, I, J) {\n    var m = I.length,\n        n = J.length;\n    var i, j;\n    var B = Array(m),\n        Bi,\n        AI;\n    for (i = m - 1; i !== -1; --i) {\n        B[i] = Array(n);\n        Bi = B[i];\n        AI = A[I[i]];\n        for (j = n - 1; j !== -1; --j) Bi[j] = AI[J[j]];\n    }\n    return B;\n};\n\nnumeric.blockMatrix = function blockMatrix(X) {\n    var s = numeric.dim(X);\n    if (s.length < 4) return numeric.blockMatrix([X]);\n    var m = s[0],\n        n = s[1],\n        M,\n        N,\n        i,\n        j,\n        Xij;\n    M = 0;\n    N = 0;\n    for (i = 0; i < m; ++i) M += X[i][0].length;\n    for (j = 0; j < n; ++j) N += X[0][j][0].length;\n    var Z = Array(M);\n    for (i = 0; i < M; ++i) Z[i] = Array(N);\n    var I = 0,\n        J,\n        ZI,\n        k,\n        l,\n        Xijk;\n    for (i = 0; i < m; ++i) {\n        J = N;\n        for (j = n - 1; j !== -1; --j) {\n            Xij = X[i][j];\n            J -= Xij[0].length;\n            for (k = Xij.length - 1; k !== -1; --k) {\n                Xijk = Xij[k];\n                ZI = Z[I + k];\n                for (l = Xijk.length - 1; l !== -1; --l) ZI[J + l] = Xijk[l];\n            }\n        }\n        I += X[i][0].length;\n    }\n    return Z;\n};\n\nnumeric.tensor = function tensor(x, y) {\n    if (typeof x === 'number' || typeof y === 'number')\n        return numeric.mul(x, y);\n    var s1 = numeric.dim(x),\n        s2 = numeric.dim(y);\n    if (s1.length !== 1 || s2.length !== 1) {\n        throw new Error('numeric: tensor product is only defined for vectors');\n    }\n    var m = s1[0],\n        n = s2[0],\n        A = Array(m),\n        Ai,\n        i,\n        j,\n        xi;\n    for (i = m - 1; i >= 0; i--) {\n        Ai = Array(n);\n        xi = x[i];\n        for (j = n - 1; j >= 3; --j) {\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n        }\n        while (j >= 0) {\n            Ai[j] = xi * y[j];\n            --j;\n        }\n        A[i] = Ai;\n    }\n    return A;\n};\n\n// 3. The Tensor type T\nnumeric.T = function T(x, y) {\n    this.x = x;\n    this.y = y;\n};\nnumeric.t = function t(x, y) {\n    return new numeric.T(x, y);\n};\n\nnumeric.Tbinop = function Tbinop(rr, rc, cr, cc, setup) {\n    var io = numeric.indexOf;\n    if (typeof setup !== 'string') {\n        var k;\n        setup = '';\n        for (k in numeric) {\n            if (\n                numeric.hasOwnProperty(k) &&\n                (rr.indexOf(k) >= 0 ||\n                    rc.indexOf(k) >= 0 ||\n                    cr.indexOf(k) >= 0 ||\n                    cc.indexOf(k) >= 0) &&\n                k.length > 1\n            ) {\n                setup += 'var ' + k + ' = numeric.' + k + ';\\n';\n            }\n        }\n    }\n    return Function(\n        ['y'],\n        'var x = this;\\n' +\n            'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\\n' +\n            setup +\n            '\\n' +\n            'if(x.y) {' +\n            '  if(y.y) {' +\n            '    return new numeric.T(' +\n            cc +\n            ');\\n' +\n            '  }\\n' +\n            '  return new numeric.T(' +\n            cr +\n            ');\\n' +\n            '}\\n' +\n            'if(y.y) {\\n' +\n            '  return new numeric.T(' +\n            rc +\n            ');\\n' +\n            '}\\n' +\n            'return new numeric.T(' +\n            rr +\n            ');\\n'\n    );\n};\n\nnumeric.T.prototype.add = numeric.Tbinop(\n    'add(x.x,y.x)',\n    'add(x.x,y.x),y.y',\n    'add(x.x,y.x),x.y',\n    'add(x.x,y.x),add(x.y,y.y)'\n);\nnumeric.T.prototype.sub = numeric.Tbinop(\n    'sub(x.x,y.x)',\n    'sub(x.x,y.x),neg(y.y)',\n    'sub(x.x,y.x),x.y',\n    'sub(x.x,y.x),sub(x.y,y.y)'\n);\nnumeric.T.prototype.mul = numeric.Tbinop(\n    'mul(x.x,y.x)',\n    'mul(x.x,y.x),mul(x.x,y.y)',\n    'mul(x.x,y.x),mul(x.y,y.x)',\n    'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))'\n);\n\nnumeric.T.prototype.reciprocal = function reciprocal() {\n    var mul = numeric.mul,\n        div = numeric.div;\n    if (this.y) {\n        var d = numeric.add(mul(this.x, this.x), mul(this.y, this.y));\n        return new numeric.T(div(this.x, d), div(numeric.neg(this.y), d));\n    }\n    return new T(div(1, this.x));\n};\nnumeric.T.prototype.div = function div(y) {\n    if (!(y instanceof numeric.T)) y = new numeric.T(y);\n    if (y.y) {\n        return this.mul(y.reciprocal());\n    }\n    var div = numeric.div;\n    if (this.y) {\n        return new numeric.T(div(this.x, y.x), div(this.y, y.x));\n    }\n    return new numeric.T(div(this.x, y.x));\n};\nnumeric.T.prototype.dot = numeric.Tbinop(\n    'dot(x.x,y.x)',\n    'dot(x.x,y.x),dot(x.x,y.y)',\n    'dot(x.x,y.x),dot(x.y,y.x)',\n    'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'\n);\nnumeric.T.prototype.transpose = function transpose() {\n    var t = numeric.transpose,\n        x = this.x,\n        y = this.y;\n    if (y) {\n        return new numeric.T(t(x), t(y));\n    }\n    return new numeric.T(t(x));\n};\nnumeric.T.prototype.transjugate = function transjugate() {\n    var t = numeric.transpose,\n        x = this.x,\n        y = this.y;\n    if (y) {\n        return new numeric.T(t(x), numeric.negtranspose(y));\n    }\n    return new numeric.T(t(x));\n};\nnumeric.Tunop = function Tunop(r, c, s) {\n    if (typeof s !== 'string') {\n        s = '';\n    }\n    return Function(\n        'var x = this;\\n' +\n            s +\n            '\\n' +\n            'if(x.y) {' +\n            '  ' +\n            c +\n            ';\\n' +\n            '}\\n' +\n            r +\n            ';\\n'\n    );\n};\n\nnumeric.T.prototype.exp = numeric.Tunop(\n    'return new numeric.T(ex)',\n    'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))',\n    'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;'\n);\nnumeric.T.prototype.conj = numeric.Tunop(\n    'return new numeric.T(x.x);',\n    'return new numeric.T(x.x,numeric.neg(x.y));'\n);\nnumeric.T.prototype.neg = numeric.Tunop(\n    'return new numeric.T(neg(x.x));',\n    'return new numeric.T(neg(x.x),neg(x.y));',\n    'var neg = numeric.neg;'\n);\nnumeric.T.prototype.sin = numeric.Tunop(\n    'return new numeric.T(numeric.sin(x.x))',\n    'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));'\n);\nnumeric.T.prototype.cos = numeric.Tunop(\n    'return new numeric.T(numeric.cos(x.x))',\n    'return x.exp().add(x.neg().exp()).div(2);'\n);\nnumeric.T.prototype.abs = numeric.Tunop(\n    'return new numeric.T(numeric.abs(x.x));',\n    'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',\n    'var mul = numeric.mul;'\n);\nnumeric.T.prototype.log = numeric.Tunop(\n    'return new numeric.T(numeric.log(x.x));',\n    'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\\n' +\n        'return new numeric.T(numeric.log(r.x),theta.x);'\n);\nnumeric.T.prototype.norm2 = numeric.Tunop(\n    'return numeric.norm2(x.x);',\n    'var f = numeric.norm2Squared;\\n' + 'return Math.sqrt(f(x.x)+f(x.y));'\n);\nnumeric.T.prototype.inv = function inv() {\n    var A = this;\n    if (typeof A.y === 'undefined') {\n        return new numeric.T(numeric.inv(A.x));\n    }\n    var n = A.x.length,\n        i,\n        j,\n        k;\n    var Rx = numeric.identity(n),\n        Ry = numeric.rep([n, n], 0);\n    var Ax = numeric.clone(A.x),\n        Ay = numeric.clone(A.y);\n    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;\n    var i, j, k, d, d1, ax, ay, bx, by, temp;\n    for (i = 0; i < n; i++) {\n        ax = Ax[i][i];\n        ay = Ay[i][i];\n        d = ax * ax + ay * ay;\n        k = i;\n        for (j = i + 1; j < n; j++) {\n            ax = Ax[j][i];\n            ay = Ay[j][i];\n            d1 = ax * ax + ay * ay;\n            if (d1 > d) {\n                k = j;\n                d = d1;\n            }\n        }\n        if (k !== i) {\n            temp = Ax[i];\n            Ax[i] = Ax[k];\n            Ax[k] = temp;\n            temp = Ay[i];\n            Ay[i] = Ay[k];\n            Ay[k] = temp;\n            temp = Rx[i];\n            Rx[i] = Rx[k];\n            Rx[k] = temp;\n            temp = Ry[i];\n            Ry[i] = Ry[k];\n            Ry[k] = temp;\n        }\n        Aix = Ax[i];\n        Aiy = Ay[i];\n        Rix = Rx[i];\n        Riy = Ry[i];\n        ax = Aix[i];\n        ay = Aiy[i];\n        for (j = i + 1; j < n; j++) {\n            bx = Aix[j];\n            by = Aiy[j];\n            Aix[j] = (bx * ax + by * ay) / d;\n            Aiy[j] = (by * ax - bx * ay) / d;\n        }\n        for (j = 0; j < n; j++) {\n            bx = Rix[j];\n            by = Riy[j];\n            Rix[j] = (bx * ax + by * ay) / d;\n            Riy[j] = (by * ax - bx * ay) / d;\n        }\n        for (j = i + 1; j < n; j++) {\n            Ajx = Ax[j];\n            Ajy = Ay[j];\n            Rjx = Rx[j];\n            Rjy = Ry[j];\n            ax = Ajx[i];\n            ay = Ajy[i];\n            for (k = i + 1; k < n; k++) {\n                bx = Aix[k];\n                by = Aiy[k];\n                Ajx[k] -= bx * ax - by * ay;\n                Ajy[k] -= by * ax + bx * ay;\n            }\n            for (k = 0; k < n; k++) {\n                bx = Rix[k];\n                by = Riy[k];\n                Rjx[k] -= bx * ax - by * ay;\n                Rjy[k] -= by * ax + bx * ay;\n            }\n        }\n    }\n    for (i = n - 1; i > 0; i--) {\n        Rix = Rx[i];\n        Riy = Ry[i];\n        for (j = i - 1; j >= 0; j--) {\n            Rjx = Rx[j];\n            Rjy = Ry[j];\n            ax = Ax[j][i];\n            ay = Ay[j][i];\n            for (k = n - 1; k >= 0; k--) {\n                bx = Rix[k];\n                by = Riy[k];\n                Rjx[k] -= ax * bx - ay * by;\n                Rjy[k] -= ax * by + ay * bx;\n            }\n        }\n    }\n    return new numeric.T(Rx, Ry);\n};\nnumeric.T.prototype.get = function get(i) {\n    var x = this.x,\n        y = this.y,\n        k = 0,\n        ik,\n        n = i.length;\n    if (y) {\n        while (k < n) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        return new numeric.T(x, y);\n    }\n    while (k < n) {\n        ik = i[k];\n        x = x[ik];\n        k++;\n    }\n    return new numeric.T(x);\n};\nnumeric.T.prototype.set = function set(i, v) {\n    var x = this.x,\n        y = this.y,\n        k = 0,\n        ik,\n        n = i.length,\n        vx = v.x,\n        vy = v.y;\n    if (n === 0) {\n        if (vy) {\n            this.y = vy;\n        } else if (y) {\n            this.y = undefined;\n        }\n        this.x = x;\n        return this;\n    }\n    if (vy) {\n        if (y) {\n            /* ok */\n        } else {\n            y = numeric.rep(numeric.dim(x), 0);\n            this.y = y;\n        }\n        while (k < n - 1) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        ik = i[k];\n        x[ik] = vx;\n        y[ik] = vy;\n        return this;\n    }\n    if (y) {\n        while (k < n - 1) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        ik = i[k];\n        x[ik] = vx;\n        if (vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx), 0);\n        else y[ik] = 0;\n        return this;\n    }\n    while (k < n - 1) {\n        ik = i[k];\n        x = x[ik];\n        k++;\n    }\n    ik = i[k];\n    x[ik] = vx;\n    return this;\n};\nnumeric.T.prototype.getRows = function getRows(i0, i1) {\n    var n = i1 - i0 + 1,\n        j;\n    var rx = Array(n),\n        ry,\n        x = this.x,\n        y = this.y;\n    for (j = i0; j <= i1; j++) {\n        rx[j - i0] = x[j];\n    }\n    if (y) {\n        ry = Array(n);\n        for (j = i0; j <= i1; j++) {\n            ry[j - i0] = y[j];\n        }\n        return new numeric.T(rx, ry);\n    }\n    return new numeric.T(rx);\n};\nnumeric.T.prototype.setRows = function setRows(i0, i1, A) {\n    var j;\n    var rx = this.x,\n        ry = this.y,\n        x = A.x,\n        y = A.y;\n    for (j = i0; j <= i1; j++) {\n        rx[j] = x[j - i0];\n    }\n    if (y) {\n        if (!ry) {\n            ry = numeric.rep(numeric.dim(rx), 0);\n            this.y = ry;\n        }\n        for (j = i0; j <= i1; j++) {\n            ry[j] = y[j - i0];\n        }\n    } else if (ry) {\n        for (j = i0; j <= i1; j++) {\n            ry[j] = numeric.rep([x[j - i0].length], 0);\n        }\n    }\n    return this;\n};\nnumeric.T.prototype.getRow = function getRow(k) {\n    var x = this.x,\n        y = this.y;\n    if (y) {\n        return new numeric.T(x[k], y[k]);\n    }\n    return new numeric.T(x[k]);\n};\nnumeric.T.prototype.setRow = function setRow(i, v) {\n    var rx = this.x,\n        ry = this.y,\n        x = v.x,\n        y = v.y;\n    rx[i] = x;\n    if (y) {\n        if (!ry) {\n            ry = numeric.rep(numeric.dim(rx), 0);\n            this.y = ry;\n        }\n        ry[i] = y;\n    } else if (ry) {\n        ry = numeric.rep([x.length], 0);\n    }\n    return this;\n};\n\nnumeric.T.prototype.getBlock = function getBlock(from, to) {\n    var x = this.x,\n        y = this.y,\n        b = numeric.getBlock;\n    if (y) {\n        return new numeric.T(b(x, from, to), b(y, from, to));\n    }\n    return new numeric.T(b(x, from, to));\n};\nnumeric.T.prototype.setBlock = function setBlock(from, to, A) {\n    if (!(A instanceof numeric.T)) A = new numeric.T(A);\n    var x = this.x,\n        y = this.y,\n        b = numeric.setBlock,\n        Ax = A.x,\n        Ay = A.y;\n    if (Ay) {\n        if (!y) {\n            this.y = numeric.rep(numeric.dim(this), 0);\n            y = this.y;\n        }\n        b(x, from, to, Ax);\n        b(y, from, to, Ay);\n        return this;\n    }\n    b(x, from, to, Ax);\n    if (y) b(y, from, to, numeric.rep(numeric.dim(Ax), 0));\n};\nnumeric.T.rep = function rep(s, v) {\n    var T = numeric.T;\n    if (!(v instanceof T)) v = new T(v);\n    var x = v.x,\n        y = v.y,\n        r = numeric.rep;\n    if (y) return new T(r(s, x), r(s, y));\n    return new T(r(s, x));\n};\nnumeric.T.diag = function diag(d) {\n    if (!(d instanceof numeric.T)) d = new numeric.T(d);\n    var x = d.x,\n        y = d.y,\n        diag = numeric.diag;\n    if (y) return new numeric.T(diag(x), diag(y));\n    return new numeric.T(diag(x));\n};\nnumeric.T.eig = function eig() {\n    if (this.y) {\n        throw new Error('eig: not implemented for complex matrices.');\n    }\n    return numeric.eig(this.x);\n};\nnumeric.T.identity = function identity(n) {\n    return new numeric.T(numeric.identity(n));\n};\nnumeric.T.prototype.getDiag = function getDiag() {\n    var n = numeric;\n    var x = this.x,\n        y = this.y;\n    if (y) {\n        return new n.T(n.getDiag(x), n.getDiag(y));\n    }\n    return new n.T(n.getDiag(x));\n};\n\n// 4. Eigenvalues of real matrices\n\nnumeric.house = function house(x) {\n    var v = numeric.clone(x);\n    var s = x[0] >= 0 ? 1 : -1;\n    var alpha = s * numeric.norm2(x);\n    v[0] += alpha;\n    var foo = numeric.norm2(v);\n    if (foo === 0) {\n        /* this should not happen */ throw new Error('eig: internal error');\n    }\n    return numeric.div(v, foo);\n};\n\nnumeric.toUpperHessenberg = function toUpperHessenberg(me) {\n    var s = numeric.dim(me);\n    if (s.length !== 2 || s[0] !== s[1]) {\n        throw new Error(\n            'numeric: toUpperHessenberg() only works on square matrices'\n        );\n    }\n    var m = s[0],\n        i,\n        j,\n        k,\n        x,\n        v,\n        A = numeric.clone(me),\n        B,\n        C,\n        Ai,\n        Ci,\n        Q = numeric.identity(m),\n        Qi;\n    for (j = 0; j < m - 2; j++) {\n        x = Array(m - j - 1);\n        for (i = j + 1; i < m; i++) {\n            x[i - j - 1] = A[i][j];\n        }\n        if (numeric.norm2(x) > 0) {\n            v = numeric.house(x);\n            B = numeric.getBlock(A, [j + 1, j], [m - 1, m - 1]);\n            C = numeric.tensor(v, numeric.dot(v, B));\n            for (i = j + 1; i < m; i++) {\n                Ai = A[i];\n                Ci = C[i - j - 1];\n                for (k = j; k < m; k++) Ai[k] -= 2 * Ci[k - j];\n            }\n            B = numeric.getBlock(A, [0, j + 1], [m - 1, m - 1]);\n            C = numeric.tensor(numeric.dot(B, v), v);\n            for (i = 0; i < m; i++) {\n                Ai = A[i];\n                Ci = C[i];\n                for (k = j + 1; k < m; k++) Ai[k] -= 2 * Ci[k - j - 1];\n            }\n            B = Array(m - j - 1);\n            for (i = j + 1; i < m; i++) B[i - j - 1] = Q[i];\n            C = numeric.tensor(v, numeric.dot(v, B));\n            for (i = j + 1; i < m; i++) {\n                Qi = Q[i];\n                Ci = C[i - j - 1];\n                for (k = 0; k < m; k++) Qi[k] -= 2 * Ci[k];\n            }\n        }\n    }\n    return { H: A, Q: Q };\n};\n\nnumeric.epsilon = 2.220446049250313e-16;\n\nnumeric.QRFrancis = function (H, maxiter) {\n    if (typeof maxiter === 'undefined') {\n        maxiter = 10000;\n    }\n    H = numeric.clone(H);\n    var H0 = numeric.clone(H);\n    var s = numeric.dim(H),\n        m = s[0],\n        x,\n        v,\n        a,\n        b,\n        c,\n        d,\n        det,\n        tr,\n        Hloc,\n        Q = numeric.identity(m),\n        Qi,\n        Hi,\n        B,\n        C,\n        Ci,\n        i,\n        j,\n        k,\n        iter;\n    if (m < 3) {\n        return { Q: Q, B: [[0, m - 1]] };\n    }\n    var epsilon = numeric.epsilon;\n    for (iter = 0; iter < maxiter; iter++) {\n        for (j = 0; j < m - 1; j++) {\n            if (\n                Math.abs(H[j + 1][j]) <\n                epsilon * (Math.abs(H[j][j]) + Math.abs(H[j + 1][j + 1]))\n            ) {\n                var QH1 = numeric.QRFrancis(\n                    numeric.getBlock(H, [0, 0], [j, j]),\n                    maxiter\n                );\n                var QH2 = numeric.QRFrancis(\n                    numeric.getBlock(H, [j + 1, j + 1], [m - 1, m - 1]),\n                    maxiter\n                );\n                B = Array(j + 1);\n                for (i = 0; i <= j; i++) {\n                    B[i] = Q[i];\n                }\n                C = numeric.dot(QH1.Q, B);\n                for (i = 0; i <= j; i++) {\n                    Q[i] = C[i];\n                }\n                B = Array(m - j - 1);\n                for (i = j + 1; i < m; i++) {\n                    B[i - j - 1] = Q[i];\n                }\n                C = numeric.dot(QH2.Q, B);\n                for (i = j + 1; i < m; i++) {\n                    Q[i] = C[i - j - 1];\n                }\n                return { Q: Q, B: QH1.B.concat(numeric.add(QH2.B, j + 1)) };\n            }\n        }\n        a = H[m - 2][m - 2];\n        b = H[m - 2][m - 1];\n        c = H[m - 1][m - 2];\n        d = H[m - 1][m - 1];\n        tr = a + d;\n        det = a * d - b * c;\n        Hloc = numeric.getBlock(H, [0, 0], [2, 2]);\n        if (tr * tr >= 4 * det) {\n            var s1, s2;\n            s1 = 0.5 * (tr + Math.sqrt(tr * tr - 4 * det));\n            s2 = 0.5 * (tr - Math.sqrt(tr * tr - 4 * det));\n            Hloc = numeric.add(\n                numeric.sub(\n                    numeric.dot(Hloc, Hloc),\n                    numeric.mul(Hloc, s1 + s2)\n                ),\n                numeric.diag(numeric.rep([3], s1 * s2))\n            );\n        } else {\n            Hloc = numeric.add(\n                numeric.sub(numeric.dot(Hloc, Hloc), numeric.mul(Hloc, tr)),\n                numeric.diag(numeric.rep([3], det))\n            );\n        }\n        x = [Hloc[0][0], Hloc[1][0], Hloc[2][0]];\n        v = numeric.house(x);\n        B = [H[0], H[1], H[2]];\n        C = numeric.tensor(v, numeric.dot(v, B));\n        for (i = 0; i < 3; i++) {\n            Hi = H[i];\n            Ci = C[i];\n            for (k = 0; k < m; k++) Hi[k] -= 2 * Ci[k];\n        }\n        B = numeric.getBlock(H, [0, 0], [m - 1, 2]);\n        C = numeric.tensor(numeric.dot(B, v), v);\n        for (i = 0; i < m; i++) {\n            Hi = H[i];\n            Ci = C[i];\n            for (k = 0; k < 3; k++) Hi[k] -= 2 * Ci[k];\n        }\n        B = [Q[0], Q[1], Q[2]];\n        C = numeric.tensor(v, numeric.dot(v, B));\n        for (i = 0; i < 3; i++) {\n            Qi = Q[i];\n            Ci = C[i];\n            for (k = 0; k < m; k++) Qi[k] -= 2 * Ci[k];\n        }\n        var J;\n        for (j = 0; j < m - 2; j++) {\n            for (k = j; k <= j + 1; k++) {\n                if (\n                    Math.abs(H[k + 1][k]) <\n                    epsilon * (Math.abs(H[k][k]) + Math.abs(H[k + 1][k + 1]))\n                ) {\n                    var QH1 = numeric.QRFrancis(\n                        numeric.getBlock(H, [0, 0], [k, k]),\n                        maxiter\n                    );\n                    var QH2 = numeric.QRFrancis(\n                        numeric.getBlock(H, [k + 1, k + 1], [m - 1, m - 1]),\n                        maxiter\n                    );\n                    B = Array(k + 1);\n                    for (i = 0; i <= k; i++) {\n                        B[i] = Q[i];\n                    }\n                    C = numeric.dot(QH1.Q, B);\n                    for (i = 0; i <= k; i++) {\n                        Q[i] = C[i];\n                    }\n                    B = Array(m - k - 1);\n                    for (i = k + 1; i < m; i++) {\n                        B[i - k - 1] = Q[i];\n                    }\n                    C = numeric.dot(QH2.Q, B);\n                    for (i = k + 1; i < m; i++) {\n                        Q[i] = C[i - k - 1];\n                    }\n                    return { Q: Q, B: QH1.B.concat(numeric.add(QH2.B, k + 1)) };\n                }\n            }\n            J = Math.min(m - 1, j + 3);\n            x = Array(J - j);\n            for (i = j + 1; i <= J; i++) {\n                x[i - j - 1] = H[i][j];\n            }\n            v = numeric.house(x);\n            B = numeric.getBlock(H, [j + 1, j], [J, m - 1]);\n            C = numeric.tensor(v, numeric.dot(v, B));\n            for (i = j + 1; i <= J; i++) {\n                Hi = H[i];\n                Ci = C[i - j - 1];\n                for (k = j; k < m; k++) Hi[k] -= 2 * Ci[k - j];\n            }\n            B = numeric.getBlock(H, [0, j + 1], [m - 1, J]);\n            C = numeric.tensor(numeric.dot(B, v), v);\n            for (i = 0; i < m; i++) {\n                Hi = H[i];\n                Ci = C[i];\n                for (k = j + 1; k <= J; k++) Hi[k] -= 2 * Ci[k - j - 1];\n            }\n            B = Array(J - j);\n            for (i = j + 1; i <= J; i++) B[i - j - 1] = Q[i];\n            C = numeric.tensor(v, numeric.dot(v, B));\n            for (i = j + 1; i <= J; i++) {\n                Qi = Q[i];\n                Ci = C[i - j - 1];\n                for (k = 0; k < m; k++) Qi[k] -= 2 * Ci[k];\n            }\n        }\n    }\n    throw new Error(\n        'numeric: eigenvalue iteration does not converge -- increase maxiter?'\n    );\n};\n\nnumeric.eig = function eig(A, maxiter) {\n    var QH = numeric.toUpperHessenberg(A);\n    var QB = numeric.QRFrancis(QH.H, maxiter);\n    var T = numeric.T;\n    var n = A.length,\n        i,\n        k,\n        flag = false,\n        B = QB.B,\n        H = numeric.dot(QB.Q, numeric.dot(QH.H, numeric.transpose(QB.Q)));\n    var Q = new T(numeric.dot(QB.Q, QH.Q)),\n        Q0;\n    var m = B.length,\n        j;\n    var a, b, c, d, p1, p2, disc, x, y, p, q, n1, n2;\n    var sqrt = Math.sqrt;\n    for (k = 0; k < m; k++) {\n        i = B[k][0];\n        if (i === B[k][1]) {\n            // nothing\n        } else {\n            j = i + 1;\n            a = H[i][i];\n            b = H[i][j];\n            c = H[j][i];\n            d = H[j][j];\n            if (b === 0 && c === 0) continue;\n            p1 = -a - d;\n            p2 = a * d - b * c;\n            disc = p1 * p1 - 4 * p2;\n            if (disc >= 0) {\n                if (p1 < 0) x = -0.5 * (p1 - sqrt(disc));\n                else x = -0.5 * (p1 + sqrt(disc));\n                n1 = (a - x) * (a - x) + b * b;\n                n2 = c * c + (d - x) * (d - x);\n                if (n1 > n2) {\n                    n1 = sqrt(n1);\n                    p = (a - x) / n1;\n                    q = b / n1;\n                } else {\n                    n2 = sqrt(n2);\n                    p = c / n2;\n                    q = (d - x) / n2;\n                }\n                Q0 = new T([\n                    [q, -p],\n                    [p, q],\n                ]);\n                Q.setRows(i, j, Q0.dot(Q.getRows(i, j)));\n            } else {\n                x = -0.5 * p1;\n                y = 0.5 * sqrt(-disc);\n                n1 = (a - x) * (a - x) + b * b;\n                n2 = c * c + (d - x) * (d - x);\n                if (n1 > n2) {\n                    n1 = sqrt(n1 + y * y);\n                    p = (a - x) / n1;\n                    q = b / n1;\n                    x = 0;\n                    y /= n1;\n                } else {\n                    n2 = sqrt(n2 + y * y);\n                    p = c / n2;\n                    q = (d - x) / n2;\n                    x = y / n2;\n                    y = 0;\n                }\n                Q0 = new T(\n                    [\n                        [q, -p],\n                        [p, q],\n                    ],\n                    [\n                        [x, y],\n                        [y, -x],\n                    ]\n                );\n                Q.setRows(i, j, Q0.dot(Q.getRows(i, j)));\n            }\n        }\n    }\n    var R = Q.dot(A).dot(Q.transjugate()),\n        n = A.length,\n        E = numeric.T.identity(n);\n    for (j = 0; j < n; j++) {\n        if (j > 0) {\n            for (k = j - 1; k >= 0; k--) {\n                var Rk = R.get([k, k]),\n                    Rj = R.get([j, j]);\n                if (numeric.neq(Rk.x, Rj.x) || numeric.neq(Rk.y, Rj.y)) {\n                    x = R.getRow(k).getBlock([k], [j - 1]);\n                    y = E.getRow(j).getBlock([k], [j - 1]);\n                    E.set(\n                        [j, k],\n                        R.get([k, j]).neg().sub(x.dot(y)).div(Rk.sub(Rj))\n                    );\n                } else {\n                    E.setRow(j, E.getRow(k));\n                    continue;\n                }\n            }\n        }\n    }\n    for (j = 0; j < n; j++) {\n        x = E.getRow(j);\n        E.setRow(j, x.div(x.norm2()));\n    }\n    E = E.transpose();\n    E = Q.transjugate().dot(E);\n    return { lambda: R.getDiag(), E: E };\n};\n\n// 5. Compressed Column Storage matrices\nnumeric.ccsSparse = function ccsSparse(A) {\n    var m = A.length,\n        n,\n        foo,\n        i,\n        j,\n        counts = [];\n    for (i = m - 1; i !== -1; --i) {\n        foo = A[i];\n        for (j in foo) {\n            j = parseInt(j);\n            while (j >= counts.length) counts[counts.length] = 0;\n            if (foo[j] !== 0) counts[j]++;\n        }\n    }\n    var n = counts.length;\n    var Ai = Array(n + 1);\n    Ai[0] = 0;\n    for (i = 0; i < n; ++i) Ai[i + 1] = Ai[i] + counts[i];\n    var Aj = Array(Ai[n]),\n        Av = Array(Ai[n]);\n    for (i = m - 1; i !== -1; --i) {\n        foo = A[i];\n        for (j in foo) {\n            if (foo[j] !== 0) {\n                counts[j]--;\n                Aj[Ai[j] + counts[j]] = i;\n                Av[Ai[j] + counts[j]] = foo[j];\n            }\n        }\n    }\n    return [Ai, Aj, Av];\n};\nnumeric.ccsFull = function ccsFull(A) {\n    var Ai = A[0],\n        Aj = A[1],\n        Av = A[2],\n        s = numeric.ccsDim(A),\n        m = s[0],\n        n = s[1],\n        i,\n        j,\n        j0,\n        j1,\n        k;\n    var B = numeric.rep([m, n], 0);\n    for (i = 0; i < n; i++) {\n        j0 = Ai[i];\n        j1 = Ai[i + 1];\n        for (j = j0; j < j1; ++j) {\n            B[Aj[j]][i] = Av[j];\n        }\n    }\n    return B;\n};\nnumeric.ccsTSolve = function ccsTSolve(A, b, x, bj, xj) {\n    var Ai = A[0],\n        Aj = A[1],\n        Av = A[2],\n        m = Ai.length - 1,\n        max = Math.max,\n        n = 0;\n    if (typeof bj === 'undefined') x = numeric.rep([m], 0);\n    if (typeof bj === 'undefined') bj = numeric.linspace(0, x.length - 1);\n    if (typeof xj === 'undefined') xj = [];\n    function dfs(j) {\n        var k;\n        if (x[j] !== 0) return;\n        x[j] = 1;\n        for (k = Ai[j]; k < Ai[j + 1]; ++k) dfs(Aj[k]);\n        xj[n] = j;\n        ++n;\n    }\n    var i, j, j0, j1, k, l, l0, l1, a;\n    for (i = bj.length - 1; i !== -1; --i) {\n        dfs(bj[i]);\n    }\n    xj.length = n;\n    for (i = xj.length - 1; i !== -1; --i) {\n        x[xj[i]] = 0;\n    }\n    for (i = bj.length - 1; i !== -1; --i) {\n        j = bj[i];\n        x[j] = b[j];\n    }\n    for (i = xj.length - 1; i !== -1; --i) {\n        j = xj[i];\n        j0 = Ai[j];\n        j1 = max(Ai[j + 1], j0);\n        for (k = j0; k !== j1; ++k) {\n            if (Aj[k] === j) {\n                x[j] /= Av[k];\n                break;\n            }\n        }\n        a = x[j];\n        for (k = j0; k !== j1; ++k) {\n            l = Aj[k];\n            if (l !== j) x[l] -= a * Av[k];\n        }\n    }\n    return x;\n};\nnumeric.ccsDFS = function ccsDFS(n) {\n    this.k = Array(n);\n    this.k1 = Array(n);\n    this.j = Array(n);\n};\nnumeric.ccsDFS.prototype.dfs = function dfs(J, Ai, Aj, x, xj, Pinv) {\n    var m = 0,\n        foo,\n        n = xj.length;\n    var k = this.k,\n        k1 = this.k1,\n        j = this.j,\n        km,\n        k11;\n    if (x[J] !== 0) return;\n    x[J] = 1;\n    j[0] = J;\n    k[0] = km = Ai[J];\n    k1[0] = k11 = Ai[J + 1];\n    while (1) {\n        if (km >= k11) {\n            xj[n] = j[m];\n            if (m === 0) return;\n            ++n;\n            --m;\n            km = k[m];\n            k11 = k1[m];\n        } else {\n            foo = Pinv[Aj[km]];\n            if (x[foo] === 0) {\n                x[foo] = 1;\n                k[m] = km;\n                ++m;\n                j[m] = foo;\n                km = Ai[foo];\n                k1[m] = k11 = Ai[foo + 1];\n            } else ++km;\n        }\n    }\n};\nnumeric.ccsLPSolve = function ccsLPSolve(A, B, x, xj, I, Pinv, dfs) {\n    var Ai = A[0],\n        Aj = A[1],\n        Av = A[2],\n        m = Ai.length - 1,\n        n = 0;\n    var Bi = B[0],\n        Bj = B[1],\n        Bv = B[2];\n\n    var i, i0, i1, j, J, j0, j1, k, l, l0, l1, a;\n    i0 = Bi[I];\n    i1 = Bi[I + 1];\n    xj.length = 0;\n    for (i = i0; i < i1; ++i) {\n        dfs.dfs(Pinv[Bj[i]], Ai, Aj, x, xj, Pinv);\n    }\n    for (i = xj.length - 1; i !== -1; --i) {\n        x[xj[i]] = 0;\n    }\n    for (i = i0; i !== i1; ++i) {\n        j = Pinv[Bj[i]];\n        x[j] = Bv[i];\n    }\n    for (i = xj.length - 1; i !== -1; --i) {\n        j = xj[i];\n        j0 = Ai[j];\n        j1 = Ai[j + 1];\n        for (k = j0; k < j1; ++k) {\n            if (Pinv[Aj[k]] === j) {\n                x[j] /= Av[k];\n                break;\n            }\n        }\n        a = x[j];\n        for (k = j0; k < j1; ++k) {\n            l = Pinv[Aj[k]];\n            if (l !== j) x[l] -= a * Av[k];\n        }\n    }\n    return x;\n};\nnumeric.ccsLUP1 = function ccsLUP1(A, threshold) {\n    var m = A[0].length - 1;\n    var L = [numeric.rep([m + 1], 0), [], []],\n        U = [numeric.rep([m + 1], 0), [], []];\n    var Li = L[0],\n        Lj = L[1],\n        Lv = L[2],\n        Ui = U[0],\n        Uj = U[1],\n        Uv = U[2];\n    var x = numeric.rep([m], 0),\n        xj = numeric.rep([m], 0);\n    var i, j, k, j0, j1, a, e, c, d, K;\n    var sol = numeric.ccsLPSolve,\n        max = Math.max,\n        abs = Math.abs;\n    var P = numeric.linspace(0, m - 1),\n        Pinv = numeric.linspace(0, m - 1);\n    var dfs = new numeric.ccsDFS(m);\n    if (typeof threshold === 'undefined') {\n        threshold = 1;\n    }\n    for (i = 0; i < m; ++i) {\n        sol(L, A, x, xj, i, Pinv, dfs);\n        a = -1;\n        e = -1;\n        for (j = xj.length - 1; j !== -1; --j) {\n            k = xj[j];\n            if (k <= i) continue;\n            c = abs(x[k]);\n            if (c > a) {\n                e = k;\n                a = c;\n            }\n        }\n        if (abs(x[i]) < threshold * a) {\n            j = P[i];\n            a = P[e];\n            P[i] = a;\n            Pinv[a] = i;\n            P[e] = j;\n            Pinv[j] = e;\n            a = x[i];\n            x[i] = x[e];\n            x[e] = a;\n        }\n        a = Li[i];\n        e = Ui[i];\n        d = x[i];\n        Lj[a] = P[i];\n        Lv[a] = 1;\n        ++a;\n        for (j = xj.length - 1; j !== -1; --j) {\n            k = xj[j];\n            c = x[k];\n            xj[j] = 0;\n            x[k] = 0;\n            if (k <= i) {\n                Uj[e] = k;\n                Uv[e] = c;\n                ++e;\n            } else {\n                Lj[a] = P[k];\n                Lv[a] = c / d;\n                ++a;\n            }\n        }\n        Li[i + 1] = a;\n        Ui[i + 1] = e;\n    }\n    for (j = Lj.length - 1; j !== -1; --j) {\n        Lj[j] = Pinv[Lj[j]];\n    }\n    return { L: L, U: U, P: P, Pinv: Pinv };\n};\nnumeric.ccsDFS0 = function ccsDFS0(n) {\n    this.k = Array(n);\n    this.k1 = Array(n);\n    this.j = Array(n);\n};\nnumeric.ccsDFS0.prototype.dfs = function dfs(J, Ai, Aj, x, xj, Pinv, P) {\n    var m = 0,\n        foo,\n        n = xj.length;\n    var k = this.k,\n        k1 = this.k1,\n        j = this.j,\n        km,\n        k11;\n    if (x[J] !== 0) return;\n    x[J] = 1;\n    j[0] = J;\n    k[0] = km = Ai[Pinv[J]];\n    k1[0] = k11 = Ai[Pinv[J] + 1];\n    while (1) {\n        if (isNaN(km)) throw new Error('Ow!');\n        if (km >= k11) {\n            xj[n] = Pinv[j[m]];\n            if (m === 0) return;\n            ++n;\n            --m;\n            km = k[m];\n            k11 = k1[m];\n        } else {\n            foo = Aj[km];\n            if (x[foo] === 0) {\n                x[foo] = 1;\n                k[m] = km;\n                ++m;\n                j[m] = foo;\n                foo = Pinv[foo];\n                km = Ai[foo];\n                k1[m] = k11 = Ai[foo + 1];\n            } else ++km;\n        }\n    }\n};\nnumeric.ccsLPSolve0 = function ccsLPSolve0(A, B, y, xj, I, Pinv, P, dfs) {\n    var Ai = A[0],\n        Aj = A[1],\n        Av = A[2],\n        m = Ai.length - 1,\n        n = 0;\n    var Bi = B[0],\n        Bj = B[1],\n        Bv = B[2];\n\n    var i, i0, i1, j, J, j0, j1, k, l, l0, l1, a;\n    i0 = Bi[I];\n    i1 = Bi[I + 1];\n    xj.length = 0;\n    for (i = i0; i < i1; ++i) {\n        dfs.dfs(Bj[i], Ai, Aj, y, xj, Pinv, P);\n    }\n    for (i = xj.length - 1; i !== -1; --i) {\n        j = xj[i];\n        y[P[j]] = 0;\n    }\n    for (i = i0; i !== i1; ++i) {\n        j = Bj[i];\n        y[j] = Bv[i];\n    }\n    for (i = xj.length - 1; i !== -1; --i) {\n        j = xj[i];\n        l = P[j];\n        j0 = Ai[j];\n        j1 = Ai[j + 1];\n        for (k = j0; k < j1; ++k) {\n            if (Aj[k] === l) {\n                y[l] /= Av[k];\n                break;\n            }\n        }\n        a = y[l];\n        for (k = j0; k < j1; ++k) y[Aj[k]] -= a * Av[k];\n        y[l] = a;\n    }\n};\nnumeric.ccsLUP0 = function ccsLUP0(A, threshold) {\n    var m = A[0].length - 1;\n    var L = [numeric.rep([m + 1], 0), [], []],\n        U = [numeric.rep([m + 1], 0), [], []];\n    var Li = L[0],\n        Lj = L[1],\n        Lv = L[2],\n        Ui = U[0],\n        Uj = U[1],\n        Uv = U[2];\n    var y = numeric.rep([m], 0),\n        xj = numeric.rep([m], 0);\n    var i, j, k, j0, j1, a, e, c, d, K;\n    var sol = numeric.ccsLPSolve0,\n        max = Math.max,\n        abs = Math.abs;\n    var P = numeric.linspace(0, m - 1),\n        Pinv = numeric.linspace(0, m - 1);\n    var dfs = new numeric.ccsDFS0(m);\n    if (typeof threshold === 'undefined') {\n        threshold = 1;\n    }\n    for (i = 0; i < m; ++i) {\n        sol(L, A, y, xj, i, Pinv, P, dfs);\n        a = -1;\n        e = -1;\n        for (j = xj.length - 1; j !== -1; --j) {\n            k = xj[j];\n            if (k <= i) continue;\n            c = abs(y[P[k]]);\n            if (c > a) {\n                e = k;\n                a = c;\n            }\n        }\n        if (abs(y[P[i]]) < threshold * a) {\n            j = P[i];\n            a = P[e];\n            P[i] = a;\n            Pinv[a] = i;\n            P[e] = j;\n            Pinv[j] = e;\n        }\n        a = Li[i];\n        e = Ui[i];\n        d = y[P[i]];\n        Lj[a] = P[i];\n        Lv[a] = 1;\n        ++a;\n        for (j = xj.length - 1; j !== -1; --j) {\n            k = xj[j];\n            c = y[P[k]];\n            xj[j] = 0;\n            y[P[k]] = 0;\n            if (k <= i) {\n                Uj[e] = k;\n                Uv[e] = c;\n                ++e;\n            } else {\n                Lj[a] = P[k];\n                Lv[a] = c / d;\n                ++a;\n            }\n        }\n        Li[i + 1] = a;\n        Ui[i + 1] = e;\n    }\n    for (j = Lj.length - 1; j !== -1; --j) {\n        Lj[j] = Pinv[Lj[j]];\n    }\n    return { L: L, U: U, P: P, Pinv: Pinv };\n};\nnumeric.ccsLUP = numeric.ccsLUP0;\n\nnumeric.ccsDim = function ccsDim(A) {\n    return [numeric.sup(A[1]) + 1, A[0].length - 1];\n};\nnumeric.ccsGetBlock = function ccsGetBlock(A, i, j) {\n    var s = numeric.ccsDim(A),\n        m = s[0],\n        n = s[1];\n    if (typeof i === 'undefined') {\n        i = numeric.linspace(0, m - 1);\n    } else if (typeof i === 'number') {\n        i = [i];\n    }\n    if (typeof j === 'undefined') {\n        j = numeric.linspace(0, n - 1);\n    } else if (typeof j === 'number') {\n        j = [j];\n    }\n    var p,\n        p0,\n        p1,\n        P = i.length,\n        q,\n        Q = j.length,\n        r,\n        jq,\n        ip;\n    var Bi = numeric.rep([n], 0),\n        Bj = [],\n        Bv = [],\n        B = [Bi, Bj, Bv];\n    var Ai = A[0],\n        Aj = A[1],\n        Av = A[2];\n    var x = numeric.rep([m], 0),\n        count = 0,\n        flags = numeric.rep([m], 0);\n    for (q = 0; q < Q; ++q) {\n        jq = j[q];\n        var q0 = Ai[jq];\n        var q1 = Ai[jq + 1];\n        for (p = q0; p < q1; ++p) {\n            r = Aj[p];\n            flags[r] = 1;\n            x[r] = Av[p];\n        }\n        for (p = 0; p < P; ++p) {\n            ip = i[p];\n            if (flags[ip]) {\n                Bj[count] = p;\n                Bv[count] = x[i[p]];\n                ++count;\n            }\n        }\n        for (p = q0; p < q1; ++p) {\n            r = Aj[p];\n            flags[r] = 0;\n        }\n        Bi[q + 1] = count;\n    }\n    return B;\n};\n\nnumeric.ccsDot = function ccsDot(A, B) {\n    var Ai = A[0],\n        Aj = A[1],\n        Av = A[2];\n    var Bi = B[0],\n        Bj = B[1],\n        Bv = B[2];\n    var sA = numeric.ccsDim(A),\n        sB = numeric.ccsDim(B);\n    var m = sA[0],\n        n = sA[1],\n        o = sB[1];\n    var x = numeric.rep([m], 0),\n        flags = numeric.rep([m], 0),\n        xj = Array(m);\n    var Ci = numeric.rep([o], 0),\n        Cj = [],\n        Cv = [],\n        C = [Ci, Cj, Cv];\n    var i, j, k, j0, j1, i0, i1, l, p, a, b;\n    for (k = 0; k !== o; ++k) {\n        j0 = Bi[k];\n        j1 = Bi[k + 1];\n        p = 0;\n        for (j = j0; j < j1; ++j) {\n            a = Bj[j];\n            b = Bv[j];\n            i0 = Ai[a];\n            i1 = Ai[a + 1];\n            for (i = i0; i < i1; ++i) {\n                l = Aj[i];\n                if (flags[l] === 0) {\n                    xj[p] = l;\n                    flags[l] = 1;\n                    p = p + 1;\n                }\n                x[l] = x[l] + Av[i] * b;\n            }\n        }\n        j0 = Ci[k];\n        j1 = j0 + p;\n        Ci[k + 1] = j1;\n        for (j = p - 1; j !== -1; --j) {\n            b = j0 + j;\n            i = xj[j];\n            Cj[b] = i;\n            Cv[b] = x[i];\n            flags[i] = 0;\n            x[i] = 0;\n        }\n        Ci[k + 1] = Ci[k] + p;\n    }\n    return C;\n};\n\nnumeric.ccsLUPSolve = function ccsLUPSolve(LUP, B) {\n    var L = LUP.L,\n        U = LUP.U,\n        P = LUP.P;\n    var Bi = B[0];\n    var flag = false;\n    if (typeof Bi !== 'object') {\n        B = [[0, B.length], numeric.linspace(0, B.length - 1), B];\n        Bi = B[0];\n        flag = true;\n    }\n    var Bj = B[1],\n        Bv = B[2];\n    var n = L[0].length - 1,\n        m = Bi.length - 1;\n    var x = numeric.rep([n], 0),\n        xj = Array(n);\n    var b = numeric.rep([n], 0),\n        bj = Array(n);\n    var Xi = numeric.rep([m + 1], 0),\n        Xj = [],\n        Xv = [];\n    var sol = numeric.ccsTSolve;\n    var i,\n        j,\n        j0,\n        j1,\n        k,\n        J,\n        N = 0;\n    for (i = 0; i < m; ++i) {\n        k = 0;\n        j0 = Bi[i];\n        j1 = Bi[i + 1];\n        for (j = j0; j < j1; ++j) {\n            J = LUP.Pinv[Bj[j]];\n            bj[k] = J;\n            b[J] = Bv[j];\n            ++k;\n        }\n        bj.length = k;\n        sol(L, b, x, bj, xj);\n        for (j = bj.length - 1; j !== -1; --j) b[bj[j]] = 0;\n        sol(U, x, b, xj, bj);\n        if (flag) return b;\n        for (j = xj.length - 1; j !== -1; --j) x[xj[j]] = 0;\n        for (j = bj.length - 1; j !== -1; --j) {\n            J = bj[j];\n            Xj[N] = J;\n            Xv[N] = b[J];\n            b[J] = 0;\n            ++N;\n        }\n        Xi[i + 1] = N;\n    }\n    return [Xi, Xj, Xv];\n};\n\nnumeric.ccsbinop = function ccsbinop(body, setup) {\n    if (typeof setup === 'undefined') setup = '';\n    return Function(\n        'X',\n        'Y',\n        'var Xi = X[0], Xj = X[1], Xv = X[2];\\n' +\n            'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\\n' +\n            'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\\n' +\n            'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\\n' +\n            'var x = numeric.rep([m],0),y = numeric.rep([m],0);\\n' +\n            'var xk,yk,zk;\\n' +\n            'var i,j,j0,j1,k,p=0;\\n' +\n            setup +\n            'for(i=0;i<n;++i) {\\n' +\n            '  j0 = Xi[i]; j1 = Xi[i+1];\\n' +\n            '  for(j=j0;j!==j1;++j) {\\n' +\n            '    k = Xj[j];\\n' +\n            '    x[k] = 1;\\n' +\n            '    Zj[p] = k;\\n' +\n            '    ++p;\\n' +\n            '  }\\n' +\n            '  j0 = Yi[i]; j1 = Yi[i+1];\\n' +\n            '  for(j=j0;j!==j1;++j) {\\n' +\n            '    k = Yj[j];\\n' +\n            '    y[k] = Yv[j];\\n' +\n            '    if(x[k] === 0) {\\n' +\n            '      Zj[p] = k;\\n' +\n            '      ++p;\\n' +\n            '    }\\n' +\n            '  }\\n' +\n            '  Zi[i+1] = p;\\n' +\n            '  j0 = Xi[i]; j1 = Xi[i+1];\\n' +\n            '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\\n' +\n            '  j0 = Zi[i]; j1 = Zi[i+1];\\n' +\n            '  for(j=j0;j!==j1;++j) {\\n' +\n            '    k = Zj[j];\\n' +\n            '    xk = x[k];\\n' +\n            '    yk = y[k];\\n' +\n            body +\n            '\\n' +\n            '    Zv[j] = zk;\\n' +\n            '  }\\n' +\n            '  j0 = Xi[i]; j1 = Xi[i+1];\\n' +\n            '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\\n' +\n            '  j0 = Yi[i]; j1 = Yi[i+1];\\n' +\n            '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\\n' +\n            '}\\n' +\n            'return [Zi,Zj,Zv];'\n    );\n};\n(function () {\n    var k, A, B, C;\n    for (k in numeric.ops2) {\n        if (isFinite(eval('1' + numeric.ops2[k] + '0')))\n            A = '[Y[0],Y[1],numeric.' + k + '(X,Y[2])]';\n        else A = 'NaN';\n        if (isFinite(eval('0' + numeric.ops2[k] + '1')))\n            B = '[X[0],X[1],numeric.' + k + '(X[2],Y)]';\n        else B = 'NaN';\n        if (\n            isFinite(eval('1' + numeric.ops2[k] + '0')) &&\n            isFinite(eval('0' + numeric.ops2[k] + '1'))\n        )\n            C = 'numeric.ccs' + k + 'MM(X,Y)';\n        else C = 'NaN';\n        numeric['ccs' + k + 'MM'] = numeric.ccsbinop(\n            'zk = xk ' + numeric.ops2[k] + 'yk;'\n        );\n        numeric['ccs' + k] = Function(\n            'X',\n            'Y',\n            'if(typeof X === \"number\") return ' +\n                A +\n                ';\\n' +\n                'if(typeof Y === \"number\") return ' +\n                B +\n                ';\\n' +\n                'return ' +\n                C +\n                ';\\n'\n        );\n    }\n})();\n\nnumeric.ccsScatter = function ccsScatter(A) {\n    var Ai = A[0],\n        Aj = A[1],\n        Av = A[2];\n    var n = numeric.sup(Aj) + 1,\n        m = Ai.length;\n    var Ri = numeric.rep([n], 0),\n        Rj = Array(m),\n        Rv = Array(m);\n    var counts = numeric.rep([n], 0),\n        i;\n    for (i = 0; i < m; ++i) counts[Aj[i]]++;\n    for (i = 0; i < n; ++i) Ri[i + 1] = Ri[i] + counts[i];\n    var ptr = Ri.slice(0),\n        k,\n        Aii;\n    for (i = 0; i < m; ++i) {\n        Aii = Aj[i];\n        k = ptr[Aii];\n        Rj[k] = Ai[i];\n        Rv[k] = Av[i];\n        ptr[Aii] = ptr[Aii] + 1;\n    }\n    return [Ri, Rj, Rv];\n};\n\nnumeric.ccsGather = function ccsGather(A) {\n    var Ai = A[0],\n        Aj = A[1],\n        Av = A[2];\n    var n = Ai.length - 1,\n        m = Aj.length;\n    var Ri = Array(m),\n        Rj = Array(m),\n        Rv = Array(m);\n    var i, j, j0, j1, p;\n    p = 0;\n    for (i = 0; i < n; ++i) {\n        j0 = Ai[i];\n        j1 = Ai[i + 1];\n        for (j = j0; j !== j1; ++j) {\n            Rj[p] = i;\n            Ri[p] = Aj[j];\n            Rv[p] = Av[j];\n            ++p;\n        }\n    }\n    return [Ri, Rj, Rv];\n};\n\n// The following sparse linear algebra routines are deprecated.\n\nnumeric.sdim = function dim(A, ret, k) {\n    if (typeof ret === 'undefined') {\n        ret = [];\n    }\n    if (typeof A !== 'object') return ret;\n    if (typeof k === 'undefined') {\n        k = 0;\n    }\n    if (!(k in ret)) {\n        ret[k] = 0;\n    }\n    if (A.length > ret[k]) ret[k] = A.length;\n    var i;\n    for (i in A) {\n        if (A.hasOwnProperty(i)) dim(A[i], ret, k + 1);\n    }\n    return ret;\n};\n\nnumeric.sclone = function clone(A, k, n) {\n    if (typeof k === 'undefined') {\n        k = 0;\n    }\n    if (typeof n === 'undefined') {\n        n = numeric.sdim(A).length;\n    }\n    var i,\n        ret = Array(A.length);\n    if (k === n - 1) {\n        for (i in A) {\n            if (A.hasOwnProperty(i)) ret[i] = A[i];\n        }\n        return ret;\n    }\n    for (i in A) {\n        if (A.hasOwnProperty(i)) ret[i] = clone(A[i], k + 1, n);\n    }\n    return ret;\n};\n\nnumeric.sdiag = function diag(d) {\n    var n = d.length,\n        i,\n        ret = Array(n),\n        i1,\n        i2,\n        i3;\n    for (i = n - 1; i >= 1; i -= 2) {\n        i1 = i - 1;\n        ret[i] = [];\n        ret[i][i] = d[i];\n        ret[i1] = [];\n        ret[i1][i1] = d[i1];\n    }\n    if (i === 0) {\n        ret[0] = [];\n        ret[0][0] = d[i];\n    }\n    return ret;\n};\n\nnumeric.sidentity = function identity(n) {\n    return numeric.sdiag(numeric.rep([n], 1));\n};\n\nnumeric.stranspose = function transpose(A) {\n    var ret = [],\n        n = A.length,\n        i,\n        j,\n        Ai;\n    for (i in A) {\n        if (!A.hasOwnProperty(i)) continue;\n        Ai = A[i];\n        for (j in Ai) {\n            if (!Ai.hasOwnProperty(j)) continue;\n            if (typeof ret[j] !== 'object') {\n                ret[j] = [];\n            }\n            ret[j][i] = Ai[j];\n        }\n    }\n    return ret;\n};\n\nnumeric.sLUP = function LUP(A, tol) {\n    throw new Error(\n        'The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.'\n    );\n};\n\nnumeric.sdotMM = function dotMM(A, B) {\n    var p = A.length,\n        q = B.length,\n        BT = numeric.stranspose(B),\n        r = BT.length,\n        Ai,\n        BTk;\n    var i, j, k, accum;\n    var ret = Array(p),\n        reti;\n    for (i = p - 1; i >= 0; i--) {\n        reti = [];\n        Ai = A[i];\n        for (k = r - 1; k >= 0; k--) {\n            accum = 0;\n            BTk = BT[k];\n            for (j in Ai) {\n                if (!Ai.hasOwnProperty(j)) continue;\n                if (j in BTk) {\n                    accum += Ai[j] * BTk[j];\n                }\n            }\n            if (accum) reti[k] = accum;\n        }\n        ret[i] = reti;\n    }\n    return ret;\n};\n\nnumeric.sdotMV = function dotMV(A, x) {\n    var p = A.length,\n        Ai,\n        i,\n        j;\n    var ret = Array(p),\n        accum;\n    for (i = p - 1; i >= 0; i--) {\n        Ai = A[i];\n        accum = 0;\n        for (j in Ai) {\n            if (!Ai.hasOwnProperty(j)) continue;\n            if (x[j]) accum += Ai[j] * x[j];\n        }\n        if (accum) ret[i] = accum;\n    }\n    return ret;\n};\n\nnumeric.sdotVM = function dotMV(x, A) {\n    var i, j, Ai, alpha;\n    var ret = [],\n        accum;\n    for (i in x) {\n        if (!x.hasOwnProperty(i)) continue;\n        Ai = A[i];\n        alpha = x[i];\n        for (j in Ai) {\n            if (!Ai.hasOwnProperty(j)) continue;\n            if (!ret[j]) {\n                ret[j] = 0;\n            }\n            ret[j] += alpha * Ai[j];\n        }\n    }\n    return ret;\n};\n\nnumeric.sdotVV = function dotVV(x, y) {\n    var i,\n        ret = 0;\n    for (i in x) {\n        if (x[i] && y[i]) ret += x[i] * y[i];\n    }\n    return ret;\n};\n\nnumeric.sdot = function dot(A, B) {\n    var m = numeric.sdim(A).length,\n        n = numeric.sdim(B).length;\n    var k = m * 1000 + n;\n    switch (k) {\n        case 0:\n            return A * B;\n        case 1001:\n            return numeric.sdotVV(A, B);\n        case 2001:\n            return numeric.sdotMV(A, B);\n        case 1002:\n            return numeric.sdotVM(A, B);\n        case 2002:\n            return numeric.sdotMM(A, B);\n        default:\n            throw new Error(\n                'numeric.sdot not implemented for tensors of order ' +\n                    m +\n                    ' and ' +\n                    n\n            );\n    }\n};\n\nnumeric.sscatter = function scatter(V) {\n    var n = V[0].length,\n        Vij,\n        i,\n        j,\n        m = V.length,\n        A = [],\n        Aj;\n    for (i = n - 1; i >= 0; --i) {\n        if (!V[m - 1][i]) continue;\n        Aj = A;\n        for (j = 0; j < m - 2; j++) {\n            Vij = V[j][i];\n            if (!Aj[Vij]) Aj[Vij] = [];\n            Aj = Aj[Vij];\n        }\n        Aj[V[j][i]] = V[j + 1][i];\n    }\n    return A;\n};\n\nnumeric.sgather = function gather(A, ret, k) {\n    if (typeof ret === 'undefined') ret = [];\n    if (typeof k === 'undefined') k = [];\n    var n, i, Ai;\n    n = k.length;\n    for (i in A) {\n        if (A.hasOwnProperty(i)) {\n            k[n] = parseInt(i);\n            Ai = A[i];\n            if (typeof Ai === 'number') {\n                if (Ai) {\n                    if (ret.length === 0) {\n                        for (i = n + 1; i >= 0; --i) ret[i] = [];\n                    }\n                    for (i = n; i >= 0; --i) ret[i].push(k[i]);\n                    ret[n + 1].push(Ai);\n                }\n            } else gather(Ai, ret, k);\n        }\n    }\n    if (k.length > n) k.pop();\n    return ret;\n};\n\n// 6. Coordinate matrices\nnumeric.cLU = function LU(A) {\n    var I = A[0],\n        J = A[1],\n        V = A[2];\n    var p = I.length,\n        m = 0,\n        i,\n        j,\n        k,\n        a,\n        b,\n        c;\n    for (i = 0; i < p; i++) if (I[i] > m) m = I[i];\n    m++;\n    var L = Array(m),\n        U = Array(m),\n        left = numeric.rep([m], Infinity),\n        right = numeric.rep([m], -Infinity);\n    var Ui, Uj, alpha;\n    for (k = 0; k < p; k++) {\n        i = I[k];\n        j = J[k];\n        if (j < left[i]) left[i] = j;\n        if (j > right[i]) right[i] = j;\n    }\n    for (i = 0; i < m - 1; i++) {\n        if (right[i] > right[i + 1]) right[i + 1] = right[i];\n    }\n    for (i = m - 1; i >= 1; i--) {\n        if (left[i] < left[i - 1]) left[i - 1] = left[i];\n    }\n    var countL = 0,\n        countU = 0;\n    for (i = 0; i < m; i++) {\n        U[i] = numeric.rep([right[i] - left[i] + 1], 0);\n        L[i] = numeric.rep([i - left[i]], 0);\n        countL += i - left[i] + 1;\n        countU += right[i] - i + 1;\n    }\n    for (k = 0; k < p; k++) {\n        i = I[k];\n        U[i][J[k] - left[i]] = V[k];\n    }\n    for (i = 0; i < m - 1; i++) {\n        a = i - left[i];\n        Ui = U[i];\n        for (j = i + 1; left[j] <= i && j < m; j++) {\n            b = i - left[j];\n            c = right[i] - i;\n            Uj = U[j];\n            alpha = Uj[b] / Ui[a];\n            if (alpha) {\n                for (k = 1; k <= c; k++) {\n                    Uj[k + b] -= alpha * Ui[k + a];\n                }\n                L[j][i - left[j]] = alpha;\n            }\n        }\n    }\n    var Ui = [],\n        Uj = [],\n        Uv = [],\n        Li = [],\n        Lj = [],\n        Lv = [];\n    var p, q, foo;\n    p = 0;\n    q = 0;\n    for (i = 0; i < m; i++) {\n        a = left[i];\n        b = right[i];\n        foo = U[i];\n        for (j = i; j <= b; j++) {\n            if (foo[j - a]) {\n                Ui[p] = i;\n                Uj[p] = j;\n                Uv[p] = foo[j - a];\n                p++;\n            }\n        }\n        foo = L[i];\n        for (j = a; j < i; j++) {\n            if (foo[j - a]) {\n                Li[q] = i;\n                Lj[q] = j;\n                Lv[q] = foo[j - a];\n                q++;\n            }\n        }\n        Li[q] = i;\n        Lj[q] = i;\n        Lv[q] = 1;\n        q++;\n    }\n    return { U: [Ui, Uj, Uv], L: [Li, Lj, Lv] };\n};\n\nnumeric.cLUsolve = function LUsolve(lu, b) {\n    var L = lu.L,\n        U = lu.U,\n        ret = numeric.clone(b);\n    var Li = L[0],\n        Lj = L[1],\n        Lv = L[2];\n    var Ui = U[0],\n        Uj = U[1],\n        Uv = U[2];\n    var p = Ui.length,\n        q = Li.length;\n    var m = ret.length,\n        i,\n        j,\n        k;\n    k = 0;\n    for (i = 0; i < m; i++) {\n        while (Lj[k] < i) {\n            ret[i] -= Lv[k] * ret[Lj[k]];\n            k++;\n        }\n        k++;\n    }\n    k = p - 1;\n    for (i = m - 1; i >= 0; i--) {\n        while (Uj[k] > i) {\n            ret[i] -= Uv[k] * ret[Uj[k]];\n            k--;\n        }\n        ret[i] /= Uv[k];\n        k--;\n    }\n    return ret;\n};\n\nnumeric.cgrid = function grid(n, shape) {\n    if (typeof n === 'number') n = [n, n];\n    var ret = numeric.rep(n, -1);\n    var i, j, count;\n    if (typeof shape !== 'function') {\n        switch (shape) {\n            case 'L':\n                shape = function (i, j) {\n                    return i >= n[0] / 2 || j < n[1] / 2;\n                };\n                break;\n            default:\n                shape = function (i, j) {\n                    return true;\n                };\n                break;\n        }\n    }\n    count = 0;\n    for (i = 1; i < n[0] - 1; i++)\n        for (j = 1; j < n[1] - 1; j++)\n            if (shape(i, j)) {\n                ret[i][j] = count;\n                count++;\n            }\n    return ret;\n};\n\nnumeric.cdelsq = function delsq(g) {\n    var dir = [\n        [-1, 0],\n        [0, -1],\n        [0, 1],\n        [1, 0],\n    ];\n    var s = numeric.dim(g),\n        m = s[0],\n        n = s[1],\n        i,\n        j,\n        k,\n        p,\n        q;\n    var Li = [],\n        Lj = [],\n        Lv = [];\n    for (i = 1; i < m - 1; i++)\n        for (j = 1; j < n - 1; j++) {\n            if (g[i][j] < 0) continue;\n            for (k = 0; k < 4; k++) {\n                p = i + dir[k][0];\n                q = j + dir[k][1];\n                if (g[p][q] < 0) continue;\n                Li.push(g[i][j]);\n                Lj.push(g[p][q]);\n                Lv.push(-1);\n            }\n            Li.push(g[i][j]);\n            Lj.push(g[i][j]);\n            Lv.push(4);\n        }\n    return [Li, Lj, Lv];\n};\n\nnumeric.cdotMV = function dotMV(A, x) {\n    var ret,\n        Ai = A[0],\n        Aj = A[1],\n        Av = A[2],\n        k,\n        p = Ai.length,\n        N;\n    N = 0;\n    for (k = 0; k < p; k++) {\n        if (Ai[k] > N) N = Ai[k];\n    }\n    N++;\n    ret = numeric.rep([N], 0);\n    for (k = 0; k < p; k++) {\n        ret[Ai[k]] += Av[k] * x[Aj[k]];\n    }\n    return ret;\n};\n\n// 7. Splines\n\nnumeric.Spline = function Spline(x, yl, yr, kl, kr) {\n    this.x = x;\n    this.yl = yl;\n    this.yr = yr;\n    this.kl = kl;\n    this.kr = kr;\n};\nnumeric.Spline.prototype._at = function _at(x1, p) {\n    var x = this.x;\n    var yl = this.yl;\n    var yr = this.yr;\n    var kl = this.kl;\n    var kr = this.kr;\n    var x1, a, b, t;\n    var add = numeric.add,\n        sub = numeric.sub,\n        mul = numeric.mul;\n    a = sub(mul(kl[p], x[p + 1] - x[p]), sub(yr[p + 1], yl[p]));\n    b = add(mul(kr[p + 1], x[p] - x[p + 1]), sub(yr[p + 1], yl[p]));\n    t = (x1 - x[p]) / (x[p + 1] - x[p]);\n    var s = t * (1 - t);\n    return add(\n        add(add(mul(1 - t, yl[p]), mul(t, yr[p + 1])), mul(a, s * (1 - t))),\n        mul(b, s * t)\n    );\n};\nnumeric.Spline.prototype.at = function at(x0) {\n    if (typeof x0 === 'number') {\n        var x = this.x;\n        var n = x.length;\n        var p,\n            q,\n            mid,\n            floor = Math.floor,\n            a,\n            b,\n            t;\n        p = 0;\n        q = n - 1;\n        while (q - p > 1) {\n            mid = floor((p + q) / 2);\n            if (x[mid] <= x0) p = mid;\n            else q = mid;\n        }\n        return this._at(x0, p);\n    }\n    var n = x0.length,\n        i,\n        ret = Array(n);\n    for (i = n - 1; i !== -1; --i) ret[i] = this.at(x0[i]);\n    return ret;\n};\nnumeric.Spline.prototype.diff = function diff() {\n    var x = this.x;\n    var yl = this.yl;\n    var yr = this.yr;\n    var kl = this.kl;\n    var kr = this.kr;\n    var n = yl.length;\n    var i, dx, dy;\n    var zl = kl,\n        zr = kr,\n        pl = Array(n),\n        pr = Array(n);\n    var add = numeric.add,\n        mul = numeric.mul,\n        div = numeric.div,\n        sub = numeric.sub;\n    for (i = n - 1; i !== -1; --i) {\n        dx = x[i + 1] - x[i];\n        dy = sub(yr[i + 1], yl[i]);\n        pl[i] = div(\n            add(mul(dy, 6), mul(kl[i], -4 * dx), mul(kr[i + 1], -2 * dx)),\n            dx * dx\n        );\n        pr[i + 1] = div(\n            add(mul(dy, -6), mul(kl[i], 2 * dx), mul(kr[i + 1], 4 * dx)),\n            dx * dx\n        );\n    }\n    return new numeric.Spline(x, zl, zr, pl, pr);\n};\nnumeric.Spline.prototype.roots = function roots() {\n    function sqr(x) {\n        return x * x;\n    }\n    function heval(y0, y1, k0, k1, x) {\n        var A = k0 * 2 - (y1 - y0);\n        var B = -k1 * 2 + (y1 - y0);\n        var t = (x + 1) * 0.5;\n        var s = t * (1 - t);\n        return (1 - t) * y0 + t * y1 + A * s * (1 - t) + B * s * t;\n    }\n    var ret = [];\n    var x = this.x,\n        yl = this.yl,\n        yr = this.yr,\n        kl = this.kl,\n        kr = this.kr;\n    if (typeof yl[0] === 'number') {\n        yl = [yl];\n        yr = [yr];\n        kl = [kl];\n        kr = [kr];\n    }\n    var m = yl.length,\n        n = x.length - 1,\n        i,\n        j,\n        k,\n        y,\n        s,\n        t;\n    var ai,\n        bi,\n        ci,\n        di,\n        ret = Array(m),\n        ri,\n        k0,\n        k1,\n        y0,\n        y1,\n        A,\n        B,\n        D,\n        dx,\n        cx,\n        stops,\n        z0,\n        z1,\n        zm,\n        t0,\n        t1,\n        tm;\n    var sqrt = Math.sqrt;\n    for (i = 0; i !== m; ++i) {\n        ai = yl[i];\n        bi = yr[i];\n        ci = kl[i];\n        di = kr[i];\n        ri = [];\n        for (j = 0; j !== n; j++) {\n            if (j > 0 && bi[j] * ai[j] < 0) ri.push(x[j]);\n            dx = x[j + 1] - x[j];\n            cx = x[j];\n            y0 = ai[j];\n            y1 = bi[j + 1];\n            k0 = ci[j] / dx;\n            k1 = di[j + 1] / dx;\n            D = sqr(k0 - k1 + 3 * (y0 - y1)) + 12 * k1 * y0;\n            A = k1 + 3 * y0 + 2 * k0 - 3 * y1;\n            B = 3 * (k1 + k0 + 2 * (y0 - y1));\n            if (D <= 0) {\n                z0 = A / B;\n                if (z0 > x[j] && z0 < x[j + 1]) stops = [x[j], z0, x[j + 1]];\n                else stops = [x[j], x[j + 1]];\n            } else {\n                z0 = (A - sqrt(D)) / B;\n                z1 = (A + sqrt(D)) / B;\n                stops = [x[j]];\n                if (z0 > x[j] && z0 < x[j + 1]) stops.push(z0);\n                if (z1 > x[j] && z1 < x[j + 1]) stops.push(z1);\n                stops.push(x[j + 1]);\n            }\n            t0 = stops[0];\n            z0 = this._at(t0, j);\n            for (k = 0; k < stops.length - 1; k++) {\n                t1 = stops[k + 1];\n                z1 = this._at(t1, j);\n                if (z0 === 0) {\n                    ri.push(t0);\n                    t0 = t1;\n                    z0 = z1;\n                    continue;\n                }\n                if (z1 === 0 || z0 * z1 > 0) {\n                    t0 = t1;\n                    z0 = z1;\n                    continue;\n                }\n                var side = 0;\n                while (1) {\n                    tm = (z0 * t1 - z1 * t0) / (z0 - z1);\n                    if (tm <= t0 || tm >= t1) {\n                        break;\n                    }\n                    zm = this._at(tm, j);\n                    if (zm * z1 > 0) {\n                        t1 = tm;\n                        z1 = zm;\n                        if (side === -1) z0 *= 0.5;\n                        side = -1;\n                    } else if (zm * z0 > 0) {\n                        t0 = tm;\n                        z0 = zm;\n                        if (side === 1) z1 *= 0.5;\n                        side = 1;\n                    } else break;\n                }\n                ri.push(tm);\n                t0 = stops[k + 1];\n                z0 = this._at(t0, j);\n            }\n            if (z1 === 0) ri.push(t1);\n        }\n        ret[i] = ri;\n    }\n    if (typeof this.yl[0] === 'number') return ret[0];\n    return ret;\n};\nnumeric.spline = function spline(x, y, k1, kn) {\n    var n = x.length,\n        b = [],\n        dx = [],\n        dy = [];\n    var i;\n    var sub = numeric.sub,\n        mul = numeric.mul,\n        add = numeric.add;\n    for (i = n - 2; i >= 0; i--) {\n        dx[i] = x[i + 1] - x[i];\n        dy[i] = sub(y[i + 1], y[i]);\n    }\n    if (typeof k1 === 'string' || typeof kn === 'string') {\n        k1 = kn = 'periodic';\n    }\n    // Build sparse tridiagonal system\n    var T = [[], [], []];\n    switch (typeof k1) {\n        case 'undefined':\n            b[0] = mul(3 / (dx[0] * dx[0]), dy[0]);\n            T[0].push(0, 0);\n            T[1].push(0, 1);\n            T[2].push(2 / dx[0], 1 / dx[0]);\n            break;\n        case 'string':\n            b[0] = add(\n                mul(3 / (dx[n - 2] * dx[n - 2]), dy[n - 2]),\n                mul(3 / (dx[0] * dx[0]), dy[0])\n            );\n            T[0].push(0, 0, 0);\n            T[1].push(n - 2, 0, 1);\n            T[2].push(1 / dx[n - 2], 2 / dx[n - 2] + 2 / dx[0], 1 / dx[0]);\n            break;\n        default:\n            b[0] = k1;\n            T[0].push(0);\n            T[1].push(0);\n            T[2].push(1);\n            break;\n    }\n    for (i = 1; i < n - 1; i++) {\n        b[i] = add(\n            mul(3 / (dx[i - 1] * dx[i - 1]), dy[i - 1]),\n            mul(3 / (dx[i] * dx[i]), dy[i])\n        );\n        T[0].push(i, i, i);\n        T[1].push(i - 1, i, i + 1);\n        T[2].push(1 / dx[i - 1], 2 / dx[i - 1] + 2 / dx[i], 1 / dx[i]);\n    }\n    switch (typeof kn) {\n        case 'undefined':\n            b[n - 1] = mul(3 / (dx[n - 2] * dx[n - 2]), dy[n - 2]);\n            T[0].push(n - 1, n - 1);\n            T[1].push(n - 2, n - 1);\n            T[2].push(1 / dx[n - 2], 2 / dx[n - 2]);\n            break;\n        case 'string':\n            T[1][T[1].length - 1] = 0;\n            break;\n        default:\n            b[n - 1] = kn;\n            T[0].push(n - 1);\n            T[1].push(n - 1);\n            T[2].push(1);\n            break;\n    }\n    if (typeof b[0] !== 'number') b = numeric.transpose(b);\n    else b = [b];\n    var k = Array(b.length);\n    if (typeof k1 === 'string') {\n        for (i = k.length - 1; i !== -1; --i) {\n            k[i] = numeric.ccsLUPSolve(\n                numeric.ccsLUP(numeric.ccsScatter(T)),\n                b[i]\n            );\n            k[i][n - 1] = k[i][0];\n        }\n    } else {\n        for (i = k.length - 1; i !== -1; --i) {\n            k[i] = numeric.cLUsolve(numeric.cLU(T), b[i]);\n        }\n    }\n    if (typeof y[0] === 'number') k = k[0];\n    else k = numeric.transpose(k);\n    return new numeric.Spline(x, y, y, k, k);\n};\n\n// 8. FFT\nnumeric.fftpow2 = function fftpow2(x, y) {\n    var n = x.length;\n    if (n === 1) return;\n    var cos = Math.cos,\n        sin = Math.sin,\n        i,\n        j;\n    var xe = Array(n / 2),\n        ye = Array(n / 2),\n        xo = Array(n / 2),\n        yo = Array(n / 2);\n    j = n / 2;\n    for (i = n - 1; i !== -1; --i) {\n        --j;\n        xo[j] = x[i];\n        yo[j] = y[i];\n        --i;\n        xe[j] = x[i];\n        ye[j] = y[i];\n    }\n    fftpow2(xe, ye);\n    fftpow2(xo, yo);\n    j = n / 2;\n    var t,\n        k = -6.2831853071795864769252867665590057683943387987502116419 / n,\n        ci,\n        si;\n    for (i = n - 1; i !== -1; --i) {\n        --j;\n        if (j === -1) j = n / 2 - 1;\n        t = k * i;\n        ci = cos(t);\n        si = sin(t);\n        x[i] = xe[j] + ci * xo[j] - si * yo[j];\n        y[i] = ye[j] + ci * yo[j] + si * xo[j];\n    }\n};\nnumeric._ifftpow2 = function _ifftpow2(x, y) {\n    var n = x.length;\n    if (n === 1) return;\n    var cos = Math.cos,\n        sin = Math.sin,\n        i,\n        j;\n    var xe = Array(n / 2),\n        ye = Array(n / 2),\n        xo = Array(n / 2),\n        yo = Array(n / 2);\n    j = n / 2;\n    for (i = n - 1; i !== -1; --i) {\n        --j;\n        xo[j] = x[i];\n        yo[j] = y[i];\n        --i;\n        xe[j] = x[i];\n        ye[j] = y[i];\n    }\n    _ifftpow2(xe, ye);\n    _ifftpow2(xo, yo);\n    j = n / 2;\n    var t,\n        k = 6.2831853071795864769252867665590057683943387987502116419 / n,\n        ci,\n        si;\n    for (i = n - 1; i !== -1; --i) {\n        --j;\n        if (j === -1) j = n / 2 - 1;\n        t = k * i;\n        ci = cos(t);\n        si = sin(t);\n        x[i] = xe[j] + ci * xo[j] - si * yo[j];\n        y[i] = ye[j] + ci * yo[j] + si * xo[j];\n    }\n};\nnumeric.ifftpow2 = function ifftpow2(x, y) {\n    numeric._ifftpow2(x, y);\n    numeric.diveq(x, x.length);\n    numeric.diveq(y, y.length);\n};\nnumeric.convpow2 = function convpow2(ax, ay, bx, by) {\n    numeric.fftpow2(ax, ay);\n    numeric.fftpow2(bx, by);\n    var i,\n        n = ax.length,\n        axi,\n        bxi,\n        ayi,\n        byi;\n    for (i = n - 1; i !== -1; --i) {\n        axi = ax[i];\n        ayi = ay[i];\n        bxi = bx[i];\n        byi = by[i];\n        ax[i] = axi * bxi - ayi * byi;\n        ay[i] = axi * byi + ayi * bxi;\n    }\n    numeric.ifftpow2(ax, ay);\n};\nnumeric.T.prototype.fft = function fft() {\n    var x = this.x,\n        y = this.y;\n    var n = x.length,\n        log = Math.log,\n        log2 = log(2),\n        p = Math.ceil(log(2 * n - 1) / log2),\n        m = Math.pow(2, p);\n    var cx = numeric.rep([m], 0),\n        cy = numeric.rep([m], 0),\n        cos = Math.cos,\n        sin = Math.sin;\n    var k,\n        c = -3.14159265358979323846264338327950288419716939937510582 / n,\n        t;\n    var a = numeric.rep([m], 0),\n        b = numeric.rep([m], 0),\n        nhalf = Math.floor(n / 2);\n    for (k = 0; k < n; k++) a[k] = x[k];\n    if (typeof y !== 'undefined') for (k = 0; k < n; k++) b[k] = y[k];\n    cx[0] = 1;\n    for (k = 1; k <= m / 2; k++) {\n        t = c * k * k;\n        cx[k] = cos(t);\n        cy[k] = sin(t);\n        cx[m - k] = cos(t);\n        cy[m - k] = sin(t);\n    }\n    var X = new numeric.T(a, b),\n        Y = new numeric.T(cx, cy);\n    X = X.mul(Y);\n    numeric.convpow2(X.x, X.y, numeric.clone(Y.x), numeric.neg(Y.y));\n    X = X.mul(Y);\n    X.x.length = n;\n    X.y.length = n;\n    return X;\n};\nnumeric.T.prototype.ifft = function ifft() {\n    var x = this.x,\n        y = this.y;\n    var n = x.length,\n        log = Math.log,\n        log2 = log(2),\n        p = Math.ceil(log(2 * n - 1) / log2),\n        m = Math.pow(2, p);\n    var cx = numeric.rep([m], 0),\n        cy = numeric.rep([m], 0),\n        cos = Math.cos,\n        sin = Math.sin;\n    var k,\n        c = 3.14159265358979323846264338327950288419716939937510582 / n,\n        t;\n    var a = numeric.rep([m], 0),\n        b = numeric.rep([m], 0),\n        nhalf = Math.floor(n / 2);\n    for (k = 0; k < n; k++) a[k] = x[k];\n    if (typeof y !== 'undefined') for (k = 0; k < n; k++) b[k] = y[k];\n    cx[0] = 1;\n    for (k = 1; k <= m / 2; k++) {\n        t = c * k * k;\n        cx[k] = cos(t);\n        cy[k] = sin(t);\n        cx[m - k] = cos(t);\n        cy[m - k] = sin(t);\n    }\n    var X = new numeric.T(a, b),\n        Y = new numeric.T(cx, cy);\n    X = X.mul(Y);\n    numeric.convpow2(X.x, X.y, numeric.clone(Y.x), numeric.neg(Y.y));\n    X = X.mul(Y);\n    X.x.length = n;\n    X.y.length = n;\n    return X.div(n);\n};\n\n//9. Unconstrained optimization\nnumeric.gradient = function gradient(f, x) {\n    var n = x.length;\n    var f0 = f(x);\n    if (isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');\n    var max = Math.max;\n    var i,\n        x0 = numeric.clone(x),\n        f1,\n        f2,\n        J = Array(n);\n    var div = numeric.div,\n        sub = numeric.sub,\n        errest,\n        roundoff,\n        max = Math.max,\n        eps = 1e-3,\n        abs = Math.abs,\n        min = Math.min;\n    var t0,\n        t1,\n        t2,\n        it = 0,\n        d1,\n        d2,\n        N;\n    for (i = 0; i < n; i++) {\n        var h = max(1e-6 * f0, 1e-8);\n        while (1) {\n            ++it;\n            if (it > 20) {\n                throw new Error('Numerical gradient fails');\n            }\n            x0[i] = x[i] + h;\n            f1 = f(x0);\n            x0[i] = x[i] - h;\n            f2 = f(x0);\n            x0[i] = x[i];\n            if (isNaN(f1) || isNaN(f2)) {\n                h /= 16;\n                continue;\n            }\n            J[i] = (f1 - f2) / (2 * h);\n            t0 = x[i] - h;\n            t1 = x[i];\n            t2 = x[i] + h;\n            d1 = (f1 - f0) / h;\n            d2 = (f0 - f2) / h;\n            N = max(\n                abs(J[i]),\n                abs(f0),\n                abs(f1),\n                abs(f2),\n                abs(t0),\n                abs(t1),\n                abs(t2),\n                1e-8\n            );\n            errest = min(\n                max(abs(d1 - J[i]), abs(d2 - J[i]), abs(d1 - d2)) / N,\n                h / N\n            );\n            if (errest > eps) {\n                h /= 16;\n            } else break;\n        }\n    }\n    return J;\n};\n\nnumeric.uncmin = function uncmin(\n    f,\n    x0,\n    tol,\n    gradient,\n    maxit,\n    callback,\n    options\n) {\n    var grad = numeric.gradient;\n    if (typeof options === 'undefined') {\n        options = {};\n    }\n    if (typeof tol === 'undefined') {\n        tol = 1e-8;\n    }\n    if (typeof gradient === 'undefined') {\n        gradient = function (x) {\n            return grad(f, x);\n        };\n    }\n    if (typeof maxit === 'undefined') maxit = 1000;\n    x0 = numeric.clone(x0);\n    var n = x0.length;\n    var f0 = f(x0),\n        f1,\n        df0;\n    if (isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');\n    var max = Math.max,\n        norm2 = numeric.norm2;\n    tol = max(tol, numeric.epsilon);\n    var step,\n        g0,\n        g1,\n        H1 = options.Hinv || numeric.identity(n);\n    var dot = numeric.dot,\n        inv = numeric.inv,\n        sub = numeric.sub,\n        add = numeric.add,\n        ten = numeric.tensor,\n        div = numeric.div,\n        mul = numeric.mul;\n    var all = numeric.all,\n        isfinite = numeric.isFinite,\n        neg = numeric.neg;\n    var it = 0,\n        i,\n        s,\n        x1,\n        y,\n        Hy,\n        Hs,\n        ys,\n        i0,\n        t,\n        nstep,\n        t1,\n        t2;\n    var msg = '';\n    g0 = gradient(x0);\n    while (it < maxit) {\n        if (typeof callback === 'function') {\n            if (callback(it, x0, f0, g0, H1)) {\n                msg = 'Callback returned true';\n                break;\n            }\n        }\n        if (!all(isfinite(g0))) {\n            msg = 'Gradient has Infinity or NaN';\n            break;\n        }\n        step = neg(dot(H1, g0));\n        if (!all(isfinite(step))) {\n            msg = 'Search direction has Infinity or NaN';\n            break;\n        }\n        nstep = norm2(step);\n        if (nstep < tol) {\n            msg = 'Newton step smaller than tol';\n            break;\n        }\n        t = 1;\n        df0 = dot(g0, step);\n        // line search\n        x1 = x0;\n        while (it < maxit) {\n            if (t * nstep < tol) {\n                break;\n            }\n            s = mul(step, t);\n            x1 = add(x0, s);\n            f1 = f(x1);\n            if (f1 - f0 >= 0.1 * t * df0 || isNaN(f1)) {\n                t *= 0.5;\n                ++it;\n                continue;\n            }\n            break;\n        }\n        if (t * nstep < tol) {\n            msg = 'Line search step size smaller than tol';\n            break;\n        }\n        if (it === maxit) {\n            msg = 'maxit reached during line search';\n            break;\n        }\n        g1 = gradient(x1);\n        y = sub(g1, g0);\n        ys = dot(y, s);\n        Hy = dot(H1, y);\n        H1 = sub(\n            add(H1, mul((ys + dot(y, Hy)) / (ys * ys), ten(s, s))),\n            div(add(ten(Hy, s), ten(s, Hy)), ys)\n        );\n        x0 = x1;\n        f0 = f1;\n        g0 = g1;\n        ++it;\n    }\n    return {\n        solution: x0,\n        f: f0,\n        gradient: g0,\n        invHessian: H1,\n        iterations: it,\n        message: msg,\n    };\n};\n\n// 10. Ode solver (Dormand-Prince)\nnumeric.Dopri = function Dopri(x, y, f, ymid, iterations, msg, events) {\n    this.x = x;\n    this.y = y;\n    this.f = f;\n    this.ymid = ymid;\n    this.iterations = iterations;\n    this.events = events;\n    this.message = msg;\n};\nnumeric.Dopri.prototype._at = function _at(xi, j) {\n    function sqr(x) {\n        return x * x;\n    }\n    var sol = this;\n    var xs = sol.x;\n    var ys = sol.y;\n    var k1 = sol.f;\n    var ymid = sol.ymid;\n    var n = xs.length;\n    var x0, x1, xh, y0, y1, yh, xi;\n    var floor = Math.floor,\n        h;\n    var c = 0.5;\n    var add = numeric.add,\n        mul = numeric.mul,\n        sub = numeric.sub,\n        p,\n        q,\n        w;\n    x0 = xs[j];\n    x1 = xs[j + 1];\n    y0 = ys[j];\n    y1 = ys[j + 1];\n    h = x1 - x0;\n    xh = x0 + c * h;\n    yh = ymid[j];\n    p = sub(k1[j], mul(y0, 1 / (x0 - xh) + 2 / (x0 - x1)));\n    q = sub(k1[j + 1], mul(y1, 1 / (x1 - xh) + 2 / (x1 - x0)));\n    w = [\n        (sqr(xi - x1) * (xi - xh)) / sqr(x0 - x1) / (x0 - xh),\n        (sqr(xi - x0) * sqr(xi - x1)) / sqr(x0 - xh) / sqr(x1 - xh),\n        (sqr(xi - x0) * (xi - xh)) / sqr(x1 - x0) / (x1 - xh),\n        ((xi - x0) * sqr(xi - x1) * (xi - xh)) / sqr(x0 - x1) / (x0 - xh),\n        ((xi - x1) * sqr(xi - x0) * (xi - xh)) / sqr(x0 - x1) / (x1 - xh),\n    ];\n    return add(\n        add(\n            add(add(mul(y0, w[0]), mul(yh, w[1])), mul(y1, w[2])),\n            mul(p, w[3])\n        ),\n        mul(q, w[4])\n    );\n};\nnumeric.Dopri.prototype.at = function at(x) {\n    var i,\n        j,\n        k,\n        floor = Math.floor;\n    if (typeof x !== 'number') {\n        var n = x.length,\n            ret = Array(n);\n        for (i = n - 1; i !== -1; --i) {\n            ret[i] = this.at(x[i]);\n        }\n        return ret;\n    }\n    var x0 = this.x;\n    i = 0;\n    j = x0.length - 1;\n    while (j - i > 1) {\n        k = floor(0.5 * (i + j));\n        if (x0[k] <= x) i = k;\n        else j = k;\n    }\n    return this._at(x, i);\n};\n\nnumeric.dopri = function dopri(x0, x1, y0, f, tol, maxit, event) {\n    if (typeof tol === 'undefined') {\n        tol = 1e-6;\n    }\n    if (typeof maxit === 'undefined') {\n        maxit = 1000;\n    }\n    var xs = [x0],\n        ys = [y0],\n        k1 = [f(x0, y0)],\n        k2,\n        k3,\n        k4,\n        k5,\n        k6,\n        k7,\n        ymid = [];\n    var A2 = 1 / 5;\n    var A3 = [3 / 40, 9 / 40];\n    var A4 = [44 / 45, -56 / 15, 32 / 9];\n    var A5 = [19372 / 6561, -25360 / 2187, 64448 / 6561, -212 / 729];\n    var A6 = [9017 / 3168, -355 / 33, 46732 / 5247, 49 / 176, -5103 / 18656];\n    var b = [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84];\n    var bm = [\n        (0.5 * 6025192743) / 30085553152,\n        0,\n        (0.5 * 51252292925) / 65400821598,\n        (0.5 * -2691868925) / 45128329728,\n        (0.5 * 187940372067) / 1594534317056,\n        (0.5 * -1776094331) / 19743644256,\n        (0.5 * 11237099) / 235043384,\n    ];\n    var c = [1 / 5, 3 / 10, 4 / 5, 8 / 9, 1, 1];\n    var e = [\n        -71 / 57600,\n        0,\n        71 / 16695,\n        -71 / 1920,\n        17253 / 339200,\n        -22 / 525,\n        1 / 40,\n    ];\n    var i = 0,\n        er,\n        j;\n    var h = (x1 - x0) / 10;\n    var it = 0;\n    var add = numeric.add,\n        mul = numeric.mul,\n        y1,\n        erinf;\n    var max = Math.max,\n        min = Math.min,\n        abs = Math.abs,\n        norminf = numeric.norminf,\n        pow = Math.pow;\n    var any = numeric.any,\n        lt = numeric.lt,\n        and = numeric.and,\n        sub = numeric.sub;\n    var e0, e1, ev;\n    var ret = new numeric.Dopri(xs, ys, k1, ymid, -1, '');\n    if (typeof event === 'function') e0 = event(x0, y0);\n    while (x0 < x1 && it < maxit) {\n        ++it;\n        if (x0 + h > x1) h = x1 - x0;\n        k2 = f(x0 + c[0] * h, add(y0, mul(A2 * h, k1[i])));\n        k3 = f(\n            x0 + c[1] * h,\n            add(add(y0, mul(A3[0] * h, k1[i])), mul(A3[1] * h, k2))\n        );\n        k4 = f(\n            x0 + c[2] * h,\n            add(\n                add(add(y0, mul(A4[0] * h, k1[i])), mul(A4[1] * h, k2)),\n                mul(A4[2] * h, k3)\n            )\n        );\n        k5 = f(\n            x0 + c[3] * h,\n            add(\n                add(\n                    add(add(y0, mul(A5[0] * h, k1[i])), mul(A5[1] * h, k2)),\n                    mul(A5[2] * h, k3)\n                ),\n                mul(A5[3] * h, k4)\n            )\n        );\n        k6 = f(\n            x0 + c[4] * h,\n            add(\n                add(\n                    add(\n                        add(add(y0, mul(A6[0] * h, k1[i])), mul(A6[1] * h, k2)),\n                        mul(A6[2] * h, k3)\n                    ),\n                    mul(A6[3] * h, k4)\n                ),\n                mul(A6[4] * h, k5)\n            )\n        );\n        y1 = add(\n            add(\n                add(\n                    add(add(y0, mul(k1[i], h * b[0])), mul(k3, h * b[2])),\n                    mul(k4, h * b[3])\n                ),\n                mul(k5, h * b[4])\n            ),\n            mul(k6, h * b[5])\n        );\n        k7 = f(x0 + h, y1);\n        er = add(\n            add(\n                add(\n                    add(\n                        add(mul(k1[i], h * e[0]), mul(k3, h * e[2])),\n                        mul(k4, h * e[3])\n                    ),\n                    mul(k5, h * e[4])\n                ),\n                mul(k6, h * e[5])\n            ),\n            mul(k7, h * e[6])\n        );\n        if (typeof er === 'number') erinf = abs(er);\n        else erinf = norminf(er);\n        if (erinf > tol) {\n            // reject\n            h = 0.2 * h * pow(tol / erinf, 0.25);\n            if (x0 + h === x0) {\n                ret.msg = 'Step size became too small';\n                break;\n            }\n            continue;\n        }\n        ymid[i] = add(\n            add(\n                add(\n                    add(\n                        add(add(y0, mul(k1[i], h * bm[0])), mul(k3, h * bm[2])),\n                        mul(k4, h * bm[3])\n                    ),\n                    mul(k5, h * bm[4])\n                ),\n                mul(k6, h * bm[5])\n            ),\n            mul(k7, h * bm[6])\n        );\n        ++i;\n        xs[i] = x0 + h;\n        ys[i] = y1;\n        k1[i] = k7;\n        if (typeof event === 'function') {\n            var yi,\n                xl = x0,\n                xr = x0 + 0.5 * h,\n                xi;\n            e1 = event(xr, ymid[i - 1]);\n            ev = and(lt(e0, 0), lt(0, e1));\n            if (!any(ev)) {\n                xl = xr;\n                xr = x0 + h;\n                e0 = e1;\n                e1 = event(xr, y1);\n                ev = and(lt(e0, 0), lt(0, e1));\n            }\n            if (any(ev)) {\n                var xc, yc, en, ei;\n                var side = 0,\n                    sl = 1.0,\n                    sr = 1.0;\n                while (1) {\n                    if (typeof e0 === 'number')\n                        xi =\n                            (sr * e1 * xl - sl * e0 * xr) / (sr * e1 - sl * e0);\n                    else {\n                        xi = xr;\n                        for (j = e0.length - 1; j !== -1; --j) {\n                            if (e0[j] < 0 && e1[j] > 0)\n                                xi = min(\n                                    xi,\n                                    (sr * e1[j] * xl - sl * e0[j] * xr) /\n                                        (sr * e1[j] - sl * e0[j])\n                                );\n                        }\n                    }\n                    if (xi <= xl || xi >= xr) break;\n                    yi = ret._at(xi, i - 1);\n                    ei = event(xi, yi);\n                    en = and(lt(e0, 0), lt(0, ei));\n                    if (any(en)) {\n                        xr = xi;\n                        e1 = ei;\n                        ev = en;\n                        sr = 1.0;\n                        if (side === -1) sl *= 0.5;\n                        else sl = 1.0;\n                        side = -1;\n                    } else {\n                        xl = xi;\n                        e0 = ei;\n                        sl = 1.0;\n                        if (side === 1) sr *= 0.5;\n                        else sr = 1.0;\n                        side = 1;\n                    }\n                }\n                y1 = ret._at(0.5 * (x0 + xi), i - 1);\n                ret.f[i] = f(xi, yi);\n                ret.x[i] = xi;\n                ret.y[i] = yi;\n                ret.ymid[i - 1] = y1;\n                ret.events = ev;\n                ret.iterations = it;\n                return ret;\n            }\n        }\n        x0 += h;\n        y0 = y1;\n        e0 = e1;\n        h = min(0.8 * h * pow(tol / erinf, 0.25), 4 * h);\n    }\n    ret.iterations = it;\n    return ret;\n};\n\n// 11. Ax = b\nnumeric.LU = function (A, fast) {\n    fast = fast || false;\n\n    var abs = Math.abs;\n    var i, j, k, absAjk, Akk, Ak, Pk, Ai;\n    var max;\n    var n = A.length,\n        n1 = n - 1;\n    var P = new Array(n);\n    if (!fast) A = numeric.clone(A);\n\n    for (k = 0; k < n; ++k) {\n        Pk = k;\n        Ak = A[k];\n        max = abs(Ak[k]);\n        for (j = k + 1; j < n; ++j) {\n            absAjk = abs(A[j][k]);\n            if (max < absAjk) {\n                max = absAjk;\n                Pk = j;\n            }\n        }\n        P[k] = Pk;\n\n        if (Pk != k) {\n            A[k] = A[Pk];\n            A[Pk] = Ak;\n            Ak = A[k];\n        }\n\n        Akk = Ak[k];\n\n        for (i = k + 1; i < n; ++i) {\n            A[i][k] /= Akk;\n        }\n\n        for (i = k + 1; i < n; ++i) {\n            Ai = A[i];\n            for (j = k + 1; j < n1; ++j) {\n                Ai[j] -= Ai[k] * Ak[j];\n                ++j;\n                Ai[j] -= Ai[k] * Ak[j];\n            }\n            if (j === n1) Ai[j] -= Ai[k] * Ak[j];\n        }\n    }\n\n    return {\n        LU: A,\n        P: P,\n    };\n};\n\nnumeric.LUsolve = function LUsolve(LUP, b) {\n    var i, j;\n    var LU = LUP.LU;\n    var n = LU.length;\n    var x = numeric.clone(b);\n    var P = LUP.P;\n    var Pi, LUi, LUii, tmp;\n\n    for (i = n - 1; i !== -1; --i) x[i] = b[i];\n    for (i = 0; i < n; ++i) {\n        Pi = P[i];\n        if (P[i] !== i) {\n            tmp = x[i];\n            x[i] = x[Pi];\n            x[Pi] = tmp;\n        }\n\n        LUi = LU[i];\n        for (j = 0; j < i; ++j) {\n            x[i] -= x[j] * LUi[j];\n        }\n    }\n\n    for (i = n - 1; i >= 0; --i) {\n        LUi = LU[i];\n        for (j = i + 1; j < n; ++j) {\n            x[i] -= x[j] * LUi[j];\n        }\n\n        x[i] /= LUi[i];\n    }\n\n    return x;\n};\n\nnumeric.solve = function solve(A, b, fast) {\n    return numeric.LUsolve(numeric.LU(A, fast), b);\n};\n\n// 12. Linear programming\nnumeric.echelonize = function echelonize(A) {\n    var s = numeric.dim(A),\n        m = s[0],\n        n = s[1];\n    var I = numeric.identity(m);\n    var P = Array(m);\n    var i, j, k, l, Ai, Ii, Z, a;\n    var abs = Math.abs;\n    var diveq = numeric.diveq;\n    A = numeric.clone(A);\n    for (i = 0; i < m; ++i) {\n        k = 0;\n        Ai = A[i];\n        Ii = I[i];\n        for (j = 1; j < n; ++j) if (abs(Ai[k]) < abs(Ai[j])) k = j;\n        P[i] = k;\n        diveq(Ii, Ai[k]);\n        diveq(Ai, Ai[k]);\n        for (j = 0; j < m; ++j)\n            if (j !== i) {\n                Z = A[j];\n                a = Z[k];\n                for (l = n - 1; l !== -1; --l) Z[l] -= Ai[l] * a;\n                Z = I[j];\n                for (l = m - 1; l !== -1; --l) Z[l] -= Ii[l] * a;\n            }\n    }\n    return { I: I, A: A, P: P };\n};\n\nnumeric.__solveLP = function __solveLP(c, A, b, tol, maxit, x, flag) {\n    var sum = numeric.sum,\n        log = numeric.log,\n        mul = numeric.mul,\n        sub = numeric.sub,\n        dot = numeric.dot,\n        div = numeric.div,\n        add = numeric.add;\n    var m = c.length,\n        n = b.length,\n        y;\n    var unbounded = false,\n        cb,\n        i0 = 0;\n    var alpha = 1.0;\n    var f0,\n        df0,\n        AT = numeric.transpose(A),\n        svd = numeric.svd,\n        transpose = numeric.transpose,\n        leq = numeric.leq,\n        sqrt = Math.sqrt,\n        abs = Math.abs;\n    var muleq = numeric.muleq;\n    var norm = numeric.norminf,\n        any = numeric.any,\n        min = Math.min;\n    var all = numeric.all,\n        gt = numeric.gt;\n    var p = Array(m),\n        A0 = Array(n),\n        e = numeric.rep([n], 1),\n        H;\n    var solve = numeric.solve,\n        z = sub(b, dot(A, x)),\n        count;\n    var dotcc = dot(c, c);\n    var g;\n    for (count = i0; count < maxit; ++count) {\n        var i, j, d;\n        for (i = n - 1; i !== -1; --i) A0[i] = div(A[i], z[i]);\n        var A1 = transpose(A0);\n        for (i = m - 1; i !== -1; --i) p[i] = /*x[i]+*/ sum(A1[i]);\n        alpha = 0.25 * abs(dotcc / dot(c, p));\n        var a1 = 100 * sqrt(dotcc / dot(p, p));\n        if (!isFinite(alpha) || alpha > a1) alpha = a1;\n        g = add(c, mul(alpha, p));\n        H = dot(A1, A0);\n        for (i = m - 1; i !== -1; --i) H[i][i] += 1;\n        d = solve(H, div(g, alpha), true);\n        var t0 = div(z, dot(A, d));\n        var t = 1.0;\n        for (i = n - 1; i !== -1; --i)\n            if (t0[i] < 0) t = min(t, -0.999 * t0[i]);\n        y = sub(x, mul(d, t));\n        z = sub(b, dot(A, y));\n        if (!all(gt(z, 0)))\n            return { solution: x, message: '', iterations: count };\n        x = y;\n        if (alpha < tol) return { solution: y, message: '', iterations: count };\n        if (flag) {\n            var s = dot(c, g),\n                Ag = dot(A, g);\n            unbounded = true;\n            for (i = n - 1; i !== -1; --i)\n                if (s * Ag[i] < 0) {\n                    unbounded = false;\n                    break;\n                }\n        } else {\n            if (x[m - 1] >= 0) unbounded = false;\n            else unbounded = true;\n        }\n        if (unbounded)\n            return { solution: y, message: 'Unbounded', iterations: count };\n    }\n    return {\n        solution: x,\n        message: 'maximum iteration count exceeded',\n        iterations: count,\n    };\n};\n\nnumeric._solveLP = function _solveLP(c, A, b, tol, maxit) {\n    var m = c.length,\n        n = b.length,\n        y;\n    var sum = numeric.sum,\n        log = numeric.log,\n        mul = numeric.mul,\n        sub = numeric.sub,\n        dot = numeric.dot,\n        div = numeric.div,\n        add = numeric.add;\n    var c0 = numeric.rep([m], 0).concat([1]);\n    var J = numeric.rep([n, 1], -1);\n    var A0 = numeric.blockMatrix([[A, J]]);\n    var b0 = b;\n    var y = numeric\n        .rep([m], 0)\n        .concat(Math.max(0, numeric.sup(numeric.neg(b))) + 1);\n    var x0 = numeric.__solveLP(c0, A0, b0, tol, maxit, y, false);\n    var x = numeric.clone(x0.solution);\n    x.length = m;\n    var foo = numeric.inf(sub(b, dot(A, x)));\n    if (foo < 0) {\n        return {\n            solution: NaN,\n            message: 'Infeasible',\n            iterations: x0.iterations,\n        };\n    }\n    var ret = numeric.__solveLP(c, A, b, tol, maxit - x0.iterations, x, true);\n    ret.iterations += x0.iterations;\n    return ret;\n};\n\nnumeric.solveLP = function solveLP(c, A, b, Aeq, beq, tol, maxit) {\n    if (typeof maxit === 'undefined') maxit = 1000;\n    if (typeof tol === 'undefined') tol = numeric.epsilon;\n    if (typeof Aeq === 'undefined')\n        return numeric._solveLP(c, A, b, tol, maxit);\n    var m = Aeq.length,\n        n = Aeq[0].length,\n        o = A.length;\n    var B = numeric.echelonize(Aeq);\n    var flags = numeric.rep([n], 0);\n    var P = B.P;\n    var Q = [];\n    var i;\n    for (i = P.length - 1; i !== -1; --i) flags[P[i]] = 1;\n    for (i = n - 1; i !== -1; --i) if (flags[i] === 0) Q.push(i);\n    var g = numeric.getRange;\n    var I = numeric.linspace(0, m - 1),\n        J = numeric.linspace(0, o - 1);\n    var Aeq2 = g(Aeq, I, Q),\n        A1 = g(A, J, P),\n        A2 = g(A, J, Q),\n        dot = numeric.dot,\n        sub = numeric.sub;\n    var A3 = dot(A1, B.I);\n    var A4 = sub(A2, dot(A3, Aeq2)),\n        b4 = sub(b, dot(A3, beq));\n    var c1 = Array(P.length),\n        c2 = Array(Q.length);\n    for (i = P.length - 1; i !== -1; --i) c1[i] = c[P[i]];\n    for (i = Q.length - 1; i !== -1; --i) c2[i] = c[Q[i]];\n    var c4 = sub(c2, dot(c1, dot(B.I, Aeq2)));\n    var S = numeric._solveLP(c4, A4, b4, tol, maxit);\n    var x2 = S.solution;\n    if (x2 !== x2) return S;\n    var x1 = dot(B.I, sub(beq, dot(Aeq2, x2)));\n    var x = Array(c.length);\n    for (i = P.length - 1; i !== -1; --i) x[P[i]] = x1[i];\n    for (i = Q.length - 1; i !== -1; --i) x[Q[i]] = x2[i];\n    return { solution: x, message: S.message, iterations: S.iterations };\n};\n\nnumeric.MPStoLP = function MPStoLP(MPS) {\n    if (MPS instanceof String) {\n        MPS.split('\\n');\n    }\n    var state = 0;\n    var states = [\n        'Initial state',\n        'NAME',\n        'ROWS',\n        'COLUMNS',\n        'RHS',\n        'BOUNDS',\n        'ENDATA',\n    ];\n    var n = MPS.length;\n    var i,\n        j,\n        z,\n        N = 0,\n        rows = {},\n        sign = [],\n        rl = 0,\n        vars = {},\n        nv = 0;\n    var name;\n    var c = [],\n        A = [],\n        b = [];\n    function err(e) {\n        throw new Error(\n            'MPStoLP: ' +\n                e +\n                '\\nLine ' +\n                i +\n                ': ' +\n                MPS[i] +\n                '\\nCurrent state: ' +\n                states[state] +\n                '\\n'\n        );\n    }\n    for (i = 0; i < n; ++i) {\n        z = MPS[i];\n        var w0 = z.match(/\\S*/g);\n        var w = [];\n        for (j = 0; j < w0.length; ++j) if (w0[j] !== '') w.push(w0[j]);\n        if (w.length === 0) continue;\n        for (j = 0; j < states.length; ++j)\n            if (z.substr(0, states[j].length) === states[j]) break;\n        if (j < states.length) {\n            state = j;\n            if (j === 1) {\n                name = w[1];\n            }\n            if (j === 6)\n                return {\n                    name: name,\n                    c: c,\n                    A: numeric.transpose(A),\n                    b: b,\n                    rows: rows,\n                    vars: vars,\n                };\n            continue;\n        }\n        switch (state) {\n            case 0:\n            case 1:\n                err('Unexpected line');\n            case 2:\n                switch (w[0]) {\n                    case 'N':\n                        if (N === 0) N = w[1];\n                        else err('Two or more N rows');\n                        break;\n                    case 'L':\n                        rows[w[1]] = rl;\n                        sign[rl] = 1;\n                        b[rl] = 0;\n                        ++rl;\n                        break;\n                    case 'G':\n                        rows[w[1]] = rl;\n                        sign[rl] = -1;\n                        b[rl] = 0;\n                        ++rl;\n                        break;\n                    case 'E':\n                        rows[w[1]] = rl;\n                        sign[rl] = 0;\n                        b[rl] = 0;\n                        ++rl;\n                        break;\n                    default:\n                        err('Parse error ' + numeric.prettyPrint(w));\n                }\n                break;\n            case 3:\n                if (!vars.hasOwnProperty(w[0])) {\n                    vars[w[0]] = nv;\n                    c[nv] = 0;\n                    A[nv] = numeric.rep([rl], 0);\n                    ++nv;\n                }\n                var p = vars[w[0]];\n                for (j = 1; j < w.length; j += 2) {\n                    if (w[j] === N) {\n                        c[p] = parseFloat(w[j + 1]);\n                        continue;\n                    }\n                    var q = rows[w[j]];\n                    A[p][q] = (sign[q] < 0 ? -1 : 1) * parseFloat(w[j + 1]);\n                }\n                break;\n            case 4:\n                for (j = 1; j < w.length; j += 2)\n                    b[rows[w[j]]] =\n                        (sign[rows[w[j]]] < 0 ? -1 : 1) * parseFloat(w[j + 1]);\n                break;\n            case 5:\n                /*FIXME*/ break;\n            case 6:\n                err('Internal error');\n        }\n    }\n    err('Reached end of file without ENDATA');\n};\n// seedrandom.js version 2.0.\n// Author: David Bau 4/2/2011\n//\n// Defines a method Math.seedrandom() that, when called, substitutes\n// an explicitly seeded RC4-based algorithm for Math.random().  Also\n// supports automatic seeding from local or network sources of entropy.\n//\n// Usage:\n//\n//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>\n//\n//   Math.seedrandom('yipee'); Sets Math.random to a function that is\n//                             initialized using the given explicit seed.\n//\n//   Math.seedrandom();        Sets Math.random to a function that is\n//                             seeded using the current time, dom state,\n//                             and other accumulated local entropy.\n//                             The generated seed string is returned.\n//\n//   Math.seedrandom('yowza', true);\n//                             Seeds using the given explicit seed mixed\n//                             together with accumulated entropy.\n//\n//   <script src=\"http://bit.ly/srandom-512\"></script>\n//                             Seeds using physical random bits downloaded\n//                             from random.org.\n//\n//   <script src=\"https://jsonlib.appspot.com/urandom?callback=Math.seedrandom\">\n//   </script>                 Seeds using urandom bits from call.jsonlib.com,\n//                             which is faster than random.org.\n//\n// Examples:\n//\n//   Math.seedrandom(\"hello\");            // Use \"hello\" as the seed.\n//   document.write(Math.random());       // Always 0.5463663768140734\n//   document.write(Math.random());       // Always 0.43973793770592234\n//   var rng1 = Math.random;              // Remember the current prng.\n//\n//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.\n//   document.write(Math.random());       // Pretty much unpredictable.\n//\n//   Math.random = rng1;                  // Continue \"hello\" prng sequence.\n//   document.write(Math.random());       // Always 0.554769432473455\n//\n//   Math.seedrandom(autoseed);           // Restart at the previous seed.\n//   document.write(Math.random());       // Repeat the 'unpredictable' value.\n//\n// Notes:\n//\n// Each time seedrandom('arg') is called, entropy from the passed seed\n// is accumulated in a pool to help generate future seeds for the\n// zero-argument form of Math.seedrandom, so entropy can be injected over\n// time by calling seedrandom with explicit data repeatedly.\n//\n// On speed - This javascript implementation of Math.random() is about\n// 3-10x slower than the built-in Math.random() because it is not native\n// code, but this is typically fast enough anyway.  Seeding is more expensive,\n// especially if you use auto-seeding.  Some details (timings on Chrome 4):\n//\n// Our Math.random()            - avg less than 0.002 milliseconds per call\n// seedrandom('explicit')       - avg less than 0.5 milliseconds per call\n// seedrandom('explicit', true) - avg less than 2 milliseconds per call\n// seedrandom()                 - avg about 38 milliseconds per call\n//\n// LICENSE (BSD):\n//\n// Copyright 2010 David Bau, all rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//   1. Redistributions of source code must retain the above copyright\n//      notice, this list of conditions and the following disclaimer.\n//\n//   2. Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n//\n//   3. Neither the name of this module nor the names of its contributors may\n//      be used to endorse or promote products derived from this software\n//      without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n/**\n * All code is in an anonymous closure to keep the global namespace clean.\n *\n * @param {number=} overflow\n * @param {number=} startdenom\n */\n\n// Patched by Seb so that seedrandom.js does not pollute the Math object.\n// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%\n// slower.\nnumeric.seedrandom = { pow: Math.pow, random: Math.random };\n(function (pool, math, width, chunks, significance, overflow, startdenom) {\n    //\n    // seedrandom()\n    // This is the seedrandom function described above.\n    //\n    math['seedrandom'] = function seedrandom(seed, use_entropy) {\n        var key = [];\n        var arc4;\n\n        // Flatten the seed string or build one from local entropy if needed.\n        seed = mixkey(\n            flatten(\n                use_entropy\n                    ? [seed, pool]\n                    : arguments.length\n                    ? seed\n                    : [new Date().getTime(), pool, window],\n                3\n            ),\n            key\n        );\n\n        // Use the seed to initialize an ARC4 generator.\n        arc4 = new ARC4(key);\n\n        // Mix the randomness into accumulated entropy.\n        mixkey(arc4.S, pool);\n\n        // Override Math.random\n\n        // This function returns a random double in [0, 1) that contains\n        // randomness in every bit of the mantissa of the IEEE 754 value.\n\n        math['random'] = function random() {\n            // Closure to return a random double:\n            var n = arc4.g(chunks); // Start with a numerator n < 2 ^ 48\n            var d = startdenom; //   and denominator d = 2 ^ 48.\n            var x = 0; //   and no 'extra last byte'.\n            while (n < significance) {\n                // Fill up all significant digits by\n                n = (n + x) * width; //   shifting numerator and\n                d *= width; //   denominator and generating a\n                x = arc4.g(1); //   new least-significant-byte.\n            }\n            while (n >= overflow) {\n                // To avoid rounding up, before adding\n                n /= 2; //   last byte, shift everything\n                d /= 2; //   right using integer math until\n                x >>>= 1; //   we have exactly the desired bits.\n            }\n            return (n + x) / d; // Form the number within [0, 1).\n        };\n\n        // Return the seed that was used\n        return seed;\n    };\n\n    //\n    // ARC4\n    //\n    // An ARC4 implementation.  The constructor takes a key in the form of\n    // an array of at most (width) integers that should be 0 <= x < (width).\n    //\n    // The g(count) method returns a pseudorandom integer that concatenates\n    // the next (count) outputs from ARC4.  Its return value is a number x\n    // that is in the range 0 <= x < (width ^ count).\n    //\n    /** @constructor */\n    function ARC4(key) {\n        var t,\n            u,\n            me = this,\n            keylen = key.length;\n        var i = 0,\n            j = (me.i = me.j = me.m = 0);\n        me.S = [];\n        me.c = [];\n\n        // The empty key [] is treated as [0].\n        if (!keylen) {\n            key = [keylen++];\n        }\n\n        // Set up S using the standard key scheduling algorithm.\n        while (i < width) {\n            me.S[i] = i++;\n        }\n        for (i = 0; i < width; i++) {\n            t = me.S[i];\n            j = lowbits(j + t + key[i % keylen]);\n            u = me.S[j];\n            me.S[i] = u;\n            me.S[j] = t;\n        }\n\n        // The \"g\" method returns the next (count) outputs as one number.\n        me.g = function getnext(count) {\n            var s = me.S;\n            var i = lowbits(me.i + 1);\n            var t = s[i];\n            var j = lowbits(me.j + t);\n            var u = s[j];\n            s[i] = u;\n            s[j] = t;\n            var r = s[lowbits(t + u)];\n            while (--count) {\n                i = lowbits(i + 1);\n                t = s[i];\n                j = lowbits(j + t);\n                u = s[j];\n                s[i] = u;\n                s[j] = t;\n                r = r * width + s[lowbits(t + u)];\n            }\n            me.i = i;\n            me.j = j;\n            return r;\n        };\n        // For robust unpredictability discard an initial batch of values.\n        // See http://www.rsa.com/rsalabs/node.asp?id=2009\n        me.g(width);\n    }\n\n    //\n    // flatten()\n    // Converts an object tree to nested arrays of strings.\n    //\n    /** @param {Object=} result\n     * @param {string=} prop\n     * @param {string=} typ */\n    function flatten(obj, depth, result, prop, typ) {\n        result = [];\n        typ = typeof obj;\n        if (depth && typ == 'object') {\n            for (prop in obj) {\n                if (prop.indexOf('S') < 5) {\n                    // Avoid FF3 bug (local/sessionStorage)\n                    try {\n                        result.push(flatten(obj[prop], depth - 1));\n                    } catch (e) {}\n                }\n            }\n        }\n        return result.length ? result : obj + (typ != 'string' ? '\\0' : '');\n    }\n\n    //\n    // mixkey()\n    // Mixes a string seed into a key that is an array of integers, and\n    // returns a shortened string seed that is equivalent to the result key.\n    //\n    /** @param {number=} smear\n     * @param {number=} j */\n    function mixkey(seed, key, smear, j) {\n        seed += ''; // Ensure the seed is a string\n        smear = 0;\n        for (j = 0; j < seed.length; j++) {\n            key[lowbits(j)] = lowbits(\n                (smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j)\n            );\n        }\n        seed = '';\n        for (j in key) {\n            seed += String.fromCharCode(key[j]);\n        }\n        return seed;\n    }\n\n    //\n    // lowbits()\n    // A quick \"n mod width\" for width a power of 2.\n    //\n    function lowbits(n) {\n        return n & (width - 1);\n    }\n\n    //\n    // The following constants are related to IEEE 754 limits.\n    //\n    startdenom = math.pow(width, chunks);\n    significance = math.pow(2, significance);\n    overflow = significance * 2;\n\n    //\n    // When seedrandom.js is loaded, we immediately mix a few bits\n    // from the built-in RNG into the entropy pool.  Because we do\n    // not want to intefere with determinstic PRNG state later,\n    // seedrandom will not call math.random on its own again after\n    // initialization.\n    //\n    mixkey(math.random(), pool);\n\n    // End anonymous scope, and pass initial values.\n})(\n    [], // pool: entropy pool starts empty\n    numeric.seedrandom, // math: package containing random, pow, and seedrandom\n    256, // width: each RC4 output is 0 <= x < 256\n    6, // chunks: at least six RC4 outputs for each double\n    52 // significance: there are 52 significant digits in a double\n);\n/* This file is a slightly modified version of quadprog.js from Alberto Santini.\n * It has been slightly modified by Sébastien Loisel to make sure that it handles\n * 0-based Arrays instead of 1-based Arrays.\n * License is in resources/LICENSE.quadprog */\n(function (exports) {\n    function base0to1(A) {\n        if (typeof A !== 'object') {\n            return A;\n        }\n        var ret = [],\n            i,\n            n = A.length;\n        for (i = 0; i < n; i++) ret[i + 1] = base0to1(A[i]);\n        return ret;\n    }\n    function base1to0(A) {\n        if (typeof A !== 'object') {\n            return A;\n        }\n        var ret = [],\n            i,\n            n = A.length;\n        for (i = 1; i < n; i++) ret[i - 1] = base1to0(A[i]);\n        return ret;\n    }\n\n    function dpori(a, lda, n) {\n        var i, j, k, kp1, t;\n\n        for (k = 1; k <= n; k = k + 1) {\n            a[k][k] = 1 / a[k][k];\n            t = -a[k][k];\n            //~ dscal(k - 1, t, a[1][k], 1);\n            for (i = 1; i < k; i = i + 1) {\n                a[i][k] = t * a[i][k];\n            }\n\n            kp1 = k + 1;\n            if (n < kp1) {\n                break;\n            }\n            for (j = kp1; j <= n; j = j + 1) {\n                t = a[k][j];\n                a[k][j] = 0;\n                //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);\n                for (i = 1; i <= k; i = i + 1) {\n                    a[i][j] = a[i][j] + t * a[i][k];\n                }\n            }\n        }\n    }\n\n    function dposl(a, lda, n, b) {\n        var i, k, kb, t;\n\n        for (k = 1; k <= n; k = k + 1) {\n            //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);\n            t = 0;\n            for (i = 1; i < k; i = i + 1) {\n                t = t + a[i][k] * b[i];\n            }\n\n            b[k] = (b[k] - t) / a[k][k];\n        }\n\n        for (kb = 1; kb <= n; kb = kb + 1) {\n            k = n + 1 - kb;\n            b[k] = b[k] / a[k][k];\n            t = -b[k];\n            //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);\n            for (i = 1; i < k; i = i + 1) {\n                b[i] = b[i] + t * a[i][k];\n            }\n        }\n    }\n\n    function dpofa(a, lda, n, info) {\n        var i, j, jm1, k, t, s;\n\n        for (j = 1; j <= n; j = j + 1) {\n            info[1] = j;\n            s = 0;\n            jm1 = j - 1;\n            if (jm1 < 1) {\n                s = a[j][j] - s;\n                if (s <= 0) {\n                    break;\n                }\n                a[j][j] = Math.sqrt(s);\n            } else {\n                for (k = 1; k <= jm1; k = k + 1) {\n                    //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);\n                    t = a[k][j];\n                    for (i = 1; i < k; i = i + 1) {\n                        t = t - a[i][j] * a[i][k];\n                    }\n                    t = t / a[k][k];\n                    a[k][j] = t;\n                    s = s + t * t;\n                }\n                s = a[j][j] - s;\n                if (s <= 0) {\n                    break;\n                }\n                a[j][j] = Math.sqrt(s);\n            }\n            info[1] = 0;\n        }\n    }\n\n    function qpgen2(\n        dmat,\n        dvec,\n        fddmat,\n        n,\n        sol,\n        crval,\n        amat,\n        bvec,\n        fdamat,\n        q,\n        meq,\n        iact,\n        nact,\n        iter,\n        work,\n        ierr\n    ) {\n        var i,\n            j,\n            l,\n            l1,\n            info,\n            it1,\n            iwzv,\n            iwrv,\n            iwrm,\n            iwsv,\n            iwuv,\n            nvl,\n            r,\n            iwnbv,\n            temp,\n            sum,\n            t1,\n            tt,\n            gc,\n            gs,\n            nu,\n            t1inf,\n            t2min,\n            vsmall,\n            tmpa,\n            tmpb,\n            go;\n\n        r = Math.min(n, q);\n        l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;\n\n        vsmall = 1.0e-60;\n        do {\n            vsmall = vsmall + vsmall;\n            tmpa = 1 + 0.1 * vsmall;\n            tmpb = 1 + 0.2 * vsmall;\n        } while (tmpa <= 1 || tmpb <= 1);\n\n        for (i = 1; i <= n; i = i + 1) {\n            work[i] = dvec[i];\n        }\n        for (i = n + 1; i <= l; i = i + 1) {\n            work[i] = 0;\n        }\n        for (i = 1; i <= q; i = i + 1) {\n            iact[i] = 0;\n        }\n\n        info = [];\n\n        if (ierr[1] === 0) {\n            dpofa(dmat, fddmat, n, info);\n            if (info[1] !== 0) {\n                ierr[1] = 2;\n                return;\n            }\n            dposl(dmat, fddmat, n, dvec);\n            dpori(dmat, fddmat, n);\n        } else {\n            for (j = 1; j <= n; j = j + 1) {\n                sol[j] = 0;\n                for (i = 1; i <= j; i = i + 1) {\n                    sol[j] = sol[j] + dmat[i][j] * dvec[i];\n                }\n            }\n            for (j = 1; j <= n; j = j + 1) {\n                dvec[j] = 0;\n                for (i = j; i <= n; i = i + 1) {\n                    dvec[j] = dvec[j] + dmat[j][i] * sol[i];\n                }\n            }\n        }\n\n        crval[1] = 0;\n        for (j = 1; j <= n; j = j + 1) {\n            sol[j] = dvec[j];\n            crval[1] = crval[1] + work[j] * sol[j];\n            work[j] = 0;\n            for (i = j + 1; i <= n; i = i + 1) {\n                dmat[i][j] = 0;\n            }\n        }\n        crval[1] = -crval[1] / 2;\n        ierr[1] = 0;\n\n        iwzv = n;\n        iwrv = iwzv + n;\n        iwuv = iwrv + r;\n        iwrm = iwuv + r + 1;\n        iwsv = iwrm + (r * (r + 1)) / 2;\n        iwnbv = iwsv + q;\n\n        for (i = 1; i <= q; i = i + 1) {\n            sum = 0;\n            for (j = 1; j <= n; j = j + 1) {\n                sum = sum + amat[j][i] * amat[j][i];\n            }\n            work[iwnbv + i] = Math.sqrt(sum);\n        }\n        nact = 0;\n        iter[1] = 0;\n        iter[2] = 0;\n\n        function fn_goto_50() {\n            iter[1] = iter[1] + 1;\n\n            l = iwsv;\n            for (i = 1; i <= q; i = i + 1) {\n                l = l + 1;\n                sum = -bvec[i];\n                for (j = 1; j <= n; j = j + 1) {\n                    sum = sum + amat[j][i] * sol[j];\n                }\n                if (Math.abs(sum) < vsmall) {\n                    sum = 0;\n                }\n                if (i > meq) {\n                    work[l] = sum;\n                } else {\n                    work[l] = -Math.abs(sum);\n                    if (sum > 0) {\n                        for (j = 1; j <= n; j = j + 1) {\n                            amat[j][i] = -amat[j][i];\n                        }\n                        bvec[i] = -bvec[i];\n                    }\n                }\n            }\n\n            for (i = 1; i <= nact; i = i + 1) {\n                work[iwsv + iact[i]] = 0;\n            }\n\n            nvl = 0;\n            temp = 0;\n            for (i = 1; i <= q; i = i + 1) {\n                if (work[iwsv + i] < temp * work[iwnbv + i]) {\n                    nvl = i;\n                    temp = work[iwsv + i] / work[iwnbv + i];\n                }\n            }\n            if (nvl === 0) {\n                return 999;\n            }\n\n            return 0;\n        }\n\n        function fn_goto_55() {\n            for (i = 1; i <= n; i = i + 1) {\n                sum = 0;\n                for (j = 1; j <= n; j = j + 1) {\n                    sum = sum + dmat[j][i] * amat[j][nvl];\n                }\n                work[i] = sum;\n            }\n\n            l1 = iwzv;\n            for (i = 1; i <= n; i = i + 1) {\n                work[l1 + i] = 0;\n            }\n            for (j = nact + 1; j <= n; j = j + 1) {\n                for (i = 1; i <= n; i = i + 1) {\n                    work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];\n                }\n            }\n\n            t1inf = true;\n            for (i = nact; i >= 1; i = i - 1) {\n                sum = work[i];\n                l = iwrm + (i * (i + 3)) / 2;\n                l1 = l - i;\n                for (j = i + 1; j <= nact; j = j + 1) {\n                    sum = sum - work[l] * work[iwrv + j];\n                    l = l + j;\n                }\n                sum = sum / work[l1];\n                work[iwrv + i] = sum;\n                if (iact[i] < meq) {\n                    // continue;\n                    break;\n                }\n                if (sum < 0) {\n                    // continue;\n                    break;\n                }\n                t1inf = false;\n                it1 = i;\n            }\n\n            if (!t1inf) {\n                t1 = work[iwuv + it1] / work[iwrv + it1];\n                for (i = 1; i <= nact; i = i + 1) {\n                    if (iact[i] < meq) {\n                        // continue;\n                        break;\n                    }\n                    if (work[iwrv + i] < 0) {\n                        // continue;\n                        break;\n                    }\n                    temp = work[iwuv + i] / work[iwrv + i];\n                    if (temp < t1) {\n                        t1 = temp;\n                        it1 = i;\n                    }\n                }\n            }\n\n            sum = 0;\n            for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {\n                sum = sum + work[i] * work[i];\n            }\n            if (Math.abs(sum) <= vsmall) {\n                if (t1inf) {\n                    ierr[1] = 1;\n                    // GOTO 999\n                    return 999;\n                } else {\n                    for (i = 1; i <= nact; i = i + 1) {\n                        work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];\n                    }\n                    work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;\n                    // GOTO 700\n                    return 700;\n                }\n            } else {\n                sum = 0;\n                for (i = 1; i <= n; i = i + 1) {\n                    sum = sum + work[iwzv + i] * amat[i][nvl];\n                }\n                tt = -work[iwsv + nvl] / sum;\n                t2min = true;\n                if (!t1inf) {\n                    if (t1 < tt) {\n                        tt = t1;\n                        t2min = false;\n                    }\n                }\n\n                for (i = 1; i <= n; i = i + 1) {\n                    sol[i] = sol[i] + tt * work[iwzv + i];\n                    if (Math.abs(sol[i]) < vsmall) {\n                        sol[i] = 0;\n                    }\n                }\n\n                crval[1] =\n                    crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);\n                for (i = 1; i <= nact; i = i + 1) {\n                    work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];\n                }\n                work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;\n\n                if (t2min) {\n                    nact = nact + 1;\n                    iact[nact] = nvl;\n\n                    l = iwrm + ((nact - 1) * nact) / 2 + 1;\n                    for (i = 1; i <= nact - 1; i = i + 1) {\n                        work[l] = work[i];\n                        l = l + 1;\n                    }\n\n                    if (nact === n) {\n                        work[l] = work[n];\n                    } else {\n                        for (i = n; i >= nact + 1; i = i - 1) {\n                            if (work[i] === 0) {\n                                // continue;\n                                break;\n                            }\n                            gc = Math.max(\n                                Math.abs(work[i - 1]),\n                                Math.abs(work[i])\n                            );\n                            gs = Math.min(\n                                Math.abs(work[i - 1]),\n                                Math.abs(work[i])\n                            );\n                            if (work[i - 1] >= 0) {\n                                temp = Math.abs(\n                                    gc * Math.sqrt(1 + (gs * gs) / (gc * gc))\n                                );\n                            } else {\n                                temp = -Math.abs(\n                                    gc * Math.sqrt(1 + (gs * gs) / (gc * gc))\n                                );\n                            }\n                            gc = work[i - 1] / temp;\n                            gs = work[i] / temp;\n\n                            if (gc === 1) {\n                                // continue;\n                                break;\n                            }\n                            if (gc === 0) {\n                                work[i - 1] = gs * temp;\n                                for (j = 1; j <= n; j = j + 1) {\n                                    temp = dmat[j][i - 1];\n                                    dmat[j][i - 1] = dmat[j][i];\n                                    dmat[j][i] = temp;\n                                }\n                            } else {\n                                work[i - 1] = temp;\n                                nu = gs / (1 + gc);\n                                for (j = 1; j <= n; j = j + 1) {\n                                    temp =\n                                        gc * dmat[j][i - 1] + gs * dmat[j][i];\n                                    dmat[j][i] =\n                                        nu * (dmat[j][i - 1] + temp) -\n                                        dmat[j][i];\n                                    dmat[j][i - 1] = temp;\n                                }\n                            }\n                        }\n                        work[l] = work[nact];\n                    }\n                } else {\n                    sum = -bvec[nvl];\n                    for (j = 1; j <= n; j = j + 1) {\n                        sum = sum + sol[j] * amat[j][nvl];\n                    }\n                    if (nvl > meq) {\n                        work[iwsv + nvl] = sum;\n                    } else {\n                        work[iwsv + nvl] = -Math.abs(sum);\n                        if (sum > 0) {\n                            for (j = 1; j <= n; j = j + 1) {\n                                amat[j][nvl] = -amat[j][nvl];\n                            }\n                            bvec[nvl] = -bvec[nvl];\n                        }\n                    }\n                    // GOTO 700\n                    return 700;\n                }\n            }\n\n            return 0;\n        }\n\n        function fn_goto_797() {\n            l = iwrm + (it1 * (it1 + 1)) / 2 + 1;\n            l1 = l + it1;\n            if (work[l1] === 0) {\n                // GOTO 798\n                return 798;\n            }\n            gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));\n            gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));\n            if (work[l1 - 1] >= 0) {\n                temp = Math.abs(gc * Math.sqrt(1 + (gs * gs) / (gc * gc)));\n            } else {\n                temp = -Math.abs(gc * Math.sqrt(1 + (gs * gs) / (gc * gc)));\n            }\n            gc = work[l1 - 1] / temp;\n            gs = work[l1] / temp;\n\n            if (gc === 1) {\n                // GOTO 798\n                return 798;\n            }\n            if (gc === 0) {\n                for (i = it1 + 1; i <= nact; i = i + 1) {\n                    temp = work[l1 - 1];\n                    work[l1 - 1] = work[l1];\n                    work[l1] = temp;\n                    l1 = l1 + i;\n                }\n                for (i = 1; i <= n; i = i + 1) {\n                    temp = dmat[i][it1];\n                    dmat[i][it1] = dmat[i][it1 + 1];\n                    dmat[i][it1 + 1] = temp;\n                }\n            } else {\n                nu = gs / (1 + gc);\n                for (i = it1 + 1; i <= nact; i = i + 1) {\n                    temp = gc * work[l1 - 1] + gs * work[l1];\n                    work[l1] = nu * (work[l1 - 1] + temp) - work[l1];\n                    work[l1 - 1] = temp;\n                    l1 = l1 + i;\n                }\n                for (i = 1; i <= n; i = i + 1) {\n                    temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];\n                    dmat[i][it1 + 1] =\n                        nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];\n                    dmat[i][it1] = temp;\n                }\n            }\n\n            return 0;\n        }\n\n        function fn_goto_798() {\n            l1 = l - it1;\n            for (i = 1; i <= it1; i = i + 1) {\n                work[l1] = work[l];\n                l = l + 1;\n                l1 = l1 + 1;\n            }\n\n            work[iwuv + it1] = work[iwuv + it1 + 1];\n            iact[it1] = iact[it1 + 1];\n            it1 = it1 + 1;\n            if (it1 < nact) {\n                // GOTO 797\n                return 797;\n            }\n\n            return 0;\n        }\n\n        function fn_goto_799() {\n            work[iwuv + nact] = work[iwuv + nact + 1];\n            work[iwuv + nact + 1] = 0;\n            iact[nact] = 0;\n            nact = nact - 1;\n            iter[2] = iter[2] + 1;\n\n            return 0;\n        }\n\n        go = 0;\n        while (true) {\n            go = fn_goto_50();\n            if (go === 999) {\n                return;\n            }\n            while (true) {\n                go = fn_goto_55();\n                if (go === 0) {\n                    break;\n                }\n                if (go === 999) {\n                    return;\n                }\n                if (go === 700) {\n                    if (it1 === nact) {\n                        fn_goto_799();\n                    } else {\n                        while (true) {\n                            fn_goto_797();\n                            go = fn_goto_798();\n                            if (go !== 797) {\n                                break;\n                            }\n                        }\n                        fn_goto_799();\n                    }\n                }\n            }\n        }\n    }\n\n    function solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {\n        Dmat = base0to1(Dmat);\n        dvec = base0to1(dvec);\n        Amat = base0to1(Amat);\n        var i,\n            n,\n            q,\n            nact,\n            r,\n            crval = [],\n            iact = [],\n            sol = [],\n            work = [],\n            iter = [],\n            message;\n\n        meq = meq || 0;\n        factorized = factorized ? base0to1(factorized) : [undefined, 0];\n        bvec = bvec ? base0to1(bvec) : [];\n\n        // In Fortran the array index starts from 1\n        n = Dmat.length - 1;\n        q = Amat[1].length - 1;\n\n        if (!bvec) {\n            for (i = 1; i <= q; i = i + 1) {\n                bvec[i] = 0;\n            }\n        }\n        for (i = 1; i <= q; i = i + 1) {\n            iact[i] = 0;\n        }\n        nact = 0;\n        r = Math.min(n, q);\n        for (i = 1; i <= n; i = i + 1) {\n            sol[i] = 0;\n        }\n        crval[1] = 0;\n        for (i = 1; i <= 2 * n + (r * (r + 5)) / 2 + 2 * q + 1; i = i + 1) {\n            work[i] = 0;\n        }\n        for (i = 1; i <= 2; i = i + 1) {\n            iter[i] = 0;\n        }\n\n        qpgen2(\n            Dmat,\n            dvec,\n            n,\n            n,\n            sol,\n            crval,\n            Amat,\n            bvec,\n            n,\n            q,\n            meq,\n            iact,\n            nact,\n            iter,\n            work,\n            factorized\n        );\n\n        message = '';\n        if (factorized[1] === 1) {\n            message = 'constraints are inconsistent, no solution!';\n        }\n        if (factorized[1] === 2) {\n            message =\n                'matrix D in quadratic function is not positive definite!';\n        }\n\n        return {\n            solution: base1to0(sol),\n            value: base1to0(crval),\n            unconstrained_solution: base1to0(dvec),\n            iterations: base1to0(iter),\n            iact: base1to0(iact),\n            message: message,\n        };\n    }\n    exports.solveQP = solveQP;\n})(numeric);\n/*\nShanti Rao sent me this routine by private email. I had to modify it\nslightly to work on Arrays instead of using a Matrix object.\nIt is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py\n*/\n\nnumeric.svd = function svd(A) {\n    var temp;\n    //Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)\n    var prec = numeric.epsilon; //Math.pow(2,-52) // assumes double prec\n    var tolerance = 1e-64 / prec;\n    var itmax = 50;\n    var c = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n\n    var u = numeric.clone(A);\n    var m = u.length;\n\n    var n = u[0].length;\n\n    if (m < n) throw 'Need more rows than columns';\n\n    var e = new Array(n);\n    var q = new Array(n);\n    for (i = 0; i < n; i++) e[i] = q[i] = 0.0;\n    var v = numeric.rep([n, n], 0);\n    //\tv.zero();\n\n    function pythag(a, b) {\n        a = Math.abs(a);\n        b = Math.abs(b);\n        if (a > b) return a * Math.sqrt(1.0 + (b * b) / a / a);\n        else if (b == 0.0) return a;\n        return b * Math.sqrt(1.0 + (a * a) / b / b);\n    }\n\n    //Householder's reduction to bidiagonal form\n\n    var f = 0.0;\n    var g = 0.0;\n    var h = 0.0;\n    var x = 0.0;\n    var y = 0.0;\n    var z = 0.0;\n    var s = 0.0;\n\n    for (i = 0; i < n; i++) {\n        e[i] = g;\n        s = 0.0;\n        l = i + 1;\n        for (j = i; j < m; j++) s += u[j][i] * u[j][i];\n        if (s <= tolerance) g = 0.0;\n        else {\n            f = u[i][i];\n            g = Math.sqrt(s);\n            if (f >= 0.0) g = -g;\n            h = f * g - s;\n            u[i][i] = f - g;\n            for (j = l; j < n; j++) {\n                s = 0.0;\n                for (k = i; k < m; k++) s += u[k][i] * u[k][j];\n                f = s / h;\n                for (k = i; k < m; k++) u[k][j] += f * u[k][i];\n            }\n        }\n        q[i] = g;\n        s = 0.0;\n        for (j = l; j < n; j++) s = s + u[i][j] * u[i][j];\n        if (s <= tolerance) g = 0.0;\n        else {\n            f = u[i][i + 1];\n            g = Math.sqrt(s);\n            if (f >= 0.0) g = -g;\n            h = f * g - s;\n            u[i][i + 1] = f - g;\n            for (j = l; j < n; j++) e[j] = u[i][j] / h;\n            for (j = l; j < m; j++) {\n                s = 0.0;\n                for (k = l; k < n; k++) s += u[j][k] * u[i][k];\n                for (k = l; k < n; k++) u[j][k] += s * e[k];\n            }\n        }\n        y = Math.abs(q[i]) + Math.abs(e[i]);\n        if (y > x) x = y;\n    }\n\n    // accumulation of right hand gtransformations\n    for (i = n - 1; i != -1; i += -1) {\n        if (g != 0.0) {\n            h = g * u[i][i + 1];\n            for (j = l; j < n; j++) v[j][i] = u[i][j] / h;\n            for (j = l; j < n; j++) {\n                s = 0.0;\n                for (k = l; k < n; k++) s += u[i][k] * v[k][j];\n                for (k = l; k < n; k++) v[k][j] += s * v[k][i];\n            }\n        }\n        for (j = l; j < n; j++) {\n            v[i][j] = 0;\n            v[j][i] = 0;\n        }\n        v[i][i] = 1;\n        g = e[i];\n        l = i;\n    }\n\n    // accumulation of left hand transformations\n    for (i = n - 1; i != -1; i += -1) {\n        l = i + 1;\n        g = q[i];\n        for (j = l; j < n; j++) u[i][j] = 0;\n        if (g != 0.0) {\n            h = u[i][i] * g;\n            for (j = l; j < n; j++) {\n                s = 0.0;\n                for (k = l; k < m; k++) s += u[k][i] * u[k][j];\n                f = s / h;\n                for (k = i; k < m; k++) u[k][j] += f * u[k][i];\n            }\n            for (j = i; j < m; j++) u[j][i] = u[j][i] / g;\n        } else for (j = i; j < m; j++) u[j][i] = 0;\n        u[i][i] += 1;\n    }\n\n    // diagonalization of the bidiagonal form\n    prec = prec * x;\n    for (k = n - 1; k != -1; k += -1) {\n        for (var iteration = 0; iteration < itmax; iteration++) {\n            // test f splitting\n            var test_convergence = false;\n            for (l = k; l != -1; l += -1) {\n                if (Math.abs(e[l]) <= prec) {\n                    test_convergence = true;\n                    break;\n                }\n                if (Math.abs(q[l - 1]) <= prec) break;\n            }\n            if (!test_convergence) {\n                // cancellation of e[l] if l>0\n                c = 0.0;\n                s = 1.0;\n                var l1 = l - 1;\n                for (i = l; i < k + 1; i++) {\n                    f = s * e[i];\n                    e[i] = c * e[i];\n                    if (Math.abs(f) <= prec) break;\n                    g = q[i];\n                    h = pythag(f, g);\n                    q[i] = h;\n                    c = g / h;\n                    s = -f / h;\n                    for (j = 0; j < m; j++) {\n                        y = u[j][l1];\n                        z = u[j][i];\n                        u[j][l1] = y * c + z * s;\n                        u[j][i] = -y * s + z * c;\n                    }\n                }\n            }\n            // test f convergence\n            z = q[k];\n            if (l == k) {\n                //convergence\n                if (z < 0.0) {\n                    //q[k] is made non-negative\n                    q[k] = -z;\n                    for (j = 0; j < n; j++) v[j][k] = -v[j][k];\n                }\n                break; //break out of iteration loop and move on to next k value\n            }\n            if (iteration >= itmax - 1) throw 'Error: no convergence.';\n            // shift from bottom 2x2 minor\n            x = q[l];\n            y = q[k - 1];\n            g = e[k - 1];\n            h = e[k];\n            f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);\n            g = pythag(f, 1.0);\n            if (f < 0.0) f = ((x - z) * (x + z) + h * (y / (f - g) - h)) / x;\n            else f = ((x - z) * (x + z) + h * (y / (f + g) - h)) / x;\n            // next QR transformation\n            c = 1.0;\n            s = 1.0;\n            for (i = l + 1; i < k + 1; i++) {\n                g = e[i];\n                y = q[i];\n                h = s * g;\n                g = c * g;\n                z = pythag(f, h);\n                e[i - 1] = z;\n                c = f / z;\n                s = h / z;\n                f = x * c + g * s;\n                g = -x * s + g * c;\n                h = y * s;\n                y = y * c;\n                for (j = 0; j < n; j++) {\n                    x = v[j][i - 1];\n                    z = v[j][i];\n                    v[j][i - 1] = x * c + z * s;\n                    v[j][i] = -x * s + z * c;\n                }\n                z = pythag(f, h);\n                q[i - 1] = z;\n                c = f / z;\n                s = h / z;\n                f = c * g + s * y;\n                x = -s * g + c * y;\n                for (j = 0; j < m; j++) {\n                    y = u[j][i - 1];\n                    z = u[j][i];\n                    u[j][i - 1] = y * c + z * s;\n                    u[j][i] = -y * s + z * c;\n                }\n            }\n            e[l] = 0.0;\n            e[k] = f;\n            q[k] = x;\n        }\n    }\n\n    //vt= transpose(v)\n    //return (u,q,vt)\n    for (i = 0; i < q.length; i++) if (q[i] < prec) q[i] = 0;\n\n    //sort eigenvalues\n    for (i = 0; i < n; i++) {\n        //writeln(q)\n        for (j = i - 1; j >= 0; j--) {\n            if (q[j] < q[i]) {\n                //  writeln(i,'-',j)\n                c = q[j];\n                q[j] = q[i];\n                q[i] = c;\n                for (k = 0; k < u.length; k++) {\n                    temp = u[k][i];\n                    u[k][i] = u[k][j];\n                    u[k][j] = temp;\n                }\n                for (k = 0; k < v.length; k++) {\n                    temp = v[k][i];\n                    v[k][i] = v[k][j];\n                    v[k][j] = temp;\n                }\n                //\t   u.swapCols(i,j)\n                //\t   v.swapCols(i,j)\n                i = j;\n            }\n        }\n    }\n\n    return { U: u, S: q, V: v };\n};\n","/*!\n * satellite-js v4.1.3\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.satellite = factory());\n}(this, (function () { 'use strict';\n\n  var pi = Math.PI;\n  var twoPi = pi * 2;\n  var deg2rad = pi / 180.0;\n  var rad2deg = 180 / pi;\n  var minutesPerDay = 1440.0;\n  var mu = 398600.5; // in km3 / s2\n\n  var earthRadius = 6378.137; // in km\n\n  var xke = 60.0 / Math.sqrt(earthRadius * earthRadius * earthRadius / mu);\n  var vkmpersec = earthRadius * xke / 60.0;\n  var tumin = 1.0 / xke;\n  var j2 = 0.00108262998905;\n  var j3 = -0.00000253215306;\n  var j4 = -0.00000161098761;\n  var j3oj2 = j3 / j2;\n  var x2o3 = 2.0 / 3.0;\n\n  var constants = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    pi: pi,\n    twoPi: twoPi,\n    deg2rad: deg2rad,\n    rad2deg: rad2deg,\n    minutesPerDay: minutesPerDay,\n    mu: mu,\n    earthRadius: earthRadius,\n    xke: xke,\n    vkmpersec: vkmpersec,\n    tumin: tumin,\n    j2: j2,\n    j3: j3,\n    j4: j4,\n    j3oj2: j3oj2,\n    x2o3: x2o3\n  });\n\n  /* -----------------------------------------------------------------------------\n   *\n   *                           procedure days2mdhms\n   *\n   *  this procedure converts the day of the year, days, to the equivalent month\n   *    day, hour, minute and second.\n   *\n   *  algorithm     : set up array for the number of days per month\n   *                  find leap year - use 1900 because 2000 is a leap year\n   *                  loop through a temp value while the value is < the days\n   *                  perform int conversions to the correct day and month\n   *                  convert remainder into h m s using type conversions\n   *\n   *  author        : david vallado                  719-573-2600    1 mar 2001\n   *\n   *  inputs          description                    range / units\n   *    year        - year                           1900 .. 2100\n   *    days        - julian day of the year         0.0  .. 366.0\n   *\n   *  outputs       :\n   *    mon         - month                          1 .. 12\n   *    day         - day                            1 .. 28,29,30,31\n   *    hr          - hour                           0 .. 23\n   *    min         - minute                         0 .. 59\n   *    sec         - second                         0.0 .. 59.999\n   *\n   *  locals        :\n   *    dayofyr     - day of year\n   *    temp        - temporary extended values\n   *    inttemp     - temporary int value\n   *    i           - index\n   *    lmonth[12]  - int array containing the number of days per month\n   *\n   *  coupling      :\n   *    none.\n   * --------------------------------------------------------------------------- */\n  function days2mdhms(year, days) {\n    var lmonth = [31, year % 4 === 0 ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    var dayofyr = Math.floor(days); //  ----------------- find month and day of month ----------------\n\n    var i = 1;\n    var inttemp = 0;\n\n    while (dayofyr > inttemp + lmonth[i - 1] && i < 12) {\n      inttemp += lmonth[i - 1];\n      i += 1;\n    }\n\n    var mon = i;\n    var day = dayofyr - inttemp; //  ----------------- find hours minutes and seconds -------------\n\n    var temp = (days - dayofyr) * 24.0;\n    var hr = Math.floor(temp);\n    temp = (temp - hr) * 60.0;\n    var minute = Math.floor(temp);\n    var sec = (temp - minute) * 60.0;\n    return {\n      mon: mon,\n      day: day,\n      hr: hr,\n      minute: minute,\n      sec: sec\n    };\n  }\n  /* -----------------------------------------------------------------------------\n   *\n   *                           procedure jday\n   *\n   *  this procedure finds the julian date given the year, month, day, and time.\n   *    the julian date is defined by each elapsed day since noon, jan 1, 4713 bc.\n   *\n   *  algorithm     : calculate the answer in one step for efficiency\n   *\n   *  author        : david vallado                  719-573-2600    1 mar 2001\n   *\n   *  inputs          description                    range / units\n   *    year        - year                           1900 .. 2100\n   *    mon         - month                          1 .. 12\n   *    day         - day                            1 .. 28,29,30,31\n   *    hr          - universal time hour            0 .. 23\n   *    min         - universal time min             0 .. 59\n   *    sec         - universal time sec             0.0 .. 59.999\n   *\n   *  outputs       :\n   *    jd          - julian date                    days from 4713 bc\n   *\n   *  locals        :\n   *    none.\n   *\n   *  coupling      :\n   *    none.\n   *\n   *  references    :\n   *    vallado       2007, 189, alg 14, ex 3-14\n   *\n   * --------------------------------------------------------------------------- */\n\n  function jdayInternal(year, mon, day, hr, minute, sec) {\n    var msec = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    return 367.0 * year - Math.floor(7 * (year + Math.floor((mon + 9) / 12.0)) * 0.25) + Math.floor(275 * mon / 9.0) + day + 1721013.5 + ((msec / 60000 + sec / 60.0 + minute) / 60.0 + hr) / 24.0 // ut in days\n    // # - 0.5*sgn(100.0*year + mon - 190002.5) + 0.5;\n    ;\n  }\n\n  function jday(year, mon, day, hr, minute, sec, msec) {\n    if (year instanceof Date) {\n      var date = year;\n      return jdayInternal(date.getUTCFullYear(), date.getUTCMonth() + 1, // Note, this function requires months in range 1-12.\n      date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n    }\n\n    return jdayInternal(year, mon, day, hr, minute, sec, msec);\n  }\n  /* -----------------------------------------------------------------------------\n   *\n   *                           procedure invjday\n   *\n   *  this procedure finds the year, month, day, hour, minute and second\n   *  given the julian date. tu can be ut1, tdt, tdb, etc.\n   *\n   *  algorithm     : set up starting values\n   *                  find leap year - use 1900 because 2000 is a leap year\n   *                  find the elapsed days through the year in a loop\n   *                  call routine to find each individual value\n   *\n   *  author        : david vallado                  719-573-2600    1 mar 2001\n   *\n   *  inputs          description                    range / units\n   *    jd          - julian date                    days from 4713 bc\n   *\n   *  outputs       :\n   *    year        - year                           1900 .. 2100\n   *    mon         - month                          1 .. 12\n   *    day         - day                            1 .. 28,29,30,31\n   *    hr          - hour                           0 .. 23\n   *    min         - minute                         0 .. 59\n   *    sec         - second                         0.0 .. 59.999\n   *\n   *  locals        :\n   *    days        - day of year plus fractional\n   *                  portion of a day               days\n   *    tu          - julian centuries from 0 h\n   *                  jan 0, 1900\n   *    temp        - temporary double values\n   *    leapyrs     - number of leap years from 1900\n   *\n   *  coupling      :\n   *    days2mdhms  - finds month, day, hour, minute and second given days and year\n   *\n   *  references    :\n   *    vallado       2007, 208, alg 22, ex 3-13\n   * --------------------------------------------------------------------------- */\n\n  function invjday(jd, asArray) {\n    // --------------- find year and days of the year -\n    var temp = jd - 2415019.5;\n    var tu = temp / 365.25;\n    var year = 1900 + Math.floor(tu);\n    var leapyrs = Math.floor((year - 1901) * 0.25); // optional nudge by 8.64x10-7 sec to get even outputs\n\n    var days = temp - ((year - 1900) * 365.0 + leapyrs) + 0.00000000001; // ------------ check for case of beginning of a year -----------\n\n    if (days < 1.0) {\n      year -= 1;\n      leapyrs = Math.floor((year - 1901) * 0.25);\n      days = temp - ((year - 1900) * 365.0 + leapyrs);\n    } // ----------------- find remaing data  -------------------------\n\n\n    var mdhms = days2mdhms(year, days);\n    var mon = mdhms.mon,\n        day = mdhms.day,\n        hr = mdhms.hr,\n        minute = mdhms.minute;\n    var sec = mdhms.sec - 0.00000086400;\n\n    if (asArray) {\n      return [year, mon, day, hr, minute, Math.floor(sec)];\n    }\n\n    return new Date(Date.UTC(year, mon - 1, day, hr, minute, Math.floor(sec)));\n  }\n\n  /* -----------------------------------------------------------------------------\n   *\n   *                           procedure dpper\n   *\n   *  this procedure provides deep space long period periodic contributions\n   *    to the mean elements.  by design, these periodics are zero at epoch.\n   *    this used to be dscom which included initialization, but it's really a\n   *    recurring function.\n   *\n   *  author        : david vallado                  719-573-2600   28 jun 2005\n   *\n   *  inputs        :\n   *    e3          -\n   *    ee2         -\n   *    peo         -\n   *    pgho        -\n   *    pho         -\n   *    pinco       -\n   *    plo         -\n   *    se2 , se3 , sgh2, sgh3, sgh4, sh2, sh3, si2, si3, sl2, sl3, sl4 -\n   *    t           -\n   *    xh2, xh3, xi2, xi3, xl2, xl3, xl4 -\n   *    zmol        -\n   *    zmos        -\n   *    ep          - eccentricity                           0.0 - 1.0\n   *    inclo       - inclination - needed for lyddane modification\n   *    nodep       - right ascension of ascending node\n   *    argpp       - argument of perigee\n   *    mp          - mean anomaly\n   *\n   *  outputs       :\n   *    ep          - eccentricity                           0.0 - 1.0\n   *    inclp       - inclination\n   *    nodep        - right ascension of ascending node\n   *    argpp       - argument of perigee\n   *    mp          - mean anomaly\n   *\n   *  locals        :\n   *    alfdp       -\n   *    betdp       -\n   *    cosip  , sinip  , cosop  , sinop  ,\n   *    dalf        -\n   *    dbet        -\n   *    dls         -\n   *    f2, f3      -\n   *    pe          -\n   *    pgh         -\n   *    ph          -\n   *    pinc        -\n   *    pl          -\n   *    sel   , ses   , sghl  , sghs  , shl   , shs   , sil   , sinzf , sis   ,\n   *    sll   , sls\n   *    xls         -\n   *    xnoh        -\n   *    zf          -\n   *    zm          -\n   *\n   *  coupling      :\n   *    none.\n   *\n   *  references    :\n   *    hoots, roehrich, norad spacetrack report #3 1980\n   *    hoots, norad spacetrack report #6 1986\n   *    hoots, schumacher and glover 2004\n   *    vallado, crawford, hujsak, kelso  2006\n   ----------------------------------------------------------------------------*/\n\n  function dpper(satrec, options) {\n    var e3 = satrec.e3,\n        ee2 = satrec.ee2,\n        peo = satrec.peo,\n        pgho = satrec.pgho,\n        pho = satrec.pho,\n        pinco = satrec.pinco,\n        plo = satrec.plo,\n        se2 = satrec.se2,\n        se3 = satrec.se3,\n        sgh2 = satrec.sgh2,\n        sgh3 = satrec.sgh3,\n        sgh4 = satrec.sgh4,\n        sh2 = satrec.sh2,\n        sh3 = satrec.sh3,\n        si2 = satrec.si2,\n        si3 = satrec.si3,\n        sl2 = satrec.sl2,\n        sl3 = satrec.sl3,\n        sl4 = satrec.sl4,\n        t = satrec.t,\n        xgh2 = satrec.xgh2,\n        xgh3 = satrec.xgh3,\n        xgh4 = satrec.xgh4,\n        xh2 = satrec.xh2,\n        xh3 = satrec.xh3,\n        xi2 = satrec.xi2,\n        xi3 = satrec.xi3,\n        xl2 = satrec.xl2,\n        xl3 = satrec.xl3,\n        xl4 = satrec.xl4,\n        zmol = satrec.zmol,\n        zmos = satrec.zmos;\n    var init = options.init,\n        opsmode = options.opsmode;\n    var ep = options.ep,\n        inclp = options.inclp,\n        nodep = options.nodep,\n        argpp = options.argpp,\n        mp = options.mp; // Copy satellite attributes into local variables for convenience\n    // and symmetry in writing formulae.\n\n    var alfdp;\n    var betdp;\n    var cosip;\n    var sinip;\n    var cosop;\n    var sinop;\n    var dalf;\n    var dbet;\n    var dls;\n    var f2;\n    var f3;\n    var pe;\n    var pgh;\n    var ph;\n    var pinc;\n    var pl;\n    var sinzf;\n    var xls;\n    var xnoh;\n    var zf;\n    var zm; //  ---------------------- constants -----------------------------\n\n    var zns = 1.19459e-5;\n    var zes = 0.01675;\n    var znl = 1.5835218e-4;\n    var zel = 0.05490; //  --------------- calculate time varying periodics -----------\n\n    zm = zmos + zns * t; // be sure that the initial call has time set to zero\n\n    if (init === 'y') {\n      zm = zmos;\n    }\n\n    zf = zm + 2.0 * zes * Math.sin(zm);\n    sinzf = Math.sin(zf);\n    f2 = 0.5 * sinzf * sinzf - 0.25;\n    f3 = -0.5 * sinzf * Math.cos(zf);\n    var ses = se2 * f2 + se3 * f3;\n    var sis = si2 * f2 + si3 * f3;\n    var sls = sl2 * f2 + sl3 * f3 + sl4 * sinzf;\n    var sghs = sgh2 * f2 + sgh3 * f3 + sgh4 * sinzf;\n    var shs = sh2 * f2 + sh3 * f3;\n    zm = zmol + znl * t;\n\n    if (init === 'y') {\n      zm = zmol;\n    }\n\n    zf = zm + 2.0 * zel * Math.sin(zm);\n    sinzf = Math.sin(zf);\n    f2 = 0.5 * sinzf * sinzf - 0.25;\n    f3 = -0.5 * sinzf * Math.cos(zf);\n    var sel = ee2 * f2 + e3 * f3;\n    var sil = xi2 * f2 + xi3 * f3;\n    var sll = xl2 * f2 + xl3 * f3 + xl4 * sinzf;\n    var sghl = xgh2 * f2 + xgh3 * f3 + xgh4 * sinzf;\n    var shll = xh2 * f2 + xh3 * f3;\n    pe = ses + sel;\n    pinc = sis + sil;\n    pl = sls + sll;\n    pgh = sghs + sghl;\n    ph = shs + shll;\n\n    if (init === 'n') {\n      pe -= peo;\n      pinc -= pinco;\n      pl -= plo;\n      pgh -= pgho;\n      ph -= pho;\n      inclp += pinc;\n      ep += pe;\n      sinip = Math.sin(inclp);\n      cosip = Math.cos(inclp);\n      /* ----------------- apply periodics directly ------------ */\n      // sgp4fix for lyddane choice\n      // strn3 used original inclination - this is technically feasible\n      // gsfc used perturbed inclination - also technically feasible\n      // probably best to readjust the 0.2 limit value and limit discontinuity\n      // 0.2 rad = 11.45916 deg\n      // use next line for original strn3 approach and original inclination\n      // if (inclo >= 0.2)\n      // use next line for gsfc version and perturbed inclination\n\n      if (inclp >= 0.2) {\n        ph /= sinip;\n        pgh -= cosip * ph;\n        argpp += pgh;\n        nodep += ph;\n        mp += pl;\n      } else {\n        //  ---- apply periodics with lyddane modification ----\n        sinop = Math.sin(nodep);\n        cosop = Math.cos(nodep);\n        alfdp = sinip * sinop;\n        betdp = sinip * cosop;\n        dalf = ph * cosop + pinc * cosip * sinop;\n        dbet = -ph * sinop + pinc * cosip * cosop;\n        alfdp += dalf;\n        betdp += dbet;\n        nodep %= twoPi; //  sgp4fix for afspc written intrinsic functions\n        //  nodep used without a trigonometric function ahead\n\n        if (nodep < 0.0 && opsmode === 'a') {\n          nodep += twoPi;\n        }\n\n        xls = mp + argpp + cosip * nodep;\n        dls = pl + pgh - pinc * nodep * sinip;\n        xls += dls;\n        xnoh = nodep;\n        nodep = Math.atan2(alfdp, betdp); //  sgp4fix for afspc written intrinsic functions\n        //  nodep used without a trigonometric function ahead\n\n        if (nodep < 0.0 && opsmode === 'a') {\n          nodep += twoPi;\n        }\n\n        if (Math.abs(xnoh - nodep) > pi) {\n          if (nodep < xnoh) {\n            nodep += twoPi;\n          } else {\n            nodep -= twoPi;\n          }\n        }\n\n        mp += pl;\n        argpp = xls - mp - cosip * nodep;\n      }\n    }\n\n    return {\n      ep: ep,\n      inclp: inclp,\n      nodep: nodep,\n      argpp: argpp,\n      mp: mp\n    };\n  }\n\n  /*-----------------------------------------------------------------------------\n   *\n   *                           procedure dscom\n   *\n   *  this procedure provides deep space common items used by both the secular\n   *    and periodics subroutines.  input is provided as shown. this routine\n   *    used to be called dpper, but the functions inside weren't well organized.\n   *\n   *  author        : david vallado                  719-573-2600   28 jun 2005\n   *\n   *  inputs        :\n   *    epoch       -\n   *    ep          - eccentricity\n   *    argpp       - argument of perigee\n   *    tc          -\n   *    inclp       - inclination\n   *    nodep       - right ascension of ascending node\n   *    np          - mean motion\n   *\n   *  outputs       :\n   *    sinim  , cosim  , sinomm , cosomm , snodm  , cnodm\n   *    day         -\n   *    e3          -\n   *    ee2         -\n   *    em          - eccentricity\n   *    emsq        - eccentricity squared\n   *    gam         -\n   *    peo         -\n   *    pgho        -\n   *    pho         -\n   *    pinco       -\n   *    plo         -\n   *    rtemsq      -\n   *    se2, se3         -\n   *    sgh2, sgh3, sgh4        -\n   *    sh2, sh3, si2, si3, sl2, sl3, sl4         -\n   *    s1, s2, s3, s4, s5, s6, s7          -\n   *    ss1, ss2, ss3, ss4, ss5, ss6, ss7, sz1, sz2, sz3         -\n   *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n   *    xgh2, xgh3, xgh4, xh2, xh3, xi2, xi3, xl2, xl3, xl4         -\n   *    nm          - mean motion\n   *    z1, z2, z3, z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n   *    zmol        -\n   *    zmos        -\n   *\n   *  locals        :\n   *    a1, a2, a3, a4, a5, a6, a7, a8, a9, a10         -\n   *    betasq      -\n   *    cc          -\n   *    ctem, stem        -\n   *    x1, x2, x3, x4, x5, x6, x7, x8          -\n   *    xnodce      -\n   *    xnoi        -\n   *    zcosg  , zsing  , zcosgl , zsingl , zcosh  , zsinh  , zcoshl , zsinhl ,\n   *    zcosi  , zsini  , zcosil , zsinil ,\n   *    zx          -\n   *    zy          -\n   *\n   *  coupling      :\n   *    none.\n   *\n   *  references    :\n   *    hoots, roehrich, norad spacetrack report #3 1980\n   *    hoots, norad spacetrack report #6 1986\n   *    hoots, schumacher and glover 2004\n   *    vallado, crawford, hujsak, kelso  2006\n   ----------------------------------------------------------------------------*/\n\n  function dscom(options) {\n    var epoch = options.epoch,\n        ep = options.ep,\n        argpp = options.argpp,\n        tc = options.tc,\n        inclp = options.inclp,\n        nodep = options.nodep,\n        np = options.np;\n    var a1;\n    var a2;\n    var a3;\n    var a4;\n    var a5;\n    var a6;\n    var a7;\n    var a8;\n    var a9;\n    var a10;\n    var cc;\n    var x1;\n    var x2;\n    var x3;\n    var x4;\n    var x5;\n    var x6;\n    var x7;\n    var x8;\n    var zcosg;\n    var zsing;\n    var zcosh;\n    var zsinh;\n    var zcosi;\n    var zsini;\n    var ss1;\n    var ss2;\n    var ss3;\n    var ss4;\n    var ss5;\n    var ss6;\n    var ss7;\n    var sz1;\n    var sz2;\n    var sz3;\n    var sz11;\n    var sz12;\n    var sz13;\n    var sz21;\n    var sz22;\n    var sz23;\n    var sz31;\n    var sz32;\n    var sz33;\n    var s1;\n    var s2;\n    var s3;\n    var s4;\n    var s5;\n    var s6;\n    var s7;\n    var z1;\n    var z2;\n    var z3;\n    var z11;\n    var z12;\n    var z13;\n    var z21;\n    var z22;\n    var z23;\n    var z31;\n    var z32;\n    var z33; // -------------------------- constants -------------------------\n\n    var zes = 0.01675;\n    var zel = 0.05490;\n    var c1ss = 2.9864797e-6;\n    var c1l = 4.7968065e-7;\n    var zsinis = 0.39785416;\n    var zcosis = 0.91744867;\n    var zcosgs = 0.1945905;\n    var zsings = -0.98088458; //  --------------------- local variables ------------------------\n\n    var nm = np;\n    var em = ep;\n    var snodm = Math.sin(nodep);\n    var cnodm = Math.cos(nodep);\n    var sinomm = Math.sin(argpp);\n    var cosomm = Math.cos(argpp);\n    var sinim = Math.sin(inclp);\n    var cosim = Math.cos(inclp);\n    var emsq = em * em;\n    var betasq = 1.0 - emsq;\n    var rtemsq = Math.sqrt(betasq); //  ----------------- initialize lunar solar terms ---------------\n\n    var peo = 0.0;\n    var pinco = 0.0;\n    var plo = 0.0;\n    var pgho = 0.0;\n    var pho = 0.0;\n    var day = epoch + 18261.5 + tc / 1440.0;\n    var xnodce = (4.5236020 - 9.2422029e-4 * day) % twoPi;\n    var stem = Math.sin(xnodce);\n    var ctem = Math.cos(xnodce);\n    var zcosil = 0.91375164 - 0.03568096 * ctem;\n    var zsinil = Math.sqrt(1.0 - zcosil * zcosil);\n    var zsinhl = 0.089683511 * stem / zsinil;\n    var zcoshl = Math.sqrt(1.0 - zsinhl * zsinhl);\n    var gam = 5.8351514 + 0.0019443680 * day;\n    var zx = 0.39785416 * stem / zsinil;\n    var zy = zcoshl * ctem + 0.91744867 * zsinhl * stem;\n    zx = Math.atan2(zx, zy);\n    zx += gam - xnodce;\n    var zcosgl = Math.cos(zx);\n    var zsingl = Math.sin(zx); //  ------------------------- do solar terms ---------------------\n\n    zcosg = zcosgs;\n    zsing = zsings;\n    zcosi = zcosis;\n    zsini = zsinis;\n    zcosh = cnodm;\n    zsinh = snodm;\n    cc = c1ss;\n    var xnoi = 1.0 / nm;\n    var lsflg = 0;\n\n    while (lsflg < 2) {\n      lsflg += 1;\n      a1 = zcosg * zcosh + zsing * zcosi * zsinh;\n      a3 = -zsing * zcosh + zcosg * zcosi * zsinh;\n      a7 = -zcosg * zsinh + zsing * zcosi * zcosh;\n      a8 = zsing * zsini;\n      a9 = zsing * zsinh + zcosg * zcosi * zcosh;\n      a10 = zcosg * zsini;\n      a2 = cosim * a7 + sinim * a8;\n      a4 = cosim * a9 + sinim * a10;\n      a5 = -sinim * a7 + cosim * a8;\n      a6 = -sinim * a9 + cosim * a10;\n      x1 = a1 * cosomm + a2 * sinomm;\n      x2 = a3 * cosomm + a4 * sinomm;\n      x3 = -a1 * sinomm + a2 * cosomm;\n      x4 = -a3 * sinomm + a4 * cosomm;\n      x5 = a5 * sinomm;\n      x6 = a6 * sinomm;\n      x7 = a5 * cosomm;\n      x8 = a6 * cosomm;\n      z31 = 12.0 * x1 * x1 - 3.0 * x3 * x3;\n      z32 = 24.0 * x1 * x2 - 6.0 * x3 * x4;\n      z33 = 12.0 * x2 * x2 - 3.0 * x4 * x4;\n      z1 = 3.0 * (a1 * a1 + a2 * a2) + z31 * emsq;\n      z2 = 6.0 * (a1 * a3 + a2 * a4) + z32 * emsq;\n      z3 = 3.0 * (a3 * a3 + a4 * a4) + z33 * emsq;\n      z11 = -6.0 * a1 * a5 + emsq * (-24.0 * x1 * x7 - 6.0 * x3 * x5);\n      z12 = -6.0 * (a1 * a6 + a3 * a5) + emsq * (-24.0 * (x2 * x7 + x1 * x8) + -6.0 * (x3 * x6 + x4 * x5));\n      z13 = -6.0 * a3 * a6 + emsq * (-24.0 * x2 * x8 - 6.0 * x4 * x6);\n      z21 = 6.0 * a2 * a5 + emsq * (24.0 * x1 * x5 - 6.0 * x3 * x7);\n      z22 = 6.0 * (a4 * a5 + a2 * a6) + emsq * (24.0 * (x2 * x5 + x1 * x6) - 6.0 * (x4 * x7 + x3 * x8));\n      z23 = 6.0 * a4 * a6 + emsq * (24.0 * x2 * x6 - 6.0 * x4 * x8);\n      z1 = z1 + z1 + betasq * z31;\n      z2 = z2 + z2 + betasq * z32;\n      z3 = z3 + z3 + betasq * z33;\n      s3 = cc * xnoi;\n      s2 = -0.5 * s3 / rtemsq;\n      s4 = s3 * rtemsq;\n      s1 = -15.0 * em * s4;\n      s5 = x1 * x3 + x2 * x4;\n      s6 = x2 * x3 + x1 * x4;\n      s7 = x2 * x4 - x1 * x3; //  ----------------------- do lunar terms -------------------\n\n      if (lsflg === 1) {\n        ss1 = s1;\n        ss2 = s2;\n        ss3 = s3;\n        ss4 = s4;\n        ss5 = s5;\n        ss6 = s6;\n        ss7 = s7;\n        sz1 = z1;\n        sz2 = z2;\n        sz3 = z3;\n        sz11 = z11;\n        sz12 = z12;\n        sz13 = z13;\n        sz21 = z21;\n        sz22 = z22;\n        sz23 = z23;\n        sz31 = z31;\n        sz32 = z32;\n        sz33 = z33;\n        zcosg = zcosgl;\n        zsing = zsingl;\n        zcosi = zcosil;\n        zsini = zsinil;\n        zcosh = zcoshl * cnodm + zsinhl * snodm;\n        zsinh = snodm * zcoshl - cnodm * zsinhl;\n        cc = c1l;\n      }\n    }\n\n    var zmol = (4.7199672 + (0.22997150 * day - gam)) % twoPi;\n    var zmos = (6.2565837 + 0.017201977 * day) % twoPi; //  ------------------------ do solar terms ----------------------\n\n    var se2 = 2.0 * ss1 * ss6;\n    var se3 = 2.0 * ss1 * ss7;\n    var si2 = 2.0 * ss2 * sz12;\n    var si3 = 2.0 * ss2 * (sz13 - sz11);\n    var sl2 = -2.0 * ss3 * sz2;\n    var sl3 = -2.0 * ss3 * (sz3 - sz1);\n    var sl4 = -2.0 * ss3 * (-21.0 - 9.0 * emsq) * zes;\n    var sgh2 = 2.0 * ss4 * sz32;\n    var sgh3 = 2.0 * ss4 * (sz33 - sz31);\n    var sgh4 = -18.0 * ss4 * zes;\n    var sh2 = -2.0 * ss2 * sz22;\n    var sh3 = -2.0 * ss2 * (sz23 - sz21); //  ------------------------ do lunar terms ----------------------\n\n    var ee2 = 2.0 * s1 * s6;\n    var e3 = 2.0 * s1 * s7;\n    var xi2 = 2.0 * s2 * z12;\n    var xi3 = 2.0 * s2 * (z13 - z11);\n    var xl2 = -2.0 * s3 * z2;\n    var xl3 = -2.0 * s3 * (z3 - z1);\n    var xl4 = -2.0 * s3 * (-21.0 - 9.0 * emsq) * zel;\n    var xgh2 = 2.0 * s4 * z32;\n    var xgh3 = 2.0 * s4 * (z33 - z31);\n    var xgh4 = -18.0 * s4 * zel;\n    var xh2 = -2.0 * s2 * z22;\n    var xh3 = -2.0 * s2 * (z23 - z21);\n    return {\n      snodm: snodm,\n      cnodm: cnodm,\n      sinim: sinim,\n      cosim: cosim,\n      sinomm: sinomm,\n      cosomm: cosomm,\n      day: day,\n      e3: e3,\n      ee2: ee2,\n      em: em,\n      emsq: emsq,\n      gam: gam,\n      peo: peo,\n      pgho: pgho,\n      pho: pho,\n      pinco: pinco,\n      plo: plo,\n      rtemsq: rtemsq,\n      se2: se2,\n      se3: se3,\n      sgh2: sgh2,\n      sgh3: sgh3,\n      sgh4: sgh4,\n      sh2: sh2,\n      sh3: sh3,\n      si2: si2,\n      si3: si3,\n      sl2: sl2,\n      sl3: sl3,\n      sl4: sl4,\n      s1: s1,\n      s2: s2,\n      s3: s3,\n      s4: s4,\n      s5: s5,\n      s6: s6,\n      s7: s7,\n      ss1: ss1,\n      ss2: ss2,\n      ss3: ss3,\n      ss4: ss4,\n      ss5: ss5,\n      ss6: ss6,\n      ss7: ss7,\n      sz1: sz1,\n      sz2: sz2,\n      sz3: sz3,\n      sz11: sz11,\n      sz12: sz12,\n      sz13: sz13,\n      sz21: sz21,\n      sz22: sz22,\n      sz23: sz23,\n      sz31: sz31,\n      sz32: sz32,\n      sz33: sz33,\n      xgh2: xgh2,\n      xgh3: xgh3,\n      xgh4: xgh4,\n      xh2: xh2,\n      xh3: xh3,\n      xi2: xi2,\n      xi3: xi3,\n      xl2: xl2,\n      xl3: xl3,\n      xl4: xl4,\n      nm: nm,\n      z1: z1,\n      z2: z2,\n      z3: z3,\n      z11: z11,\n      z12: z12,\n      z13: z13,\n      z21: z21,\n      z22: z22,\n      z23: z23,\n      z31: z31,\n      z32: z32,\n      z33: z33,\n      zmol: zmol,\n      zmos: zmos\n    };\n  }\n\n  /*-----------------------------------------------------------------------------\n   *\n   *                           procedure dsinit\n   *\n   *  this procedure provides deep space contributions to mean motion dot due\n   *    to geopotential resonance with half day and one day orbits.\n   *\n   *  author        : david vallado                  719-573-2600   28 jun 2005\n   *\n   *  inputs        :\n   *    cosim, sinim-\n   *    emsq        - eccentricity squared\n   *    argpo       - argument of perigee\n   *    s1, s2, s3, s4, s5      -\n   *    ss1, ss2, ss3, ss4, ss5 -\n   *    sz1, sz3, sz11, sz13, sz21, sz23, sz31, sz33 -\n   *    t           - time\n   *    tc          -\n   *    gsto        - greenwich sidereal time                   rad\n   *    mo          - mean anomaly\n   *    mdot        - mean anomaly dot (rate)\n   *    no          - mean motion\n   *    nodeo       - right ascension of ascending node\n   *    nodedot     - right ascension of ascending node dot (rate)\n   *    xpidot      -\n   *    z1, z3, z11, z13, z21, z23, z31, z33 -\n   *    eccm        - eccentricity\n   *    argpm       - argument of perigee\n   *    inclm       - inclination\n   *    mm          - mean anomaly\n   *    xn          - mean motion\n   *    nodem       - right ascension of ascending node\n   *\n   *  outputs       :\n   *    em          - eccentricity\n   *    argpm       - argument of perigee\n   *    inclm       - inclination\n   *    mm          - mean anomaly\n   *    nm          - mean motion\n   *    nodem       - right ascension of ascending node\n   *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n   *    atime       -\n   *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433    -\n   *    dedt        -\n   *    didt        -\n   *    dmdt        -\n   *    dndt        -\n   *    dnodt       -\n   *    domdt       -\n   *    del1, del2, del3        -\n   *    ses  , sghl , sghs , sgs  , shl  , shs  , sis  , sls\n   *    theta       -\n   *    xfact       -\n   *    xlamo       -\n   *    xli         -\n   *    xni\n   *\n   *  locals        :\n   *    ainv2       -\n   *    aonv        -\n   *    cosisq      -\n   *    eoc         -\n   *    f220, f221, f311, f321, f322, f330, f441, f442, f522, f523, f542, f543  -\n   *    g200, g201, g211, g300, g310, g322, g410, g422, g520, g521, g532, g533  -\n   *    sini2       -\n   *    temp        -\n   *    temp1       -\n   *    theta       -\n   *    xno2        -\n   *\n   *  coupling      :\n   *    getgravconst\n   *\n   *  references    :\n   *    hoots, roehrich, norad spacetrack report #3 1980\n   *    hoots, norad spacetrack report #6 1986\n   *    hoots, schumacher and glover 2004\n   *    vallado, crawford, hujsak, kelso  2006\n   ----------------------------------------------------------------------------*/\n\n  function dsinit(options) {\n    var cosim = options.cosim,\n        argpo = options.argpo,\n        s1 = options.s1,\n        s2 = options.s2,\n        s3 = options.s3,\n        s4 = options.s4,\n        s5 = options.s5,\n        sinim = options.sinim,\n        ss1 = options.ss1,\n        ss2 = options.ss2,\n        ss3 = options.ss3,\n        ss4 = options.ss4,\n        ss5 = options.ss5,\n        sz1 = options.sz1,\n        sz3 = options.sz3,\n        sz11 = options.sz11,\n        sz13 = options.sz13,\n        sz21 = options.sz21,\n        sz23 = options.sz23,\n        sz31 = options.sz31,\n        sz33 = options.sz33,\n        t = options.t,\n        tc = options.tc,\n        gsto = options.gsto,\n        mo = options.mo,\n        mdot = options.mdot,\n        no = options.no,\n        nodeo = options.nodeo,\n        nodedot = options.nodedot,\n        xpidot = options.xpidot,\n        z1 = options.z1,\n        z3 = options.z3,\n        z11 = options.z11,\n        z13 = options.z13,\n        z21 = options.z21,\n        z23 = options.z23,\n        z31 = options.z31,\n        z33 = options.z33,\n        ecco = options.ecco,\n        eccsq = options.eccsq;\n    var emsq = options.emsq,\n        em = options.em,\n        argpm = options.argpm,\n        inclm = options.inclm,\n        mm = options.mm,\n        nm = options.nm,\n        nodem = options.nodem,\n        irez = options.irez,\n        atime = options.atime,\n        d2201 = options.d2201,\n        d2211 = options.d2211,\n        d3210 = options.d3210,\n        d3222 = options.d3222,\n        d4410 = options.d4410,\n        d4422 = options.d4422,\n        d5220 = options.d5220,\n        d5232 = options.d5232,\n        d5421 = options.d5421,\n        d5433 = options.d5433,\n        dedt = options.dedt,\n        didt = options.didt,\n        dmdt = options.dmdt,\n        dnodt = options.dnodt,\n        domdt = options.domdt,\n        del1 = options.del1,\n        del2 = options.del2,\n        del3 = options.del3,\n        xfact = options.xfact,\n        xlamo = options.xlamo,\n        xli = options.xli,\n        xni = options.xni;\n    var f220;\n    var f221;\n    var f311;\n    var f321;\n    var f322;\n    var f330;\n    var f441;\n    var f442;\n    var f522;\n    var f523;\n    var f542;\n    var f543;\n    var g200;\n    var g201;\n    var g211;\n    var g300;\n    var g310;\n    var g322;\n    var g410;\n    var g422;\n    var g520;\n    var g521;\n    var g532;\n    var g533;\n    var sini2;\n    var temp;\n    var temp1;\n    var xno2;\n    var ainv2;\n    var aonv;\n    var cosisq;\n    var eoc;\n    var q22 = 1.7891679e-6;\n    var q31 = 2.1460748e-6;\n    var q33 = 2.2123015e-7;\n    var root22 = 1.7891679e-6;\n    var root44 = 7.3636953e-9;\n    var root54 = 2.1765803e-9;\n    var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n\n    var root32 = 3.7393792e-7;\n    var root52 = 1.1428639e-7;\n    var znl = 1.5835218e-4;\n    var zns = 1.19459e-5; // -------------------- deep space initialization ------------\n\n    irez = 0;\n\n    if (nm < 0.0052359877 && nm > 0.0034906585) {\n      irez = 1;\n    }\n\n    if (nm >= 8.26e-3 && nm <= 9.24e-3 && em >= 0.5) {\n      irez = 2;\n    } // ------------------------ do solar terms -------------------\n\n\n    var ses = ss1 * zns * ss5;\n    var sis = ss2 * zns * (sz11 + sz13);\n    var sls = -zns * ss3 * (sz1 + sz3 - 14.0 - 6.0 * emsq);\n    var sghs = ss4 * zns * (sz31 + sz33 - 6.0);\n    var shs = -zns * ss2 * (sz21 + sz23); // sgp4fix for 180 deg incl\n\n    if (inclm < 5.2359877e-2 || inclm > pi - 5.2359877e-2) {\n      shs = 0.0;\n    }\n\n    if (sinim !== 0.0) {\n      shs /= sinim;\n    }\n\n    var sgs = sghs - cosim * shs; // ------------------------- do lunar terms ------------------\n\n    dedt = ses + s1 * znl * s5;\n    didt = sis + s2 * znl * (z11 + z13);\n    dmdt = sls - znl * s3 * (z1 + z3 - 14.0 - 6.0 * emsq);\n    var sghl = s4 * znl * (z31 + z33 - 6.0);\n    var shll = -znl * s2 * (z21 + z23); // sgp4fix for 180 deg incl\n\n    if (inclm < 5.2359877e-2 || inclm > pi - 5.2359877e-2) {\n      shll = 0.0;\n    }\n\n    domdt = sgs + sghl;\n    dnodt = shs;\n\n    if (sinim !== 0.0) {\n      domdt -= cosim / sinim * shll;\n      dnodt += shll / sinim;\n    } // ----------- calculate deep space resonance effects --------\n\n\n    var dndt = 0.0;\n    var theta = (gsto + tc * rptim) % twoPi;\n    em += dedt * t;\n    inclm += didt * t;\n    argpm += domdt * t;\n    nodem += dnodt * t;\n    mm += dmdt * t; // sgp4fix for negative inclinations\n    // the following if statement should be commented out\n    // if (inclm < 0.0)\n    // {\n    //   inclm  = -inclm;\n    //   argpm  = argpm - pi;\n    //   nodem = nodem + pi;\n    // }\n    // -------------- initialize the resonance terms -------------\n\n    if (irez !== 0) {\n      aonv = Math.pow(nm / xke, x2o3); // ---------- geopotential resonance for 12 hour orbits ------\n\n      if (irez === 2) {\n        cosisq = cosim * cosim;\n        var emo = em;\n        em = ecco;\n        var emsqo = emsq;\n        emsq = eccsq;\n        eoc = em * emsq;\n        g201 = -0.306 - (em - 0.64) * 0.440;\n\n        if (em <= 0.65) {\n          g211 = 3.616 - 13.2470 * em + 16.2900 * emsq;\n          g310 = -19.302 + 117.3900 * em - 228.4190 * emsq + 156.5910 * eoc;\n          g322 = -18.9068 + 109.7927 * em - 214.6334 * emsq + 146.5816 * eoc;\n          g410 = -41.122 + 242.6940 * em - 471.0940 * emsq + 313.9530 * eoc;\n          g422 = -146.407 + 841.8800 * em - 1629.014 * emsq + 1083.4350 * eoc;\n          g520 = -532.114 + 3017.977 * em - 5740.032 * emsq + 3708.2760 * eoc;\n        } else {\n          g211 = -72.099 + 331.819 * em - 508.738 * emsq + 266.724 * eoc;\n          g310 = -346.844 + 1582.851 * em - 2415.925 * emsq + 1246.113 * eoc;\n          g322 = -342.585 + 1554.908 * em - 2366.899 * emsq + 1215.972 * eoc;\n          g410 = -1052.797 + 4758.686 * em - 7193.992 * emsq + 3651.957 * eoc;\n          g422 = -3581.690 + 16178.110 * em - 24462.770 * emsq + 12422.520 * eoc;\n\n          if (em > 0.715) {\n            g520 = -5149.66 + 29936.92 * em - 54087.36 * emsq + 31324.56 * eoc;\n          } else {\n            g520 = 1464.74 - 4664.75 * em + 3763.64 * emsq;\n          }\n        }\n\n        if (em < 0.7) {\n          g533 = -919.22770 + 4988.6100 * em - 9064.7700 * emsq + 5542.21 * eoc;\n          g521 = -822.71072 + 4568.6173 * em - 8491.4146 * emsq + 5337.524 * eoc;\n          g532 = -853.66600 + 4690.2500 * em - 8624.7700 * emsq + 5341.4 * eoc;\n        } else {\n          g533 = -37995.780 + 161616.52 * em - 229838.20 * emsq + 109377.94 * eoc;\n          g521 = -51752.104 + 218913.95 * em - 309468.16 * emsq + 146349.42 * eoc;\n          g532 = -40023.880 + 170470.89 * em - 242699.48 * emsq + 115605.82 * eoc;\n        }\n\n        sini2 = sinim * sinim;\n        f220 = 0.75 * (1.0 + 2.0 * cosim + cosisq);\n        f221 = 1.5 * sini2;\n        f321 = 1.875 * sinim * (1.0 - 2.0 * cosim - 3.0 * cosisq);\n        f322 = -1.875 * sinim * (1.0 + 2.0 * cosim - 3.0 * cosisq);\n        f441 = 35.0 * sini2 * f220;\n        f442 = 39.3750 * sini2 * sini2;\n        f522 = 9.84375 * sinim * (sini2 * (1.0 - 2.0 * cosim - 5.0 * cosisq) + 0.33333333 * (-2.0 + 4.0 * cosim + 6.0 * cosisq));\n        f523 = sinim * (4.92187512 * sini2 * (-2.0 - 4.0 * cosim + 10.0 * cosisq) + 6.56250012 * (1.0 + 2.0 * cosim - 3.0 * cosisq));\n        f542 = 29.53125 * sinim * (2.0 - 8.0 * cosim + cosisq * (-12.0 + 8.0 * cosim + 10.0 * cosisq));\n        f543 = 29.53125 * sinim * (-2.0 - 8.0 * cosim + cosisq * (12.0 + 8.0 * cosim - 10.0 * cosisq));\n        xno2 = nm * nm;\n        ainv2 = aonv * aonv;\n        temp1 = 3.0 * xno2 * ainv2;\n        temp = temp1 * root22;\n        d2201 = temp * f220 * g201;\n        d2211 = temp * f221 * g211;\n        temp1 *= aonv;\n        temp = temp1 * root32;\n        d3210 = temp * f321 * g310;\n        d3222 = temp * f322 * g322;\n        temp1 *= aonv;\n        temp = 2.0 * temp1 * root44;\n        d4410 = temp * f441 * g410;\n        d4422 = temp * f442 * g422;\n        temp1 *= aonv;\n        temp = temp1 * root52;\n        d5220 = temp * f522 * g520;\n        d5232 = temp * f523 * g532;\n        temp = 2.0 * temp1 * root54;\n        d5421 = temp * f542 * g521;\n        d5433 = temp * f543 * g533;\n        xlamo = (mo + nodeo + nodeo - (theta + theta)) % twoPi;\n        xfact = mdot + dmdt + 2.0 * (nodedot + dnodt - rptim) - no;\n        em = emo;\n        emsq = emsqo;\n      } //  ---------------- synchronous resonance terms --------------\n\n\n      if (irez === 1) {\n        g200 = 1.0 + emsq * (-2.5 + 0.8125 * emsq);\n        g310 = 1.0 + 2.0 * emsq;\n        g300 = 1.0 + emsq * (-6.0 + 6.60937 * emsq);\n        f220 = 0.75 * (1.0 + cosim) * (1.0 + cosim);\n        f311 = 0.9375 * sinim * sinim * (1.0 + 3.0 * cosim) - 0.75 * (1.0 + cosim);\n        f330 = 1.0 + cosim;\n        f330 *= 1.875 * f330 * f330;\n        del1 = 3.0 * nm * nm * aonv * aonv;\n        del2 = 2.0 * del1 * f220 * g200 * q22;\n        del3 = 3.0 * del1 * f330 * g300 * q33 * aonv;\n        del1 = del1 * f311 * g310 * q31 * aonv;\n        xlamo = (mo + nodeo + argpo - theta) % twoPi;\n        xfact = mdot + xpidot + dmdt + domdt + dnodt - (no + rptim);\n      } //  ------------ for sgp4, initialize the integrator ----------\n\n\n      xli = xlamo;\n      xni = no;\n      atime = 0.0;\n      nm = no + dndt;\n    }\n\n    return {\n      em: em,\n      argpm: argpm,\n      inclm: inclm,\n      mm: mm,\n      nm: nm,\n      nodem: nodem,\n      irez: irez,\n      atime: atime,\n      d2201: d2201,\n      d2211: d2211,\n      d3210: d3210,\n      d3222: d3222,\n      d4410: d4410,\n      d4422: d4422,\n      d5220: d5220,\n      d5232: d5232,\n      d5421: d5421,\n      d5433: d5433,\n      dedt: dedt,\n      didt: didt,\n      dmdt: dmdt,\n      dndt: dndt,\n      dnodt: dnodt,\n      domdt: domdt,\n      del1: del1,\n      del2: del2,\n      del3: del3,\n      xfact: xfact,\n      xlamo: xlamo,\n      xli: xli,\n      xni: xni\n    };\n  }\n\n  /* -----------------------------------------------------------------------------\n   *\n   *                           function gstime\n   *\n   *  this function finds the greenwich sidereal time.\n   *\n   *  author        : david vallado                  719-573-2600    1 mar 2001\n   *\n   *  inputs          description                    range / units\n   *    jdut1       - julian date in ut1             days from 4713 bc\n   *\n   *  outputs       :\n   *    gstime      - greenwich sidereal time        0 to 2pi rad\n   *\n   *  locals        :\n   *    temp        - temporary variable for doubles   rad\n   *    tut1        - julian centuries from the\n   *                  jan 1, 2000 12 h epoch (ut1)\n   *\n   *  coupling      :\n   *    none\n   *\n   *  references    :\n   *    vallado       2004, 191, eq 3-45\n   * --------------------------------------------------------------------------- */\n\n  function gstimeInternal(jdut1) {\n    var tut1 = (jdut1 - 2451545.0) / 36525.0;\n    var temp = -6.2e-6 * tut1 * tut1 * tut1 + 0.093104 * tut1 * tut1 + (876600.0 * 3600 + 8640184.812866) * tut1 + 67310.54841; // # sec\n\n    temp = temp * deg2rad / 240.0 % twoPi; // 360/86400 = 1/240, to deg, to rad\n    //  ------------------------ check quadrants ---------------------\n\n    if (temp < 0.0) {\n      temp += twoPi;\n    }\n\n    return temp;\n  }\n\n  function gstime() {\n    if ((arguments.length <= 0 ? undefined : arguments[0]) instanceof Date || arguments.length > 1) {\n      return gstimeInternal(jday.apply(void 0, arguments));\n    }\n\n    return gstimeInternal.apply(void 0, arguments);\n  }\n\n  /*-----------------------------------------------------------------------------\n   *\n   *                           procedure initl\n   *\n   *  this procedure initializes the sgp4 propagator. all the initialization is\n   *    consolidated here instead of having multiple loops inside other routines.\n   *\n   *  author        : david vallado                  719-573-2600   28 jun 2005\n   *\n   *  inputs        :\n   *    ecco        - eccentricity                           0.0 - 1.0\n   *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n   *    inclo       - inclination of satellite\n   *    no          - mean motion of satellite\n   *    satn        - satellite number\n   *\n   *  outputs       :\n   *    ainv        - 1.0 / a\n   *    ao          - semi major axis\n   *    con41       -\n   *    con42       - 1.0 - 5.0 cos(i)\n   *    cosio       - cosine of inclination\n   *    cosio2      - cosio squared\n   *    eccsq       - eccentricity squared\n   *    method      - flag for deep space                    'd', 'n'\n   *    omeosq      - 1.0 - ecco * ecco\n   *    posq        - semi-parameter squared\n   *    rp          - radius of perigee\n   *    rteosq      - square root of (1.0 - ecco*ecco)\n   *    sinio       - sine of inclination\n   *    gsto        - gst at time of observation               rad\n   *    no          - mean motion of satellite\n   *\n   *  locals        :\n   *    ak          -\n   *    d1          -\n   *    del         -\n   *    adel        -\n   *    po          -\n   *\n   *  coupling      :\n   *    getgravconst\n   *    gstime      - find greenwich sidereal time from the julian date\n   *\n   *  references    :\n   *    hoots, roehrich, norad spacetrack report #3 1980\n   *    hoots, norad spacetrack report #6 1986\n   *    hoots, schumacher and glover 2004\n   *    vallado, crawford, hujsak, kelso  2006\n   ----------------------------------------------------------------------------*/\n\n  function initl(options) {\n    var ecco = options.ecco,\n        epoch = options.epoch,\n        inclo = options.inclo,\n        opsmode = options.opsmode;\n    var no = options.no; // sgp4fix use old way of finding gst\n    // ----------------------- earth constants ---------------------\n    // sgp4fix identify constants and allow alternate values\n    // ------------- calculate auxillary epoch quantities ----------\n\n    var eccsq = ecco * ecco;\n    var omeosq = 1.0 - eccsq;\n    var rteosq = Math.sqrt(omeosq);\n    var cosio = Math.cos(inclo);\n    var cosio2 = cosio * cosio; // ------------------ un-kozai the mean motion -----------------\n\n    var ak = Math.pow(xke / no, x2o3);\n    var d1 = 0.75 * j2 * (3.0 * cosio2 - 1.0) / (rteosq * omeosq);\n    var delPrime = d1 / (ak * ak);\n    var adel = ak * (1.0 - delPrime * delPrime - delPrime * (1.0 / 3.0 + 134.0 * delPrime * delPrime / 81.0));\n    delPrime = d1 / (adel * adel);\n    no /= 1.0 + delPrime;\n    var ao = Math.pow(xke / no, x2o3);\n    var sinio = Math.sin(inclo);\n    var po = ao * omeosq;\n    var con42 = 1.0 - 5.0 * cosio2;\n    var con41 = -con42 - cosio2 - cosio2;\n    var ainv = 1.0 / ao;\n    var posq = po * po;\n    var rp = ao * (1.0 - ecco);\n    var method = 'n'; //  sgp4fix modern approach to finding sidereal time\n\n    var gsto;\n\n    if (opsmode === 'a') {\n      //  sgp4fix use old way of finding gst\n      //  count integer number of days from 0 jan 1970\n      var ts70 = epoch - 7305.0;\n      var ds70 = Math.floor(ts70 + 1.0e-8);\n      var tfrac = ts70 - ds70; //  find greenwich location at epoch\n\n      var c1 = 1.72027916940703639e-2;\n      var thgr70 = 1.7321343856509374;\n      var fk5r = 5.07551419432269442e-15;\n      var c1p2p = c1 + twoPi;\n      gsto = (thgr70 + c1 * ds70 + c1p2p * tfrac + ts70 * ts70 * fk5r) % twoPi;\n\n      if (gsto < 0.0) {\n        gsto += twoPi;\n      }\n    } else {\n      gsto = gstime(epoch + 2433281.5);\n    }\n\n    return {\n      no: no,\n      method: method,\n      ainv: ainv,\n      ao: ao,\n      con41: con41,\n      con42: con42,\n      cosio: cosio,\n      cosio2: cosio2,\n      eccsq: eccsq,\n      omeosq: omeosq,\n      posq: posq,\n      rp: rp,\n      rteosq: rteosq,\n      sinio: sinio,\n      gsto: gsto\n    };\n  }\n\n  /*-----------------------------------------------------------------------------\n   *\n   *                           procedure dspace\n   *\n   *  this procedure provides deep space contributions to mean elements for\n   *    perturbing third body.  these effects have been averaged over one\n   *    revolution of the sun and moon.  for earth resonance effects, the\n   *    effects have been averaged over no revolutions of the satellite.\n   *    (mean motion)\n   *\n   *  author        : david vallado                  719-573-2600   28 jun 2005\n   *\n   *  inputs        :\n   *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433 -\n   *    dedt        -\n   *    del1, del2, del3  -\n   *    didt        -\n   *    dmdt        -\n   *    dnodt       -\n   *    domdt       -\n   *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n   *    argpo       - argument of perigee\n   *    argpdot     - argument of perigee dot (rate)\n   *    t           - time\n   *    tc          -\n   *    gsto        - gst\n   *    xfact       -\n   *    xlamo       -\n   *    no          - mean motion\n   *    atime       -\n   *    em          - eccentricity\n   *    ft          -\n   *    argpm       - argument of perigee\n   *    inclm       - inclination\n   *    xli         -\n   *    mm          - mean anomaly\n   *    xni         - mean motion\n   *    nodem       - right ascension of ascending node\n   *\n   *  outputs       :\n   *    atime       -\n   *    em          - eccentricity\n   *    argpm       - argument of perigee\n   *    inclm       - inclination\n   *    xli         -\n   *    mm          - mean anomaly\n   *    xni         -\n   *    nodem       - right ascension of ascending node\n   *    dndt        -\n   *    nm          - mean motion\n   *\n   *  locals        :\n   *    delt        -\n   *    ft          -\n   *    theta       -\n   *    x2li        -\n   *    x2omi       -\n   *    xl          -\n   *    xldot       -\n   *    xnddt       -\n   *    xndt        -\n   *    xomi        -\n   *\n   *  coupling      :\n   *    none        -\n   *\n   *  references    :\n   *    hoots, roehrich, norad spacetrack report #3 1980\n   *    hoots, norad spacetrack report #6 1986\n   *    hoots, schumacher and glover 2004\n   *    vallado, crawford, hujsak, kelso  2006\n   ----------------------------------------------------------------------------*/\n\n  function dspace(options) {\n    var irez = options.irez,\n        d2201 = options.d2201,\n        d2211 = options.d2211,\n        d3210 = options.d3210,\n        d3222 = options.d3222,\n        d4410 = options.d4410,\n        d4422 = options.d4422,\n        d5220 = options.d5220,\n        d5232 = options.d5232,\n        d5421 = options.d5421,\n        d5433 = options.d5433,\n        dedt = options.dedt,\n        del1 = options.del1,\n        del2 = options.del2,\n        del3 = options.del3,\n        didt = options.didt,\n        dmdt = options.dmdt,\n        dnodt = options.dnodt,\n        domdt = options.domdt,\n        argpo = options.argpo,\n        argpdot = options.argpdot,\n        t = options.t,\n        tc = options.tc,\n        gsto = options.gsto,\n        xfact = options.xfact,\n        xlamo = options.xlamo,\n        no = options.no;\n    var atime = options.atime,\n        em = options.em,\n        argpm = options.argpm,\n        inclm = options.inclm,\n        xli = options.xli,\n        mm = options.mm,\n        xni = options.xni,\n        nodem = options.nodem,\n        nm = options.nm;\n    var fasx2 = 0.13130908;\n    var fasx4 = 2.8843198;\n    var fasx6 = 0.37448087;\n    var g22 = 5.7686396;\n    var g32 = 0.95240898;\n    var g44 = 1.8014998;\n    var g52 = 1.0508330;\n    var g54 = 4.4108898;\n    var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n\n    var stepp = 720.0;\n    var stepn = -720.0;\n    var step2 = 259200.0;\n    var delt;\n    var x2li;\n    var x2omi;\n    var xl;\n    var xldot;\n    var xnddt;\n    var xndt;\n    var xomi;\n    var dndt = 0.0;\n    var ft = 0.0; //  ----------- calculate deep space resonance effects -----------\n\n    var theta = (gsto + tc * rptim) % twoPi;\n    em += dedt * t;\n    inclm += didt * t;\n    argpm += domdt * t;\n    nodem += dnodt * t;\n    mm += dmdt * t; // sgp4fix for negative inclinations\n    // the following if statement should be commented out\n    // if (inclm < 0.0)\n    // {\n    //   inclm = -inclm;\n    //   argpm = argpm - pi;\n    //   nodem = nodem + pi;\n    // }\n\n    /* - update resonances : numerical (euler-maclaurin) integration - */\n\n    /* ------------------------- epoch restart ----------------------  */\n    //   sgp4fix for propagator problems\n    //   the following integration works for negative time steps and periods\n    //   the specific changes are unknown because the original code was so convoluted\n    // sgp4fix take out atime = 0.0 and fix for faster operation\n\n    if (irez !== 0) {\n      //  sgp4fix streamline check\n      if (atime === 0.0 || t * atime <= 0.0 || Math.abs(t) < Math.abs(atime)) {\n        atime = 0.0;\n        xni = no;\n        xli = xlamo;\n      } // sgp4fix move check outside loop\n\n\n      if (t > 0.0) {\n        delt = stepp;\n      } else {\n        delt = stepn;\n      }\n\n      var iretn = 381; // added for do loop\n\n      while (iretn === 381) {\n        //  ------------------- dot terms calculated -------------\n        //  ----------- near - synchronous resonance terms -------\n        if (irez !== 2) {\n          xndt = del1 * Math.sin(xli - fasx2) + del2 * Math.sin(2.0 * (xli - fasx4)) + del3 * Math.sin(3.0 * (xli - fasx6));\n          xldot = xni + xfact;\n          xnddt = del1 * Math.cos(xli - fasx2) + 2.0 * del2 * Math.cos(2.0 * (xli - fasx4)) + 3.0 * del3 * Math.cos(3.0 * (xli - fasx6));\n          xnddt *= xldot;\n        } else {\n          // --------- near - half-day resonance terms --------\n          xomi = argpo + argpdot * atime;\n          x2omi = xomi + xomi;\n          x2li = xli + xli;\n          xndt = d2201 * Math.sin(x2omi + xli - g22) + d2211 * Math.sin(xli - g22) + d3210 * Math.sin(xomi + xli - g32) + d3222 * Math.sin(-xomi + xli - g32) + d4410 * Math.sin(x2omi + x2li - g44) + d4422 * Math.sin(x2li - g44) + d5220 * Math.sin(xomi + xli - g52) + d5232 * Math.sin(-xomi + xli - g52) + d5421 * Math.sin(xomi + x2li - g54) + d5433 * Math.sin(-xomi + x2li - g54);\n          xldot = xni + xfact;\n          xnddt = d2201 * Math.cos(x2omi + xli - g22) + d2211 * Math.cos(xli - g22) + d3210 * Math.cos(xomi + xli - g32) + d3222 * Math.cos(-xomi + xli - g32) + d5220 * Math.cos(xomi + xli - g52) + d5232 * Math.cos(-xomi + xli - g52) + 2.0 * d4410 * Math.cos(x2omi + x2li - g44) + d4422 * Math.cos(x2li - g44) + d5421 * Math.cos(xomi + x2li - g54) + d5433 * Math.cos(-xomi + x2li - g54);\n          xnddt *= xldot;\n        } //  ----------------------- integrator -------------------\n        //  sgp4fix move end checks to end of routine\n\n\n        if (Math.abs(t - atime) >= stepp) {\n          iretn = 381;\n        } else {\n          ft = t - atime;\n          iretn = 0;\n        }\n\n        if (iretn === 381) {\n          xli += xldot * delt + xndt * step2;\n          xni += xndt * delt + xnddt * step2;\n          atime += delt;\n        }\n      }\n\n      nm = xni + xndt * ft + xnddt * ft * ft * 0.5;\n      xl = xli + xldot * ft + xndt * ft * ft * 0.5;\n\n      if (irez !== 1) {\n        mm = xl - 2.0 * nodem + 2.0 * theta;\n        dndt = nm - no;\n      } else {\n        mm = xl - nodem - argpm + theta;\n        dndt = nm - no;\n      }\n\n      nm = no + dndt;\n    }\n\n    return {\n      atime: atime,\n      em: em,\n      argpm: argpm,\n      inclm: inclm,\n      xli: xli,\n      mm: mm,\n      xni: xni,\n      nodem: nodem,\n      dndt: dndt,\n      nm: nm\n    };\n  }\n\n  /*----------------------------------------------------------------------------\n   *\n   *                             procedure sgp4\n   *\n   *  this procedure is the sgp4 prediction model from space command. this is an\n   *    updated and combined version of sgp4 and sdp4, which were originally\n   *    published separately in spacetrack report //3. this version follows the\n   *    methodology from the aiaa paper (2006) describing the history and\n   *    development of the code.\n   *\n   *  author        : david vallado                  719-573-2600   28 jun 2005\n   *\n   *  inputs        :\n   *    satrec  - initialised structure from sgp4init() call.\n   *    tsince  - time since epoch (minutes)\n   *\n   *  outputs       :\n   *    r           - position vector                     km\n   *    v           - velocity                            km/sec\n   *  return code - non-zero on error.\n   *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n   *                   2 - mean motion less than 0.0\n   *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n   *                   4 - semi-latus rectum < 0.0\n   *                   5 - epoch elements are sub-orbital\n   *                   6 - satellite has decayed\n   *\n   *  locals        :\n   *    am          -\n   *    axnl, aynl        -\n   *    betal       -\n   *    cosim   , sinim   , cosomm  , sinomm  , cnod    , snod    , cos2u   ,\n   *    sin2u   , coseo1  , sineo1  , cosi    , sini    , cosip   , sinip   ,\n   *    cosisq  , cossu   , sinsu   , cosu    , sinu\n   *    delm        -\n   *    delomg      -\n   *    dndt        -\n   *    eccm        -\n   *    emsq        -\n   *    ecose       -\n   *    el2         -\n   *    eo1         -\n   *    eccp        -\n   *    esine       -\n   *    argpm       -\n   *    argpp       -\n   *    omgadf      -\n   *    pl          -\n   *    r           -\n   *    rtemsq      -\n   *    rdotl       -\n   *    rl          -\n   *    rvdot       -\n   *    rvdotl      -\n   *    su          -\n   *    t2  , t3   , t4    , tc\n   *    tem5, temp , temp1 , temp2  , tempa  , tempe  , templ\n   *    u   , ux   , uy    , uz     , vx     , vy     , vz\n   *    inclm       - inclination\n   *    mm          - mean anomaly\n   *    nm          - mean motion\n   *    nodem       - right asc of ascending node\n   *    xinc        -\n   *    xincp       -\n   *    xl          -\n   *    xlm         -\n   *    mp          -\n   *    xmdf        -\n   *    xmx         -\n   *    xmy         -\n   *    nodedf      -\n   *    xnode       -\n   *    nodep       -\n   *    np          -\n   *\n   *  coupling      :\n   *    getgravconst-\n   *    dpper\n   *    dspace\n   *\n   *  references    :\n   *    hoots, roehrich, norad spacetrack report //3 1980\n   *    hoots, norad spacetrack report //6 1986\n   *    hoots, schumacher and glover 2004\n   *    vallado, crawford, hujsak, kelso  2006\n   ----------------------------------------------------------------------------*/\n\n  function sgp4(satrec, tsince) {\n    /* eslint-disable no-param-reassign */\n    var coseo1;\n    var sineo1;\n    var cosip;\n    var sinip;\n    var cosisq;\n    var delm;\n    var delomg;\n    var eo1;\n    var argpm;\n    var argpp;\n    var su;\n    var t3;\n    var t4;\n    var tc;\n    var tem5;\n    var temp;\n    var tempa;\n    var tempe;\n    var templ;\n    var inclm;\n    var mm;\n    var nm;\n    var nodem;\n    var xincp;\n    var xlm;\n    var mp;\n    var nodep;\n    /* ------------------ set mathematical constants --------------- */\n    // sgp4fix divisor for divide by zero check on inclination\n    // the old check used 1.0 + cos(pi-1.0e-9), but then compared it to\n    // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n    var temp4 = 1.5e-12; // --------------------- clear sgp4 error flag -----------------\n\n    satrec.t = tsince;\n    satrec.error = 0; //  ------- update for secular gravity and atmospheric drag -----\n\n    var xmdf = satrec.mo + satrec.mdot * satrec.t;\n    var argpdf = satrec.argpo + satrec.argpdot * satrec.t;\n    var nodedf = satrec.nodeo + satrec.nodedot * satrec.t;\n    argpm = argpdf;\n    mm = xmdf;\n    var t2 = satrec.t * satrec.t;\n    nodem = nodedf + satrec.nodecf * t2;\n    tempa = 1.0 - satrec.cc1 * satrec.t;\n    tempe = satrec.bstar * satrec.cc4 * satrec.t;\n    templ = satrec.t2cof * t2;\n\n    if (satrec.isimp !== 1) {\n      delomg = satrec.omgcof * satrec.t; //  sgp4fix use mutliply for speed instead of pow\n\n      var delmtemp = 1.0 + satrec.eta * Math.cos(xmdf);\n      delm = satrec.xmcof * (delmtemp * delmtemp * delmtemp - satrec.delmo);\n      temp = delomg + delm;\n      mm = xmdf + temp;\n      argpm = argpdf - temp;\n      t3 = t2 * satrec.t;\n      t4 = t3 * satrec.t;\n      tempa = tempa - satrec.d2 * t2 - satrec.d3 * t3 - satrec.d4 * t4;\n      tempe += satrec.bstar * satrec.cc5 * (Math.sin(mm) - satrec.sinmao);\n      templ = templ + satrec.t3cof * t3 + t4 * (satrec.t4cof + satrec.t * satrec.t5cof);\n    }\n\n    nm = satrec.no;\n    var em = satrec.ecco;\n    inclm = satrec.inclo;\n\n    if (satrec.method === 'd') {\n      tc = satrec.t;\n      var dspaceOptions = {\n        irez: satrec.irez,\n        d2201: satrec.d2201,\n        d2211: satrec.d2211,\n        d3210: satrec.d3210,\n        d3222: satrec.d3222,\n        d4410: satrec.d4410,\n        d4422: satrec.d4422,\n        d5220: satrec.d5220,\n        d5232: satrec.d5232,\n        d5421: satrec.d5421,\n        d5433: satrec.d5433,\n        dedt: satrec.dedt,\n        del1: satrec.del1,\n        del2: satrec.del2,\n        del3: satrec.del3,\n        didt: satrec.didt,\n        dmdt: satrec.dmdt,\n        dnodt: satrec.dnodt,\n        domdt: satrec.domdt,\n        argpo: satrec.argpo,\n        argpdot: satrec.argpdot,\n        t: satrec.t,\n        tc: tc,\n        gsto: satrec.gsto,\n        xfact: satrec.xfact,\n        xlamo: satrec.xlamo,\n        no: satrec.no,\n        atime: satrec.atime,\n        em: em,\n        argpm: argpm,\n        inclm: inclm,\n        xli: satrec.xli,\n        mm: mm,\n        xni: satrec.xni,\n        nodem: nodem,\n        nm: nm\n      };\n      var dspaceResult = dspace(dspaceOptions);\n      em = dspaceResult.em;\n      argpm = dspaceResult.argpm;\n      inclm = dspaceResult.inclm;\n      mm = dspaceResult.mm;\n      nodem = dspaceResult.nodem;\n      nm = dspaceResult.nm;\n    }\n\n    if (nm <= 0.0) {\n      // printf(\"// error nm %f\\n\", nm);\n      satrec.error = 2; // sgp4fix add return\n\n      return [false, false];\n    }\n\n    var am = Math.pow(xke / nm, x2o3) * tempa * tempa;\n    nm = xke / Math.pow(am, 1.5);\n    em -= tempe; // fix tolerance for error recognition\n    // sgp4fix am is fixed from the previous nm check\n\n    if (em >= 1.0 || em < -0.001) {\n      // || (am < 0.95)\n      // printf(\"// error em %f\\n\", em);\n      satrec.error = 1; // sgp4fix to return if there is an error in eccentricity\n\n      return [false, false];\n    } //  sgp4fix fix tolerance to avoid a divide by zero\n\n\n    if (em < 1.0e-6) {\n      em = 1.0e-6;\n    }\n\n    mm += satrec.no * templ;\n    xlm = mm + argpm + nodem;\n    nodem %= twoPi;\n    argpm %= twoPi;\n    xlm %= twoPi;\n    mm = (xlm - argpm - nodem) % twoPi; // ----------------- compute extra mean quantities -------------\n\n    var sinim = Math.sin(inclm);\n    var cosim = Math.cos(inclm); // -------------------- add lunar-solar periodics --------------\n\n    var ep = em;\n    xincp = inclm;\n    argpp = argpm;\n    nodep = nodem;\n    mp = mm;\n    sinip = sinim;\n    cosip = cosim;\n\n    if (satrec.method === 'd') {\n      var dpperParameters = {\n        inclo: satrec.inclo,\n        init: 'n',\n        ep: ep,\n        inclp: xincp,\n        nodep: nodep,\n        argpp: argpp,\n        mp: mp,\n        opsmode: satrec.operationmode\n      };\n      var dpperResult = dpper(satrec, dpperParameters);\n      ep = dpperResult.ep;\n      nodep = dpperResult.nodep;\n      argpp = dpperResult.argpp;\n      mp = dpperResult.mp;\n      xincp = dpperResult.inclp;\n\n      if (xincp < 0.0) {\n        xincp = -xincp;\n        nodep += pi;\n        argpp -= pi;\n      }\n\n      if (ep < 0.0 || ep > 1.0) {\n        //  printf(\"// error ep %f\\n\", ep);\n        satrec.error = 3; //  sgp4fix add return\n\n        return [false, false];\n      }\n    } //  -------------------- long period periodics ------------------\n\n\n    if (satrec.method === 'd') {\n      sinip = Math.sin(xincp);\n      cosip = Math.cos(xincp);\n      satrec.aycof = -0.5 * j3oj2 * sinip; //  sgp4fix for divide by zero for xincp = 180 deg\n\n      if (Math.abs(cosip + 1.0) > 1.5e-12) {\n        satrec.xlcof = -0.25 * j3oj2 * sinip * (3.0 + 5.0 * cosip) / (1.0 + cosip);\n      } else {\n        satrec.xlcof = -0.25 * j3oj2 * sinip * (3.0 + 5.0 * cosip) / temp4;\n      }\n    }\n\n    var axnl = ep * Math.cos(argpp);\n    temp = 1.0 / (am * (1.0 - ep * ep));\n    var aynl = ep * Math.sin(argpp) + temp * satrec.aycof;\n    var xl = mp + argpp + nodep + temp * satrec.xlcof * axnl; // --------------------- solve kepler's equation ---------------\n\n    var u = (xl - nodep) % twoPi;\n    eo1 = u;\n    tem5 = 9999.9;\n    var ktr = 1; //    sgp4fix for kepler iteration\n    //    the following iteration needs better limits on corrections\n\n    while (Math.abs(tem5) >= 1.0e-12 && ktr <= 10) {\n      sineo1 = Math.sin(eo1);\n      coseo1 = Math.cos(eo1);\n      tem5 = 1.0 - coseo1 * axnl - sineo1 * aynl;\n      tem5 = (u - aynl * coseo1 + axnl * sineo1 - eo1) / tem5;\n\n      if (Math.abs(tem5) >= 0.95) {\n        if (tem5 > 0.0) {\n          tem5 = 0.95;\n        } else {\n          tem5 = -0.95;\n        }\n      }\n\n      eo1 += tem5;\n      ktr += 1;\n    } //  ------------- short period preliminary quantities -----------\n\n\n    var ecose = axnl * coseo1 + aynl * sineo1;\n    var esine = axnl * sineo1 - aynl * coseo1;\n    var el2 = axnl * axnl + aynl * aynl;\n    var pl = am * (1.0 - el2);\n\n    if (pl < 0.0) {\n      //  printf(\"// error pl %f\\n\", pl);\n      satrec.error = 4; //  sgp4fix add return\n\n      return [false, false];\n    }\n\n    var rl = am * (1.0 - ecose);\n    var rdotl = Math.sqrt(am) * esine / rl;\n    var rvdotl = Math.sqrt(pl) / rl;\n    var betal = Math.sqrt(1.0 - el2);\n    temp = esine / (1.0 + betal);\n    var sinu = am / rl * (sineo1 - aynl - axnl * temp);\n    var cosu = am / rl * (coseo1 - axnl + aynl * temp);\n    su = Math.atan2(sinu, cosu);\n    var sin2u = (cosu + cosu) * sinu;\n    var cos2u = 1.0 - 2.0 * sinu * sinu;\n    temp = 1.0 / pl;\n    var temp1 = 0.5 * j2 * temp;\n    var temp2 = temp1 * temp; // -------------- update for short period periodics ------------\n\n    if (satrec.method === 'd') {\n      cosisq = cosip * cosip;\n      satrec.con41 = 3.0 * cosisq - 1.0;\n      satrec.x1mth2 = 1.0 - cosisq;\n      satrec.x7thm1 = 7.0 * cosisq - 1.0;\n    }\n\n    var mrt = rl * (1.0 - 1.5 * temp2 * betal * satrec.con41) + 0.5 * temp1 * satrec.x1mth2 * cos2u; // sgp4fix for decaying satellites\n\n    if (mrt < 1.0) {\n      // printf(\"// decay condition %11.6f \\n\",mrt);\n      satrec.error = 6;\n      return {\n        position: false,\n        velocity: false\n      };\n    }\n\n    su -= 0.25 * temp2 * satrec.x7thm1 * sin2u;\n    var xnode = nodep + 1.5 * temp2 * cosip * sin2u;\n    var xinc = xincp + 1.5 * temp2 * cosip * sinip * cos2u;\n    var mvt = rdotl - nm * temp1 * satrec.x1mth2 * sin2u / xke;\n    var rvdot = rvdotl + nm * temp1 * (satrec.x1mth2 * cos2u + 1.5 * satrec.con41) / xke; // --------------------- orientation vectors -------------------\n\n    var sinsu = Math.sin(su);\n    var cossu = Math.cos(su);\n    var snod = Math.sin(xnode);\n    var cnod = Math.cos(xnode);\n    var sini = Math.sin(xinc);\n    var cosi = Math.cos(xinc);\n    var xmx = -snod * cosi;\n    var xmy = cnod * cosi;\n    var ux = xmx * sinsu + cnod * cossu;\n    var uy = xmy * sinsu + snod * cossu;\n    var uz = sini * sinsu;\n    var vx = xmx * cossu - cnod * sinsu;\n    var vy = xmy * cossu - snod * sinsu;\n    var vz = sini * cossu; // --------- position and velocity (in km and km/sec) ----------\n\n    var r = {\n      x: mrt * ux * earthRadius,\n      y: mrt * uy * earthRadius,\n      z: mrt * uz * earthRadius\n    };\n    var v = {\n      x: (mvt * ux + rvdot * vx) * vkmpersec,\n      y: (mvt * uy + rvdot * vy) * vkmpersec,\n      z: (mvt * uz + rvdot * vz) * vkmpersec\n    };\n    return {\n      position: r,\n      velocity: v\n    };\n    /* eslint-enable no-param-reassign */\n  }\n\n  /*-----------------------------------------------------------------------------\n   *\n   *                             procedure sgp4init\n   *\n   *  this procedure initializes variables for sgp4.\n   *\n   *  author        : david vallado                  719-573-2600   28 jun 2005\n   *  author        : david vallado                  719-573-2600   28 jun 2005\n   *\n   *  inputs        :\n   *    opsmode     - mode of operation afspc or improved 'a', 'i'\n   *    satn        - satellite number\n   *    bstar       - sgp4 type drag coefficient              kg/m2er\n   *    ecco        - eccentricity\n   *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n   *    argpo       - argument of perigee (output if ds)\n   *    inclo       - inclination\n   *    mo          - mean anomaly (output if ds)\n   *    no          - mean motion\n   *    nodeo       - right ascension of ascending node\n   *\n   *  outputs       :\n   *    rec      - common values for subsequent calls\n   *    return code - non-zero on error.\n   *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n   *                   2 - mean motion less than 0.0\n   *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n   *                   4 - semi-latus rectum < 0.0\n   *                   5 - epoch elements are sub-orbital\n   *                   6 - satellite has decayed\n   *\n   *  locals        :\n   *    cnodm  , snodm  , cosim  , sinim  , cosomm , sinomm\n   *    cc1sq  , cc2    , cc3\n   *    coef   , coef1\n   *    cosio4      -\n   *    day         -\n   *    dndt        -\n   *    em          - eccentricity\n   *    emsq        - eccentricity squared\n   *    eeta        -\n   *    etasq       -\n   *    gam         -\n   *    argpm       - argument of perigee\n   *    nodem       -\n   *    inclm       - inclination\n   *    mm          - mean anomaly\n   *    nm          - mean motion\n   *    perige      - perigee\n   *    pinvsq      -\n   *    psisq       -\n   *    qzms24      -\n   *    rtemsq      -\n   *    s1, s2, s3, s4, s5, s6, s7          -\n   *    sfour       -\n   *    ss1, ss2, ss3, ss4, ss5, ss6, ss7         -\n   *    sz1, sz2, sz3\n   *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n   *    tc          -\n   *    temp        -\n   *    temp1, temp2, temp3       -\n   *    tsi         -\n   *    xpidot      -\n   *    xhdot1      -\n   *    z1, z2, z3          -\n   *    z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n   *\n   *  coupling      :\n   *    getgravconst-\n   *    initl       -\n   *    dscom       -\n   *    dpper       -\n   *    dsinit      -\n   *    sgp4        -\n   *\n   *  references    :\n   *    hoots, roehrich, norad spacetrack report #3 1980\n   *    hoots, norad spacetrack report #6 1986\n   *    hoots, schumacher and glover 2004\n   *    vallado, crawford, hujsak, kelso  2006\n   ----------------------------------------------------------------------------*/\n\n  function sgp4init(satrec, options) {\n    /* eslint-disable no-param-reassign */\n    var opsmode = options.opsmode,\n        satn = options.satn,\n        epoch = options.epoch,\n        xbstar = options.xbstar,\n        xecco = options.xecco,\n        xargpo = options.xargpo,\n        xinclo = options.xinclo,\n        xmo = options.xmo,\n        xno = options.xno,\n        xnodeo = options.xnodeo;\n    var cosim;\n    var sinim;\n    var cc1sq;\n    var cc2;\n    var cc3;\n    var coef;\n    var coef1;\n    var cosio4;\n    var em;\n    var emsq;\n    var eeta;\n    var etasq;\n    var argpm;\n    var nodem;\n    var inclm;\n    var mm;\n    var nm;\n    var perige;\n    var pinvsq;\n    var psisq;\n    var qzms24;\n    var s1;\n    var s2;\n    var s3;\n    var s4;\n    var s5;\n    var sfour;\n    var ss1;\n    var ss2;\n    var ss3;\n    var ss4;\n    var ss5;\n    var sz1;\n    var sz3;\n    var sz11;\n    var sz13;\n    var sz21;\n    var sz23;\n    var sz31;\n    var sz33;\n    var tc;\n    var temp;\n    var temp1;\n    var temp2;\n    var temp3;\n    var tsi;\n    var xpidot;\n    var xhdot1;\n    var z1;\n    var z3;\n    var z11;\n    var z13;\n    var z21;\n    var z23;\n    var z31;\n    var z33;\n    /* ------------------------ initialization --------------------- */\n    // sgp4fix divisor for divide by zero check on inclination\n    // the old check used 1.0 + Math.cos(pi-1.0e-9), but then compared it to\n    // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n    var temp4 = 1.5e-12; // ----------- set all near earth variables to zero ------------\n\n    satrec.isimp = 0;\n    satrec.method = 'n';\n    satrec.aycof = 0.0;\n    satrec.con41 = 0.0;\n    satrec.cc1 = 0.0;\n    satrec.cc4 = 0.0;\n    satrec.cc5 = 0.0;\n    satrec.d2 = 0.0;\n    satrec.d3 = 0.0;\n    satrec.d4 = 0.0;\n    satrec.delmo = 0.0;\n    satrec.eta = 0.0;\n    satrec.argpdot = 0.0;\n    satrec.omgcof = 0.0;\n    satrec.sinmao = 0.0;\n    satrec.t = 0.0;\n    satrec.t2cof = 0.0;\n    satrec.t3cof = 0.0;\n    satrec.t4cof = 0.0;\n    satrec.t5cof = 0.0;\n    satrec.x1mth2 = 0.0;\n    satrec.x7thm1 = 0.0;\n    satrec.mdot = 0.0;\n    satrec.nodedot = 0.0;\n    satrec.xlcof = 0.0;\n    satrec.xmcof = 0.0;\n    satrec.nodecf = 0.0; // ----------- set all deep space variables to zero ------------\n\n    satrec.irez = 0;\n    satrec.d2201 = 0.0;\n    satrec.d2211 = 0.0;\n    satrec.d3210 = 0.0;\n    satrec.d3222 = 0.0;\n    satrec.d4410 = 0.0;\n    satrec.d4422 = 0.0;\n    satrec.d5220 = 0.0;\n    satrec.d5232 = 0.0;\n    satrec.d5421 = 0.0;\n    satrec.d5433 = 0.0;\n    satrec.dedt = 0.0;\n    satrec.del1 = 0.0;\n    satrec.del2 = 0.0;\n    satrec.del3 = 0.0;\n    satrec.didt = 0.0;\n    satrec.dmdt = 0.0;\n    satrec.dnodt = 0.0;\n    satrec.domdt = 0.0;\n    satrec.e3 = 0.0;\n    satrec.ee2 = 0.0;\n    satrec.peo = 0.0;\n    satrec.pgho = 0.0;\n    satrec.pho = 0.0;\n    satrec.pinco = 0.0;\n    satrec.plo = 0.0;\n    satrec.se2 = 0.0;\n    satrec.se3 = 0.0;\n    satrec.sgh2 = 0.0;\n    satrec.sgh3 = 0.0;\n    satrec.sgh4 = 0.0;\n    satrec.sh2 = 0.0;\n    satrec.sh3 = 0.0;\n    satrec.si2 = 0.0;\n    satrec.si3 = 0.0;\n    satrec.sl2 = 0.0;\n    satrec.sl3 = 0.0;\n    satrec.sl4 = 0.0;\n    satrec.gsto = 0.0;\n    satrec.xfact = 0.0;\n    satrec.xgh2 = 0.0;\n    satrec.xgh3 = 0.0;\n    satrec.xgh4 = 0.0;\n    satrec.xh2 = 0.0;\n    satrec.xh3 = 0.0;\n    satrec.xi2 = 0.0;\n    satrec.xi3 = 0.0;\n    satrec.xl2 = 0.0;\n    satrec.xl3 = 0.0;\n    satrec.xl4 = 0.0;\n    satrec.xlamo = 0.0;\n    satrec.zmol = 0.0;\n    satrec.zmos = 0.0;\n    satrec.atime = 0.0;\n    satrec.xli = 0.0;\n    satrec.xni = 0.0; // sgp4fix - note the following variables are also passed directly via satrec.\n    // it is possible to streamline the sgp4init call by deleting the \"x\"\n    // variables, but the user would need to set the satrec.* values first. we\n    // include the additional assignments in case twoline2rv is not used.\n\n    satrec.bstar = xbstar;\n    satrec.ecco = xecco;\n    satrec.argpo = xargpo;\n    satrec.inclo = xinclo;\n    satrec.mo = xmo;\n    satrec.no = xno;\n    satrec.nodeo = xnodeo; //  sgp4fix add opsmode\n\n    satrec.operationmode = opsmode; // ------------------------ earth constants -----------------------\n    // sgp4fix identify constants and allow alternate values\n\n    var ss = 78.0 / earthRadius + 1.0; // sgp4fix use multiply for speed instead of pow\n\n    var qzms2ttemp = (120.0 - 78.0) / earthRadius;\n    var qzms2t = qzms2ttemp * qzms2ttemp * qzms2ttemp * qzms2ttemp;\n    satrec.init = 'y';\n    satrec.t = 0.0;\n    var initlOptions = {\n      satn: satn,\n      ecco: satrec.ecco,\n      epoch: epoch,\n      inclo: satrec.inclo,\n      no: satrec.no,\n      method: satrec.method,\n      opsmode: satrec.operationmode\n    };\n    var initlResult = initl(initlOptions);\n    var ao = initlResult.ao,\n        con42 = initlResult.con42,\n        cosio = initlResult.cosio,\n        cosio2 = initlResult.cosio2,\n        eccsq = initlResult.eccsq,\n        omeosq = initlResult.omeosq,\n        posq = initlResult.posq,\n        rp = initlResult.rp,\n        rteosq = initlResult.rteosq,\n        sinio = initlResult.sinio;\n    satrec.no = initlResult.no;\n    satrec.con41 = initlResult.con41;\n    satrec.gsto = initlResult.gsto;\n    satrec.error = 0; // sgp4fix remove this check as it is unnecessary\n    // the mrt check in sgp4 handles decaying satellite cases even if the starting\n    // condition is below the surface of te earth\n    // if (rp < 1.0)\n    // {\n    //   printf(\"// *** satn%d epoch elts sub-orbital ***\\n\", satn);\n    //   satrec.error = 5;\n    // }\n\n    if (omeosq >= 0.0 || satrec.no >= 0.0) {\n      satrec.isimp = 0;\n\n      if (rp < 220.0 / earthRadius + 1.0) {\n        satrec.isimp = 1;\n      }\n\n      sfour = ss;\n      qzms24 = qzms2t;\n      perige = (rp - 1.0) * earthRadius; // - for perigees below 156 km, s and qoms2t are altered -\n\n      if (perige < 156.0) {\n        sfour = perige - 78.0;\n\n        if (perige < 98.0) {\n          sfour = 20.0;\n        } // sgp4fix use multiply for speed instead of pow\n\n\n        var qzms24temp = (120.0 - sfour) / earthRadius;\n        qzms24 = qzms24temp * qzms24temp * qzms24temp * qzms24temp;\n        sfour = sfour / earthRadius + 1.0;\n      }\n\n      pinvsq = 1.0 / posq;\n      tsi = 1.0 / (ao - sfour);\n      satrec.eta = ao * satrec.ecco * tsi;\n      etasq = satrec.eta * satrec.eta;\n      eeta = satrec.ecco * satrec.eta;\n      psisq = Math.abs(1.0 - etasq);\n      coef = qzms24 * Math.pow(tsi, 4.0);\n      coef1 = coef / Math.pow(psisq, 3.5);\n      cc2 = coef1 * satrec.no * (ao * (1.0 + 1.5 * etasq + eeta * (4.0 + etasq)) + 0.375 * j2 * tsi / psisq * satrec.con41 * (8.0 + 3.0 * etasq * (8.0 + etasq)));\n      satrec.cc1 = satrec.bstar * cc2;\n      cc3 = 0.0;\n\n      if (satrec.ecco > 1.0e-4) {\n        cc3 = -2.0 * coef * tsi * j3oj2 * satrec.no * sinio / satrec.ecco;\n      }\n\n      satrec.x1mth2 = 1.0 - cosio2;\n      satrec.cc4 = 2.0 * satrec.no * coef1 * ao * omeosq * (satrec.eta * (2.0 + 0.5 * etasq) + satrec.ecco * (0.5 + 2.0 * etasq) - j2 * tsi / (ao * psisq) * (-3.0 * satrec.con41 * (1.0 - 2.0 * eeta + etasq * (1.5 - 0.5 * eeta)) + 0.75 * satrec.x1mth2 * (2.0 * etasq - eeta * (1.0 + etasq)) * Math.cos(2.0 * satrec.argpo)));\n      satrec.cc5 = 2.0 * coef1 * ao * omeosq * (1.0 + 2.75 * (etasq + eeta) + eeta * etasq);\n      cosio4 = cosio2 * cosio2;\n      temp1 = 1.5 * j2 * pinvsq * satrec.no;\n      temp2 = 0.5 * temp1 * j2 * pinvsq;\n      temp3 = -0.46875 * j4 * pinvsq * pinvsq * satrec.no;\n      satrec.mdot = satrec.no + 0.5 * temp1 * rteosq * satrec.con41 + 0.0625 * temp2 * rteosq * (13.0 - 78.0 * cosio2 + 137.0 * cosio4);\n      satrec.argpdot = -0.5 * temp1 * con42 + 0.0625 * temp2 * (7.0 - 114.0 * cosio2 + 395.0 * cosio4) + temp3 * (3.0 - 36.0 * cosio2 + 49.0 * cosio4);\n      xhdot1 = -temp1 * cosio;\n      satrec.nodedot = xhdot1 + (0.5 * temp2 * (4.0 - 19.0 * cosio2) + 2.0 * temp3 * (3.0 - 7.0 * cosio2)) * cosio;\n      xpidot = satrec.argpdot + satrec.nodedot;\n      satrec.omgcof = satrec.bstar * cc3 * Math.cos(satrec.argpo);\n      satrec.xmcof = 0.0;\n\n      if (satrec.ecco > 1.0e-4) {\n        satrec.xmcof = -x2o3 * coef * satrec.bstar / eeta;\n      }\n\n      satrec.nodecf = 3.5 * omeosq * xhdot1 * satrec.cc1;\n      satrec.t2cof = 1.5 * satrec.cc1; // sgp4fix for divide by zero with xinco = 180 deg\n\n      if (Math.abs(cosio + 1.0) > 1.5e-12) {\n        satrec.xlcof = -0.25 * j3oj2 * sinio * (3.0 + 5.0 * cosio) / (1.0 + cosio);\n      } else {\n        satrec.xlcof = -0.25 * j3oj2 * sinio * (3.0 + 5.0 * cosio) / temp4;\n      }\n\n      satrec.aycof = -0.5 * j3oj2 * sinio; // sgp4fix use multiply for speed instead of pow\n\n      var delmotemp = 1.0 + satrec.eta * Math.cos(satrec.mo);\n      satrec.delmo = delmotemp * delmotemp * delmotemp;\n      satrec.sinmao = Math.sin(satrec.mo);\n      satrec.x7thm1 = 7.0 * cosio2 - 1.0; // --------------- deep space initialization -------------\n\n      if (2 * pi / satrec.no >= 225.0) {\n        satrec.method = 'd';\n        satrec.isimp = 1;\n        tc = 0.0;\n        inclm = satrec.inclo;\n        var dscomOptions = {\n          epoch: epoch,\n          ep: satrec.ecco,\n          argpp: satrec.argpo,\n          tc: tc,\n          inclp: satrec.inclo,\n          nodep: satrec.nodeo,\n          np: satrec.no,\n          e3: satrec.e3,\n          ee2: satrec.ee2,\n          peo: satrec.peo,\n          pgho: satrec.pgho,\n          pho: satrec.pho,\n          pinco: satrec.pinco,\n          plo: satrec.plo,\n          se2: satrec.se2,\n          se3: satrec.se3,\n          sgh2: satrec.sgh2,\n          sgh3: satrec.sgh3,\n          sgh4: satrec.sgh4,\n          sh2: satrec.sh2,\n          sh3: satrec.sh3,\n          si2: satrec.si2,\n          si3: satrec.si3,\n          sl2: satrec.sl2,\n          sl3: satrec.sl3,\n          sl4: satrec.sl4,\n          xgh2: satrec.xgh2,\n          xgh3: satrec.xgh3,\n          xgh4: satrec.xgh4,\n          xh2: satrec.xh2,\n          xh3: satrec.xh3,\n          xi2: satrec.xi2,\n          xi3: satrec.xi3,\n          xl2: satrec.xl2,\n          xl3: satrec.xl3,\n          xl4: satrec.xl4,\n          zmol: satrec.zmol,\n          zmos: satrec.zmos\n        };\n        var dscomResult = dscom(dscomOptions);\n        satrec.e3 = dscomResult.e3;\n        satrec.ee2 = dscomResult.ee2;\n        satrec.peo = dscomResult.peo;\n        satrec.pgho = dscomResult.pgho;\n        satrec.pho = dscomResult.pho;\n        satrec.pinco = dscomResult.pinco;\n        satrec.plo = dscomResult.plo;\n        satrec.se2 = dscomResult.se2;\n        satrec.se3 = dscomResult.se3;\n        satrec.sgh2 = dscomResult.sgh2;\n        satrec.sgh3 = dscomResult.sgh3;\n        satrec.sgh4 = dscomResult.sgh4;\n        satrec.sh2 = dscomResult.sh2;\n        satrec.sh3 = dscomResult.sh3;\n        satrec.si2 = dscomResult.si2;\n        satrec.si3 = dscomResult.si3;\n        satrec.sl2 = dscomResult.sl2;\n        satrec.sl3 = dscomResult.sl3;\n        satrec.sl4 = dscomResult.sl4;\n        sinim = dscomResult.sinim;\n        cosim = dscomResult.cosim;\n        em = dscomResult.em;\n        emsq = dscomResult.emsq;\n        s1 = dscomResult.s1;\n        s2 = dscomResult.s2;\n        s3 = dscomResult.s3;\n        s4 = dscomResult.s4;\n        s5 = dscomResult.s5;\n        ss1 = dscomResult.ss1;\n        ss2 = dscomResult.ss2;\n        ss3 = dscomResult.ss3;\n        ss4 = dscomResult.ss4;\n        ss5 = dscomResult.ss5;\n        sz1 = dscomResult.sz1;\n        sz3 = dscomResult.sz3;\n        sz11 = dscomResult.sz11;\n        sz13 = dscomResult.sz13;\n        sz21 = dscomResult.sz21;\n        sz23 = dscomResult.sz23;\n        sz31 = dscomResult.sz31;\n        sz33 = dscomResult.sz33;\n        satrec.xgh2 = dscomResult.xgh2;\n        satrec.xgh3 = dscomResult.xgh3;\n        satrec.xgh4 = dscomResult.xgh4;\n        satrec.xh2 = dscomResult.xh2;\n        satrec.xh3 = dscomResult.xh3;\n        satrec.xi2 = dscomResult.xi2;\n        satrec.xi3 = dscomResult.xi3;\n        satrec.xl2 = dscomResult.xl2;\n        satrec.xl3 = dscomResult.xl3;\n        satrec.xl4 = dscomResult.xl4;\n        satrec.zmol = dscomResult.zmol;\n        satrec.zmos = dscomResult.zmos;\n        nm = dscomResult.nm;\n        z1 = dscomResult.z1;\n        z3 = dscomResult.z3;\n        z11 = dscomResult.z11;\n        z13 = dscomResult.z13;\n        z21 = dscomResult.z21;\n        z23 = dscomResult.z23;\n        z31 = dscomResult.z31;\n        z33 = dscomResult.z33;\n        var dpperOptions = {\n          inclo: inclm,\n          init: satrec.init,\n          ep: satrec.ecco,\n          inclp: satrec.inclo,\n          nodep: satrec.nodeo,\n          argpp: satrec.argpo,\n          mp: satrec.mo,\n          opsmode: satrec.operationmode\n        };\n        var dpperResult = dpper(satrec, dpperOptions);\n        satrec.ecco = dpperResult.ep;\n        satrec.inclo = dpperResult.inclp;\n        satrec.nodeo = dpperResult.nodep;\n        satrec.argpo = dpperResult.argpp;\n        satrec.mo = dpperResult.mp;\n        argpm = 0.0;\n        nodem = 0.0;\n        mm = 0.0;\n        var dsinitOptions = {\n          cosim: cosim,\n          emsq: emsq,\n          argpo: satrec.argpo,\n          s1: s1,\n          s2: s2,\n          s3: s3,\n          s4: s4,\n          s5: s5,\n          sinim: sinim,\n          ss1: ss1,\n          ss2: ss2,\n          ss3: ss3,\n          ss4: ss4,\n          ss5: ss5,\n          sz1: sz1,\n          sz3: sz3,\n          sz11: sz11,\n          sz13: sz13,\n          sz21: sz21,\n          sz23: sz23,\n          sz31: sz31,\n          sz33: sz33,\n          t: satrec.t,\n          tc: tc,\n          gsto: satrec.gsto,\n          mo: satrec.mo,\n          mdot: satrec.mdot,\n          no: satrec.no,\n          nodeo: satrec.nodeo,\n          nodedot: satrec.nodedot,\n          xpidot: xpidot,\n          z1: z1,\n          z3: z3,\n          z11: z11,\n          z13: z13,\n          z21: z21,\n          z23: z23,\n          z31: z31,\n          z33: z33,\n          ecco: satrec.ecco,\n          eccsq: eccsq,\n          em: em,\n          argpm: argpm,\n          inclm: inclm,\n          mm: mm,\n          nm: nm,\n          nodem: nodem,\n          irez: satrec.irez,\n          atime: satrec.atime,\n          d2201: satrec.d2201,\n          d2211: satrec.d2211,\n          d3210: satrec.d3210,\n          d3222: satrec.d3222,\n          d4410: satrec.d4410,\n          d4422: satrec.d4422,\n          d5220: satrec.d5220,\n          d5232: satrec.d5232,\n          d5421: satrec.d5421,\n          d5433: satrec.d5433,\n          dedt: satrec.dedt,\n          didt: satrec.didt,\n          dmdt: satrec.dmdt,\n          dnodt: satrec.dnodt,\n          domdt: satrec.domdt,\n          del1: satrec.del1,\n          del2: satrec.del2,\n          del3: satrec.del3,\n          xfact: satrec.xfact,\n          xlamo: satrec.xlamo,\n          xli: satrec.xli,\n          xni: satrec.xni\n        };\n        var dsinitResult = dsinit(dsinitOptions);\n        satrec.irez = dsinitResult.irez;\n        satrec.atime = dsinitResult.atime;\n        satrec.d2201 = dsinitResult.d2201;\n        satrec.d2211 = dsinitResult.d2211;\n        satrec.d3210 = dsinitResult.d3210;\n        satrec.d3222 = dsinitResult.d3222;\n        satrec.d4410 = dsinitResult.d4410;\n        satrec.d4422 = dsinitResult.d4422;\n        satrec.d5220 = dsinitResult.d5220;\n        satrec.d5232 = dsinitResult.d5232;\n        satrec.d5421 = dsinitResult.d5421;\n        satrec.d5433 = dsinitResult.d5433;\n        satrec.dedt = dsinitResult.dedt;\n        satrec.didt = dsinitResult.didt;\n        satrec.dmdt = dsinitResult.dmdt;\n        satrec.dnodt = dsinitResult.dnodt;\n        satrec.domdt = dsinitResult.domdt;\n        satrec.del1 = dsinitResult.del1;\n        satrec.del2 = dsinitResult.del2;\n        satrec.del3 = dsinitResult.del3;\n        satrec.xfact = dsinitResult.xfact;\n        satrec.xlamo = dsinitResult.xlamo;\n        satrec.xli = dsinitResult.xli;\n        satrec.xni = dsinitResult.xni;\n      } // ----------- set variables if not deep space -----------\n\n\n      if (satrec.isimp !== 1) {\n        cc1sq = satrec.cc1 * satrec.cc1;\n        satrec.d2 = 4.0 * ao * tsi * cc1sq;\n        temp = satrec.d2 * tsi * satrec.cc1 / 3.0;\n        satrec.d3 = (17.0 * ao + sfour) * temp;\n        satrec.d4 = 0.5 * temp * ao * tsi * (221.0 * ao + 31.0 * sfour) * satrec.cc1;\n        satrec.t3cof = satrec.d2 + 2.0 * cc1sq;\n        satrec.t4cof = 0.25 * (3.0 * satrec.d3 + satrec.cc1 * (12.0 * satrec.d2 + 10.0 * cc1sq));\n        satrec.t5cof = 0.2 * (3.0 * satrec.d4 + 12.0 * satrec.cc1 * satrec.d3 + 6.0 * satrec.d2 * satrec.d2 + 15.0 * cc1sq * (2.0 * satrec.d2 + cc1sq));\n      }\n      /* finally propogate to zero epoch to initialize all others. */\n      // sgp4fix take out check to let satellites process until they are actually below earth surface\n      // if(satrec.error == 0)\n\n    }\n\n    sgp4(satrec, 0);\n    satrec.init = 'n';\n    /* eslint-enable no-param-reassign */\n  }\n\n  /* -----------------------------------------------------------------------------\n   *\n   *                           function twoline2rv\n   *\n   *  this function converts the two line element set character string data to\n   *    variables and initializes the sgp4 variables. several intermediate varaibles\n   *    and quantities are determined. note that the result is a structure so multiple\n   *    satellites can be processed simultaneously without having to reinitialize. the\n   *    verification mode is an important option that permits quick checks of any\n   *    changes to the underlying technical theory. this option works using a\n   *    modified tle file in which the start, stop, and delta time values are\n   *    included at the end of the second line of data. this only works with the\n   *    verification mode. the catalog mode simply propagates from -1440 to 1440 min\n   *    from epoch and is useful when performing entire catalog runs.\n   *\n   *  author        : david vallado                  719-573-2600    1 mar 2001\n   *\n   *  inputs        :\n   *    longstr1    - first line of the tle\n   *    longstr2    - second line of the tle\n   *    typerun     - type of run                    verification 'v', catalog 'c',\n   *                                                 manual 'm'\n   *    typeinput   - type of manual input           mfe 'm', epoch 'e', dayofyr 'd'\n   *    opsmode     - mode of operation afspc or improved 'a', 'i'\n   *    whichconst  - which set of constants to use  72, 84\n   *\n   *  outputs       :\n   *    satrec      - structure containing all the sgp4 satellite information\n   *\n   *  coupling      :\n   *    getgravconst-\n   *    days2mdhms  - conversion of days to month, day, hour, minute, second\n   *    jday        - convert day month year hour minute second into julian date\n   *    sgp4init    - initialize the sgp4 variables\n   *\n   *  references    :\n   *    norad spacetrack report #3\n   *    vallado, crawford, hujsak, kelso  2006\n   --------------------------------------------------------------------------- */\n\n  /**\n   * Return a Satellite imported from two lines of TLE data.\n   *\n   * Provide the two TLE lines as strings `longstr1` and `longstr2`,\n   * and select which standard set of gravitational constants you want\n   * by providing `gravity_constants`:\n   *\n   * `sgp4.propagation.wgs72` - Standard WGS 72 model\n   * `sgp4.propagation.wgs84` - More recent WGS 84 model\n   * `sgp4.propagation.wgs72old` - Legacy support for old SGP4 behavior\n   *\n   * Normally, computations are made using letious recent improvements\n   * to the algorithm.  If you want to turn some of these off and go\n   * back into \"afspc\" mode, then set `afspc_mode` to `True`.\n   */\n\n  function twoline2satrec(longstr1, longstr2) {\n    var opsmode = 'i';\n    var xpdotp = 1440.0 / (2.0 * pi); // 229.1831180523293;\n\n    var year = 0;\n    var satrec = {};\n    satrec.error = 0;\n    satrec.satnum = longstr1.substring(2, 7);\n    satrec.epochyr = parseInt(longstr1.substring(18, 20), 10);\n    satrec.epochdays = parseFloat(longstr1.substring(20, 32));\n    satrec.ndot = parseFloat(longstr1.substring(33, 43));\n    satrec.nddot = parseFloat(\".\".concat(parseInt(longstr1.substring(44, 50), 10), \"E\").concat(longstr1.substring(50, 52)));\n    satrec.bstar = parseFloat(\"\".concat(longstr1.substring(53, 54), \".\").concat(parseInt(longstr1.substring(54, 59), 10), \"E\").concat(longstr1.substring(59, 61))); // satrec.satnum = longstr2.substring(2, 7);\n\n    satrec.inclo = parseFloat(longstr2.substring(8, 16));\n    satrec.nodeo = parseFloat(longstr2.substring(17, 25));\n    satrec.ecco = parseFloat(\".\".concat(longstr2.substring(26, 33)));\n    satrec.argpo = parseFloat(longstr2.substring(34, 42));\n    satrec.mo = parseFloat(longstr2.substring(43, 51));\n    satrec.no = parseFloat(longstr2.substring(52, 63)); // ---- find no, ndot, nddot ----\n\n    satrec.no /= xpdotp; //   rad/min\n    // satrec.nddot= satrec.nddot * Math.pow(10.0, nexp);\n    // satrec.bstar= satrec.bstar * Math.pow(10.0, ibexp);\n    // ---- convert to sgp4 units ----\n\n    satrec.a = Math.pow(satrec.no * tumin, -2.0 / 3.0);\n    satrec.ndot /= xpdotp * 1440.0; // ? * minperday\n\n    satrec.nddot /= xpdotp * 1440.0 * 1440; // ---- find standard orbital elements ----\n\n    satrec.inclo *= deg2rad;\n    satrec.nodeo *= deg2rad;\n    satrec.argpo *= deg2rad;\n    satrec.mo *= deg2rad;\n    satrec.alta = satrec.a * (1.0 + satrec.ecco) - 1.0;\n    satrec.altp = satrec.a * (1.0 - satrec.ecco) - 1.0; // ----------------------------------------------------------------\n    // find sgp4epoch time of element set\n    // remember that sgp4 uses units of days from 0 jan 1950 (sgp4epoch)\n    // and minutes from the epoch (time)\n    // ----------------------------------------------------------------\n    // ---------------- temp fix for years from 1957-2056 -------------------\n    // --------- correct fix will occur when year is 4-digit in tle ---------\n\n    if (satrec.epochyr < 57) {\n      year = satrec.epochyr + 2000;\n    } else {\n      year = satrec.epochyr + 1900;\n    }\n\n    var mdhmsResult = days2mdhms(year, satrec.epochdays);\n    var mon = mdhmsResult.mon,\n        day = mdhmsResult.day,\n        hr = mdhmsResult.hr,\n        minute = mdhmsResult.minute,\n        sec = mdhmsResult.sec;\n    satrec.jdsatepoch = jday(year, mon, day, hr, minute, sec); //  ---------------- initialize the orbit at sgp4epoch -------------------\n\n    sgp4init(satrec, {\n      opsmode: opsmode,\n      satn: satrec.satnum,\n      epoch: satrec.jdsatepoch - 2433281.5,\n      xbstar: satrec.bstar,\n      xecco: satrec.ecco,\n      xargpo: satrec.argpo,\n      xinclo: satrec.inclo,\n      xmo: satrec.mo,\n      xno: satrec.no,\n      xnodeo: satrec.nodeo\n    });\n    return satrec;\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }\n\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  function propagate() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    // Return a position and velocity vector for a given date and time.\n    var satrec = args[0];\n    var date = Array.prototype.slice.call(args, 1);\n    var j = jday.apply(void 0, _toConsumableArray(date));\n    var m = (j - satrec.jdsatepoch) * minutesPerDay;\n    return sgp4(satrec, m);\n  }\n\n  function dopplerFactor(location, position, velocity) {\n    var mfactor = 7.292115E-5;\n    var c = 299792.458; // Speed of light in km/s\n\n    var range = {\n      x: position.x - location.x,\n      y: position.y - location.y,\n      z: position.z - location.z\n    };\n    range.w = Math.sqrt(Math.pow(range.x, 2) + Math.pow(range.y, 2) + Math.pow(range.z, 2));\n    var rangeVel = {\n      x: velocity.x + mfactor * location.y,\n      y: velocity.y - mfactor * location.x,\n      z: velocity.z\n    };\n\n    function sign(value) {\n      return value >= 0 ? 1 : -1;\n    }\n\n    var rangeRate = (range.x * rangeVel.x + range.y * rangeVel.y + range.z * rangeVel.z) / range.w;\n    return 1 + rangeRate / c * sign(rangeRate);\n  }\n\n  function radiansToDegrees(radians) {\n    return radians * rad2deg;\n  }\n  function degreesToRadians(degrees) {\n    return degrees * deg2rad;\n  }\n  function degreesLat(radians) {\n    if (radians < -pi / 2 || radians > pi / 2) {\n      throw new RangeError('Latitude radians must be in range [-pi/2; pi/2].');\n    }\n\n    return radiansToDegrees(radians);\n  }\n  function degreesLong(radians) {\n    if (radians < -pi || radians > pi) {\n      throw new RangeError('Longitude radians must be in range [-pi; pi].');\n    }\n\n    return radiansToDegrees(radians);\n  }\n  function radiansLat(degrees) {\n    if (degrees < -90 || degrees > 90) {\n      throw new RangeError('Latitude degrees must be in range [-90; 90].');\n    }\n\n    return degreesToRadians(degrees);\n  }\n  function radiansLong(degrees) {\n    if (degrees < -180 || degrees > 180) {\n      throw new RangeError('Longitude degrees must be in range [-180; 180].');\n    }\n\n    return degreesToRadians(degrees);\n  }\n  function geodeticToEcf(geodetic) {\n    var longitude = geodetic.longitude,\n        latitude = geodetic.latitude,\n        height = geodetic.height;\n    var a = 6378.137;\n    var b = 6356.7523142;\n    var f = (a - b) / a;\n    var e2 = 2 * f - f * f;\n    var normal = a / Math.sqrt(1 - e2 * (Math.sin(latitude) * Math.sin(latitude)));\n    var x = (normal + height) * Math.cos(latitude) * Math.cos(longitude);\n    var y = (normal + height) * Math.cos(latitude) * Math.sin(longitude);\n    var z = (normal * (1 - e2) + height) * Math.sin(latitude);\n    return {\n      x: x,\n      y: y,\n      z: z\n    };\n  }\n  function eciToGeodetic(eci, gmst) {\n    // http://www.celestrak.com/columns/v02n03/\n    var a = 6378.137;\n    var b = 6356.7523142;\n    var R = Math.sqrt(eci.x * eci.x + eci.y * eci.y);\n    var f = (a - b) / a;\n    var e2 = 2 * f - f * f;\n    var longitude = Math.atan2(eci.y, eci.x) - gmst;\n\n    while (longitude < -pi) {\n      longitude += twoPi;\n    }\n\n    while (longitude > pi) {\n      longitude -= twoPi;\n    }\n\n    var kmax = 20;\n    var k = 0;\n    var latitude = Math.atan2(eci.z, Math.sqrt(eci.x * eci.x + eci.y * eci.y));\n    var C;\n\n    while (k < kmax) {\n      C = 1 / Math.sqrt(1 - e2 * (Math.sin(latitude) * Math.sin(latitude)));\n      latitude = Math.atan2(eci.z + a * C * e2 * Math.sin(latitude), R);\n      k += 1;\n    }\n\n    var height = R / Math.cos(latitude) - a * C;\n    return {\n      longitude: longitude,\n      latitude: latitude,\n      height: height\n    };\n  }\n  function ecfToEci(ecf, gmst) {\n    // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n    //\n    // [X]     [C -S  0][X]\n    // [Y]  =  [S  C  0][Y]\n    // [Z]eci  [0  0  1][Z]ecf\n    //\n    var X = ecf.x * Math.cos(gmst) - ecf.y * Math.sin(gmst);\n    var Y = ecf.x * Math.sin(gmst) + ecf.y * Math.cos(gmst);\n    var Z = ecf.z;\n    return {\n      x: X,\n      y: Y,\n      z: Z\n    };\n  }\n  function eciToEcf(eci, gmst) {\n    // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n    //\n    // [X]     [C -S  0][X]\n    // [Y]  =  [S  C  0][Y]\n    // [Z]eci  [0  0  1][Z]ecf\n    //\n    //\n    // Inverse:\n    // [X]     [C  S  0][X]\n    // [Y]  =  [-S C  0][Y]\n    // [Z]ecf  [0  0  1][Z]eci\n    var x = eci.x * Math.cos(gmst) + eci.y * Math.sin(gmst);\n    var y = eci.x * -Math.sin(gmst) + eci.y * Math.cos(gmst);\n    var z = eci.z;\n    return {\n      x: x,\n      y: y,\n      z: z\n    };\n  }\n\n  function topocentric(observerGeodetic, satelliteEcf) {\n    // http://www.celestrak.com/columns/v02n02/\n    // TS Kelso's method, except I'm using ECF frame\n    // and he uses ECI.\n    var longitude = observerGeodetic.longitude,\n        latitude = observerGeodetic.latitude;\n    var observerEcf = geodeticToEcf(observerGeodetic);\n    var rx = satelliteEcf.x - observerEcf.x;\n    var ry = satelliteEcf.y - observerEcf.y;\n    var rz = satelliteEcf.z - observerEcf.z;\n    var topS = Math.sin(latitude) * Math.cos(longitude) * rx + Math.sin(latitude) * Math.sin(longitude) * ry - Math.cos(latitude) * rz;\n    var topE = -Math.sin(longitude) * rx + Math.cos(longitude) * ry;\n    var topZ = Math.cos(latitude) * Math.cos(longitude) * rx + Math.cos(latitude) * Math.sin(longitude) * ry + Math.sin(latitude) * rz;\n    return {\n      topS: topS,\n      topE: topE,\n      topZ: topZ\n    };\n  }\n  /**\n   * @param {Object} tc\n   * @param {Number} tc.topS Positive horizontal vector S due south.\n   * @param {Number} tc.topE Positive horizontal vector E due east.\n   * @param {Number} tc.topZ Vector Z normal to the surface of the earth (up).\n   * @returns {Object}\n   */\n\n\n  function topocentricToLookAngles(tc) {\n    var topS = tc.topS,\n        topE = tc.topE,\n        topZ = tc.topZ;\n    var rangeSat = Math.sqrt(topS * topS + topE * topE + topZ * topZ);\n    var El = Math.asin(topZ / rangeSat);\n    var Az = Math.atan2(-topE, topS) + pi;\n    return {\n      azimuth: Az,\n      elevation: El,\n      rangeSat: rangeSat // Range in km\n\n    };\n  }\n\n  function ecfToLookAngles(observerGeodetic, satelliteEcf) {\n    var topocentricCoords = topocentric(observerGeodetic, satelliteEcf);\n    return topocentricToLookAngles(topocentricCoords);\n  }\n\n  var indexUmd = {\n    constants: constants,\n    // Propagation\n    propagate: propagate,\n    sgp4: sgp4,\n    twoline2satrec: twoline2satrec,\n    gstime: gstime,\n    jday: jday,\n    invjday: invjday,\n    dopplerFactor: dopplerFactor,\n    // Coordinate transforms\n    radiansToDegrees: radiansToDegrees,\n    degreesToRadians: degreesToRadians,\n    degreesLat: degreesLat,\n    degreesLong: degreesLong,\n    radiansLat: radiansLat,\n    radiansLong: radiansLong,\n    geodeticToEcf: geodeticToEcf,\n    eciToGeodetic: eciToGeodetic,\n    eciToEcf: eciToEcf,\n    ecfToEci: ecfToEci,\n    ecfToLookAngles: ecfToLookAngles\n  };\n\n  return indexUmd;\n\n})));\n","/* /////////////////////////////////////////////////////////////////////////////\n\n(c) 2016-2020, Theodore Kruczek\n(c) 2015-2016, James Yoder\n\nhttp://keeptrack.space\n\nOriginal source code released by James Yoder at https://github.com/jeyoder/ThingsInSpace/\nunder the MIT License. Please reference http://keeptrack.space/license/thingsinspace.txt\n\nAll additions and modifications of original code is Copyright © 2016-2020 by\nTheodore Kruczek. All rights reserved. No part of this web site may be reproduced,\npublished, distributed, displayed, performed, copied or stored for public or private\nuse, without written permission of the author.\n\nNo part of this code may be modified or changed or exploited in any way used\nfor derivative works, or offered for sale, or used to construct any kind of database\nor mirrored at any other location without the express written permission of the author.\n\n///////////////////////////////////////////////////////////////////////////// */\n\n'use strict';\nimport * as satellite from '@app/js/lib/satellite.js';\nimport { A } from '@app/js/lib/meuusjs.js';\nimport { numeric } from '@app/js/lib/numeric.js';\n\n/** CONSTANTS */\nconst PI = Math.PI;\nconst TAU = 2 * PI; // PI * 2 -- This makes understanding the formulas easier\nconst DEG2RAD = TAU / 360; // Used to convert degrees to radians\nconst RAD2DEG = 360 / TAU; // Used to convert radians to degrees\nconst RADIUS_OF_EARTH = 6371; // Radius of Earth in kilometers\nconst GROUND_BUFFER_DISTANCE = 1; // Distance objects are placed above earth to avoid z-buffer fighting\nconst RADIUS_OF_SUN = 695700; // Radius of the Sun in kilometers\nconst STAR_DISTANCE = 250000; // Artificial Star Distance - Lower numberrReduces webgl depth buffer\nconst MILLISECONDS_PER_DAY = 1000 * 60 * 60 * 24;\n\n/** ARRAYS */\nvar satCache = []; // Cache of Satellite Data from TLE.json and Static Data from variable.js\nvar sensorMarkerArray = [0]; // Array of Markers used to show sensor fence and FOV\nvar satPos, satVel; // Array of current Satellite and Static Positions and Velocities\nvar satInView; // Array of booleans showing if current Satellite is in view of Sensor\nvar satInSun; // Array of booleans showing if current Satellite is in sunlight\nvar satelliteSelected = [-1]; // Array used to determine which satellites are selected\n\n/** TIME VARIABLES */\nlet globalPropagationRate = 1000; // Limits how often the propagation loop runs\nlet globalPropagationRateMultiplier = 1; // Used to slow down propagation rate on slow computers\nvar propagationRunning = false; // Prevent Propagation From Running Twice\nvar divisor = 1; // When running at high speeds, allow faster propagation\nvar propOffset = 0; // offset varting us propagate in the future (or past)\nvar propRate = 1; // vars us run time faster (or slower) than normal\nvar propRealTime = Date.now(); // vars us run time faster (or slower) than normal\n\n/** Settings */\nvar selectedSatFOV = 90; // FOV in Degrees\nvar isShowFOVBubble = false; // Flag for if FOV bubble is shown\nvar isShowSurvFence = false; // Flag for if fence markers are shown\nvar isResetFOVBubble = false;\nvar isShowSatOverfly = false;\nvar isResetSatOverfly = false;\nvar isMultiSensor = false;\nvar isIgnoreNonRadar = true;\nvar isSunlightView = false;\nvar isLowPerf = false;\nvar isResetMarker = false;\nvar isResetInView = false;\nvar isResetSunlight = false; // Remove\nlet fieldOfViewSetLength;\nlet len;\n\nlet postMessageArray = {};\n\n/** OBSERVER VARIABLES */\nvar sensor = {};\nvar mSensor = {};\nvar defaultGd = {\n    lat: null,\n    longitude: 0,\n    latitude: 0,\n    height: 0,\n};\nsensor.defaultGd = defaultGd;\nsensor.observerGd = defaultGd;\n\n// Handles Incomming Messages to sat-cruncher from main thread\nonmessage = function (m) {\n    propRealTime = Date.now();\n    if (m.data.isSunlightView) {\n        isSunlightView = m.data.isSunlightView;\n        if (isSunlightView == false) isResetSunlight = true;\n    }\n\n    if (m.data.satelliteSelected) {\n        satelliteSelected = m.data.satelliteSelected;\n        if (satelliteSelected[0] === -1) {\n            isResetSatOverfly = true;\n            if (isResetMarker == false) isResetMarker = true;\n        }\n    }\n\n    if (m.data.isSlowCPUModeEnabled) {\n        globalPropagationRateMultiplier = 2;\n    }\n\n    if (m.data.isLowPerf) {\n        isLowPerf = true;\n    }\n\n    // //////////////////////////////\n    // SAT OVERFLY AND FOV BUBBLE\n    // /////////////////////////////\n    if (m.data.fieldOfViewSetLength) {\n        fieldOfViewSetLength = m.data.fieldOfViewSetLength;\n    }\n\n    if (m.data.isShowSatOverfly === 'enable') {\n        isShowSatOverfly = true;\n        selectedSatFOV = m.data.selectedSatFOV;\n    }\n    if (m.data.isShowSatOverfly === 'reset') {\n        isResetSatOverfly = true;\n        isShowSatOverfly = false;\n        if (isResetMarker == false) isResetMarker = true;\n    }\n\n    if (m.data.isShowFOVBubble === 'enable') {\n        isShowFOVBubble = true;\n    }\n    if (m.data.isShowFOVBubble === 'reset') {\n        isResetFOVBubble = true;\n        isShowFOVBubble = false;\n        if (isResetMarker == false) isResetMarker = true;\n    }\n\n    if (m.data.isShowSurvFence === 'enable') {\n        isShowSurvFence = true;\n        if (isResetMarker == false) isResetMarker = true;\n    }\n    if (m.data.isShowSurvFence === 'disable') {\n        isShowSurvFence = false;\n        if (isResetMarker == false) isResetMarker = true;\n    }\n\n    // ////////////////////////////////\n\n    if (m.data.multiSensor) {\n        isMultiSensor = true;\n        mSensor = m.data.sensor;\n        sensor = m.data.sensor;\n        globalPropagationRate = 2000;\n        if (isResetInView == false) isResetInView = true;\n    } else if (m.data.sensor) {\n        sensor = m.data.sensor;\n        if (m.data.setlatlong) {\n            if (m.data.resetObserverGd) {\n                globalPropagationRate = 1000;\n                sensor.observerGd = defaultGd;\n                mSensor = {};\n                if (isResetInView == false) isResetInView = true;\n            } else {\n                globalPropagationRate = 2000;\n                sensor.observerGd = {\n                    longitude: m.data.sensor.long * DEG2RAD,\n                    latitude: m.data.sensor.lat * DEG2RAD,\n                    height: m.data.sensor.obshei * 1, // Convert from string\n                };\n                if (isResetInView == false) isResetInView = true;\n            }\n        }\n        isMultiSensor = false;\n    }\n\n    switch (m.data.typ) {\n        case 'offset':\n            propOffset = Number(m.data.dat.split(' ')[0]);\n            propRate = Number(m.data.dat.split(' ')[1]);\n            divisor = Math.max(propRate, 0.1);\n            return;\n        case 'satdata':\n            var satData = JSON.parse(m.data.dat);\n            len = satData.length;\n            var i = 0;\n\n            var extraData = [];\n            var extra = {};\n            var satrec;\n            while (i < len) {\n                extra = {};\n                satrec = null;\n                if (satData[i].static || satData[i].missile || satData[i].isRadarData) {\n                    satrec = satData[i];\n                    delete satrec['id'];\n                    extraData.push(extra);\n                    satCache.push(satrec);\n                    i++;\n                    continue;\n                } else {\n                    satrec = satellite.twoline2satrec(\n                        // perform and store sat init calcs\n                        satData[i].TLE1,\n                        satData[i].TLE2\n                    );\n                    extra.inclination = satrec.inclo; // rads\n                    extra.eccentricity = satrec.ecco;\n                    extra.raan = satrec.nodeo; // rads\n                    extra.argPe = satrec.argpo; // rads\n                    extra.meanMotion = (satrec.no * 60 * 24) / TAU; // convert rads/minute to rev/day\n                    extra.semiMajorAxis = Math.pow(\n                        8681663.653 / extra.meanMotion,\n                        2 / 3\n                    );\n                    extra.semiMinorAxis =\n                        extra.semiMajorAxis *\n                        Math.sqrt(1 - Math.pow(extra.eccentricity, 2));\n                    extra.apogee =\n                        extra.semiMajorAxis * (1 + extra.eccentricity) -\n                        RADIUS_OF_EARTH;\n                    extra.perigee =\n                        extra.semiMajorAxis * (1 - extra.eccentricity) -\n                        RADIUS_OF_EARTH;\n                    extra.period = 1440.0 / extra.meanMotion;\n\n                    extraData.push(extra);\n                    delete satrec['id'];\n                    satCache.push(satrec);\n                    i++;\n                }\n            }\n\n            satPos = new Float32Array(len * 3);\n            satVel = new Float32Array(len * 3);\n            satInView = new Int8Array(len);\n            satInSun = new Int8Array(len);\n\n            postMessage({\n                extraData: JSON.stringify(extraData),\n            });\n            satData = null;\n            break;\n        case 'satEdit':\n            satCache[m.data.id] = satellite.twoline2satrec(\n                // replace old TLEs\n                m.data.TLE1,\n                m.data.TLE2\n            );\n            satrec = satCache[m.data.id];\n            extraData = [];\n            extra = {};\n            // keplerian elements\n            extra.inclination = satrec.inclo; // rads\n            extra.eccentricity = satrec.ecco;\n            extra.raan = satrec.nodeo; // rads\n            extra.argPe = satrec.argpo; // rads\n            extra.meanMotion = (satrec.no * 60 * 24) / (2 * PI); // convert rads/minute to rev/day\n\n            // fun other data\n            extra.semiMajorAxis = Math.pow(\n                8681663.653 / extra.meanMotion,\n                2 / 3\n            );\n            extra.semiMinorAxis =\n                extra.semiMajorAxis *\n                Math.sqrt(1 - Math.pow(extra.eccentricity, 2));\n            extra.apogee =\n                extra.semiMajorAxis * (1 + extra.eccentricity) -\n                RADIUS_OF_EARTH;\n            extra.perigee =\n                extra.semiMajorAxis * (1 - extra.eccentricity) -\n                RADIUS_OF_EARTH;\n            extra.period = 1440.0 / extra.meanMotion;\n            extra.TLE1 = m.data.TLE1;\n            extra.TLE2 = m.data.TLE2;\n            extraData.push(extra);\n            postMessage({\n                extraUpdate: true,\n                extraData: JSON.stringify(extraData),\n                satId: m.data.id,\n            });\n            break;\n        case 'newMissile':\n            satCache[m.data.id] = m.data;\n            break;\n    }\n    if (!propagationRunning) {\n        len = -1; // propagteCruncher needs to start at -1 not 0\n        propagateCruncher();\n    }\n};\n\n// Prevent Memory Leak by declaring variables outside of function\nvar geodeticCoords;\nvar siteXYZ;\nvar sitex, sitey, sitez;\nvar slat, slon, clat, clon;\nvar azRad, elRad;\nvar south, east, zenith;\nvar x, y, z;\nfunction _lookAnglesToEcf(\n    azimuthDeg,\n    elevationDeg,\n    slantRange,\n    obs_lat,\n    obs_long,\n    obs_alt\n) {\n    // site ecef in meters\n    geodeticCoords = {};\n    geodeticCoords.latitude = obs_lat;\n    geodeticCoords.longitude = obs_long;\n    geodeticCoords.height = obs_alt;\n\n    siteXYZ = satellite.geodeticToEcf(geodeticCoords);\n    sitex = siteXYZ.x;\n    sitey = siteXYZ.y;\n    sitez = siteXYZ.z;\n\n    // some needed calculations\n    slat = Math.sin(obs_lat);\n    slon = Math.sin(obs_long);\n    clat = Math.cos(obs_lat);\n    clon = Math.cos(obs_long);\n\n    azRad = DEG2RAD * azimuthDeg;\n    elRad = DEG2RAD * elevationDeg;\n\n    // az,el,range to sez convertion\n    south = -slantRange * Math.cos(elRad) * Math.cos(azRad);\n    east = slantRange * Math.cos(elRad) * Math.sin(azRad);\n    zenith = slantRange * Math.sin(elRad);\n\n    x = slat * clon * south + -slon * east + clat * clon * zenith + sitex;\n    y = slat * slon * south + clon * east + clat * slon * zenith + sitey;\n    z = -clat * south + slat * zenith + sitez;\n\n    return { x: x, y: y, z: z };\n}\n\n// //////////////////////////////////////////////////////////////////////////\n// Benchmarking\n// var averageTimeForCrunchLoop = 0;\n// var totalCrunchTime1 = 0;\n// var averageTimeForPropagate = 0;\n// var totalCrunchTime2 = 0;\n// var numOfCrunches = 0;\n// //////////////////////////////////////////////////////////////////////////\nfunction propagateCruncher() {\n    // OPTIMIZE: 25.9ms\n    // var startTime1 = performance.now();\n    // numOfCrunches++;\n    propagationRunning = true;\n\n    var now = propTime();\n\n    var j = jday(\n        now.getUTCFullYear(),\n        now.getUTCMonth() + 1, // Note, this function requires months in range 1-12.\n        now.getUTCDate(),\n        now.getUTCHours(),\n        now.getUTCMinutes(),\n        now.getUTCSeconds()\n    );\n    j += now.getUTCMilliseconds() * 1.15741e-8; // days per millisecond\n\n    var gmst = satellite.gstime(j);\n\n    var isSunExclusion = false;\n    if (isSunlightView && !isMultiSensor) {\n        var jdo = new A.JulianDay(j); // now\n        var coord = A.EclCoord.fromWgs84(0, 0, 0);\n        var coord2 = A.EclCoord.fromWgs84(\n            sensor.observerGd.latitude * RAD2DEG,\n            sensor.observerGd.longitude * RAD2DEG,\n            sensor.observerGd.height\n        );\n\n        // AZ / EL Calculation\n        var tp = A.Solar.topocentricPosition(jdo, coord, false);\n        var tpRel = A.Solar.topocentricPosition(jdo, coord2, false);\n        sunAz = tp.hz.az * RAD2DEG + (180 % 360);\n        sunEl = (tp.hz.alt * RAD2DEG) % 360;\n        sunElRel = (tpRel.hz.alt * RAD2DEG) % 360;\n\n        // Range Calculation\n        var T = new A.JulianDay(A.JulianDay.dateToJD(now)).jdJ2000Century();\n        sunG = (A.Solar.meanAnomaly(T) * 180) / PI;\n        sunG = sunG % 360.0;\n        sunR =\n            1.00014 - 0.01671 * Math.cos(sunG) - 0.00014 * Math.cos(2 * sunG);\n        sunRange = (sunR * 149597870700) / 1000; // au to km conversion\n\n        // RAE to ECI\n        sunECI = satellite.ecfToEci(\n            _lookAnglesToEcf(sunAz, sunEl, sunRange, 0, 0, 0),\n            gmst\n        );\n        if (\n            sensor.observerGd !== defaultGd &&\n            (sensor.type === 'Optical' || sensor.type === 'Observer') &&\n            sunElRel > -6\n        ) {\n            isSunExclusion = true;\n        } else {\n            isSunExclusion = false;\n        }\n    }\n\n    var j2 = j;\n    j2 = jday(\n        now.getUTCFullYear(),\n        now.getUTCMonth() + 1, // Note, this function requires months in range 1-12.\n        now.getUTCDate(),\n        now.getUTCHours(),\n        now.getUTCMinutes(),\n        now.getUTCSeconds() + 1\n    );\n    j2 += now.getUTCMilliseconds() * 1.15741e-8; // days per millisecond\n    var gmstNext = satellite.gstime(j2);\n    len = satCache.length - 1;\n\n    if (\n        (!isResetSatOverfly &&\n            !isShowSatOverfly &&\n            !isResetFOVBubble &&\n            !isShowFOVBubble) ||\n        isLowPerf\n    ) {\n        len -= fieldOfViewSetLength;\n    }\n\n    var i = -1;\n\n    // var startTime2 = 0;\n    // var stopTime2 = 0;\n\n    let positionEcf, lookangles, azimuth, elevation, rangeSat;\n    let x, y, z, vx, vy, vz;\n    let cosLat, sinLat, cosLon, sinLon;\n    let curMissivarTime;\n    let timeExcess;\n    let s, m, pv, tLen, t;\n    let sat;\n    let isSensorChecked = false;\n    let az, el, rng, pos;\n    let q;\n    let semiDiamEarth, semiDiamSun, theta;\n    let starPosition;\n    let snum;\n    let lat, long;\n    let satSelPosX,satSelPosY,satSelPosZ, satSelPosEcf, satSelPos, satSelGeodetic, satHeight, satSelPosEarth, deltaLat, deltaLatInt, deltaLon, deltaLonInt;\n    while (i < len) {\n        i++; // At the beginning so i starts at 0\n        // totalCrunchTime2 += (stopTime2 - startTime2);\n        sat = satCache[i];\n        if (sat.satnum) {\n            // Skip reentries\n            if (sat.skip) continue;\n            m = (j - sat.jdsatepoch) * 1440.0; // 1440 = minutes_per_day\n            // startTime2 = performance.now();\n            pv = satellite.sgp4(sat, m);\n            // stopTime2 = performance.now();\n\n            try {\n                satPos[i * 3] = pv.position.x;\n                satPos[i * 3 + 1] = pv.position.y;\n                satPos[i * 3 + 2] = pv.position.z;\n\n                satVel[i * 3] = pv.velocity.x;\n                satVel[i * 3 + 1] = pv.velocity.y;\n                satVel[i * 3 + 2] = pv.velocity.z;\n\n                // Skip Calculating Lookangles if No Sensor is Selected\n                if (!isSensorChecked) {\n                    if (sensor.observerGd !== defaultGd && !isMultiSensor) {\n                        positionEcf = satellite.eciToEcf(pv.position, gmst); // pv.position is called positionEci originally\n                        lookangles = satellite.ecfToLookAngles(\n                            sensor.observerGd,\n                            positionEcf\n                        );\n                        azimuth = lookangles.azimuth;\n                        elevation = lookangles.elevation;\n                        rangeSat = lookangles.rangeSat;\n                    } else {\n                        isSensorChecked = true;\n                    }\n                }\n            } catch (e) {\n                // This is probably a reentry and should be skipped from now on.\n                satCache[i].skip = true;\n                satPos[i * 3] = 0;\n                satPos[i * 3 + 1] = 0;\n                satPos[i * 3 + 2] = 0;\n\n                satVel[i * 3] = 0;\n                satVel[i * 3 + 1] = 0;\n                satVel[i * 3 + 2] = 0;\n\n                positionEcf = 0;\n                lookangles = 0;\n                azimuth = 0;\n                elevation = 0;\n                rangeSat = 0;\n            }\n\n            satInView[i] = false; // Default in case no sensor selected\n            satInSun[i] = 2; // Default in case\n\n            if (isSunlightView) {\n                semiDiamEarth =\n                    Math.asin(\n                        RADIUS_OF_EARTH /\n                            Math.sqrt(\n                                Math.pow(-satPos[i * 3], 2) +\n                                    Math.pow(-satPos[i * 3 + 1], 2) +\n                                    Math.pow(-satPos[i * 3 + 2], 2)\n                            )\n                    ) * RAD2DEG;\n                semiDiamSun =\n                    Math.asin(\n                        RADIUS_OF_SUN /\n                            Math.sqrt(\n                                Math.pow(-satPos[i * 3] + sunECI.x, 2) +\n                                    Math.pow(-satPos[i * 3 + 1] + sunECI.y, 2) +\n                                    Math.pow(-satPos[i * 3 + 2] + sunECI.z, 2)\n                            )\n                    ) * RAD2DEG;\n\n                // Angle between earth and sun\n                theta =\n                    Math.acos(\n                        numeric.dot(\n                            [\n                                -satPos[i * 3],\n                                -satPos[i * 3 + 1],\n                                -satPos[i * 3 + 2],\n                            ],\n                            [\n                                -satPos[i * 3] + sunECI.x,\n                                -satPos[i * 3 + 1] + sunECI.y,\n                                -satPos[i * 3 + 2] + sunECI.z,\n                            ]\n                        ) /\n                            (Math.sqrt(\n                                Math.pow(-satPos[i * 3], 2) +\n                                    Math.pow(-satPos[i * 3 + 1], 2) +\n                                    Math.pow(-satPos[i * 3 + 2], 2)\n                            ) *\n                                Math.sqrt(\n                                    Math.pow(-satPos[i * 3] + sunECI.x, 2) +\n                                        Math.pow(\n                                            -satPos[i * 3 + 1] + sunECI.y,\n                                            2\n                                        ) +\n                                        Math.pow(\n                                            -satPos[i * 3 + 2] + sunECI.z,\n                                            2\n                                        )\n                                ))\n                    ) * RAD2DEG;\n                if (\n                    semiDiamEarth > semiDiamSun &&\n                    theta < semiDiamEarth - semiDiamSun\n                ) {\n                    satInSun[i] = 0; // Umbral\n                }\n\n                // var isPenumbral = false;\n                if (\n                    Math.abs(semiDiamEarth - semiDiamSun) < theta &&\n                    theta < semiDiamEarth + semiDiamSun\n                ) {\n                    satInSun[i] = 1; // Penumbral\n                }\n\n                if (semiDiamSun > semiDiamEarth) {\n                    satInSun[i] = 1; // Penumbral\n                }\n\n                if (theta < semiDiamSun - semiDiamEarth) {\n                    satInSun[i] = 1; // Penumbral\n                }\n            }\n\n            if (sensor.observerGd !== defaultGd && !isSunExclusion) {\n                if (isMultiSensor) {\n                    for (s = 0; s < mSensor.length; s++) {\n                        if (!(sensor.type == 'Optical' && satInSun[i] == 0)) {\n                            if (satInView[i]) break;\n                            sensor = mSensor[s];\n                            sensor.observerGd = {\n                                longitude: sensor.long * DEG2RAD,\n                                latitude: sensor.lat * DEG2RAD,\n                                height: sensor.obshei * 1, // Convert from string\n                            };\n                            try {\n                                positionEcf = satellite.eciToEcf(\n                                    pv.position,\n                                    gmst\n                                ); // pv.position is called positionEci originally\n                                lookangles = satellite.ecfToLookAngles(\n                                    sensor.observerGd,\n                                    positionEcf\n                                );\n                            } catch (e) {\n                                continue;\n                            }\n                            azimuth = lookangles.azimuth;\n                            elevation = lookangles.elevation;\n                            rangeSat = lookangles.rangeSat;\n                            azimuth *= RAD2DEG;\n                            elevation *= RAD2DEG;\n\n                            if (sensor.obsminaz > sensor.obsmaxaz) {\n                                if (\n                                    ((azimuth >= sensor.obsminaz ||\n                                        azimuth <= sensor.obsmaxaz) &&\n                                        elevation >= sensor.obsminel &&\n                                        elevation <= sensor.obsmaxel &&\n                                        rangeSat <= sensor.obsmaxrange &&\n                                        rangeSat >= sensor.obsminrange) ||\n                                    ((azimuth >= sensor.obsminaz2 ||\n                                        azimuth <= sensor.obsmaxaz2) &&\n                                        elevation >= sensor.obsminel2 &&\n                                        elevation <= sensor.obsmaxel2 &&\n                                        rangeSat <= sensor.obsmaxrange2 &&\n                                        rangeSat >= sensor.obsminrange2)\n                                ) {\n                                    satInView[i] = true;\n                                }\n                            } else {\n                                if (\n                                    (azimuth >= sensor.obsminaz &&\n                                        azimuth <= sensor.obsmaxaz &&\n                                        elevation >= sensor.obsminel &&\n                                        elevation <= sensor.obsmaxel &&\n                                        rangeSat <= sensor.obsmaxrange &&\n                                        rangeSat >= sensor.obsminrange) ||\n                                    (azimuth >= sensor.obsminaz2 &&\n                                        azimuth <= sensor.obsmaxaz2 &&\n                                        elevation >= sensor.obsminel2 &&\n                                        elevation <= sensor.obsmaxel2 &&\n                                        rangeSat <= sensor.obsmaxrange2 &&\n                                        rangeSat >= sensor.obsminrange2)\n                                ) {\n                                    satInView[i] = true;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    if (!(sensor.type == 'Optical' && satInSun[i] == 0)) {\n                        azimuth *= RAD2DEG;\n                        elevation *= RAD2DEG;\n\n                        if (sensor.obsminaz > sensor.obsmaxaz) {\n                            if (\n                                ((azimuth >= sensor.obsminaz ||\n                                    azimuth <= sensor.obsmaxaz) &&\n                                    elevation >= sensor.obsminel &&\n                                    elevation <= sensor.obsmaxel &&\n                                    rangeSat <= sensor.obsmaxrange &&\n                                    rangeSat >= sensor.obsminrange) ||\n                                ((azimuth >= sensor.obsminaz2 ||\n                                    azimuth <= sensor.obsmaxaz2) &&\n                                    elevation >= sensor.obsminel2 &&\n                                    elevation <= sensor.obsmaxel2 &&\n                                    rangeSat <= sensor.obsmaxrange2 &&\n                                    rangeSat >= sensor.obsminrange2)\n                            ) {\n                                satInView[i] = true;\n                            }\n                        } else {\n                            if (\n                                (azimuth >= sensor.obsminaz &&\n                                    azimuth <= sensor.obsmaxaz &&\n                                    elevation >= sensor.obsminel &&\n                                    elevation <= sensor.obsmaxel &&\n                                    rangeSat <= sensor.obsmaxrange &&\n                                    rangeSat >= sensor.obsminrange) ||\n                                (azimuth >= sensor.obsminaz2 &&\n                                    azimuth <= sensor.obsmaxaz2 &&\n                                    elevation >= sensor.obsminel2 &&\n                                    elevation <= sensor.obsmaxel2 &&\n                                    rangeSat <= sensor.obsmaxrange2 &&\n                                    rangeSat >= sensor.obsminrange2)\n                            ) {\n                                satInView[i] = true;\n                            }\n                        }\n                    }\n                }\n            }\n        } else if (satCache[i].isRadarData) {\n          if (satCache[i].skip) continue;\n          satCache[i].skip = true;\n          satPos[i * 3] = 0;\n          satPos[i * 3 + 1] = 0;\n          satPos[i * 3 + 2] = 0;\n\n          satVel[i * 3] = 0;\n          satVel[i * 3 + 1] = 0;\n          satVel[i * 3 + 2] = 0;\n        } else if (satCache[i].static && !satCache[i].marker) {\n            if (satCache[i].type == 'Star') {\n                // INFO: 0 Latitude returns upside down results. Using 180 looks right, but more verification needed.\n                starPosition = getStarPosition(now, 180, 0, satCache[i]);\n                starPosition = _lookAnglesToEcf(\n                    starPosition.azimuth * RAD2DEG,\n                    starPosition.altitude * RAD2DEG,\n                    STAR_DISTANCE,\n                    0,\n                    0,\n                    0\n                );\n\n                // Reduce Random Jitter by Requiring New Positions to be Similar to Old\n                // THIS MIGHT BE A HORRIBLE\n                if (\n                    satPos[i * 3] == 0 ||\n                    (satPos[i * 3] - starPosition.x < 0.1 &&\n                        satPos[i * 3] - starPosition.x > -0.1)\n                )\n                    satPos[i * 3] = starPosition.x;\n                if (\n                    satPos[i * 3 + 1] == 0 ||\n                    (satPos[i * 3 + 1] - starPosition.y < 0.1 &&\n                        satPos[i * 3 + 1] - starPosition.y > -0.1)\n                )\n                    satPos[i * 3 + 1] = starPosition.y;\n                if (\n                    satPos[i * 3 + 2] == 0 ||\n                    (satPos[i * 3 + 2] - starPosition.z < 0.1 &&\n                        satPos[i * 3 + 2] - starPosition.z > -0.1)\n                )\n                    satPos[i * 3 + 2] = starPosition.z;\n            } else {\n                cosLat = Math.cos(satCache[i].lat * DEG2RAD);\n                sinLat = Math.sin(satCache[i].lat * DEG2RAD);\n                cosLon = Math.cos(satCache[i].lon * DEG2RAD + gmst);\n                sinLon = Math.sin(satCache[i].lon * DEG2RAD + gmst);\n                satPos[i * 3] =\n                    (RADIUS_OF_EARTH + GROUND_BUFFER_DISTANCE + satCache[i].alt) * cosLat * cosLon; // 6371 is radius of earth\n                satPos[i * 3 + 1] =\n                    (RADIUS_OF_EARTH + GROUND_BUFFER_DISTANCE + satCache[i].alt) * cosLat * sinLon;\n                satPos[i * 3 + 2] = (RADIUS_OF_EARTH + GROUND_BUFFER_DISTANCE + satCache[i].alt) * sinLat;\n            }\n\n            satVel[i * 3] = 0;\n            satVel[i * 3 + 1] = 0;\n            satVel[i * 3 + 2] = 0;\n        } else if (satCache[i].missile) {\n            if (!satCache[i].active) {\n                continue;\n            } // Skip inactive missiles\n            tLen = satCache[i].altList.length;\n            for (t = 0; t < tLen; t++) {\n                if ((satCache[i].startTime * 1) + t * 1000 >= now * 1) {\n                    curMissivarTime = t;\n                    break;\n                }\n            }\n\n            satCache[i].lastTime = (satCache[i].lastTime >= 0) ? satCache[i].lastTime : 0;\n\n            cosLat = Math.cos(satCache[i].latList[satCache[i].lastTime + 1] * DEG2RAD);\n            sinLat = Math.sin(satCache[i].latList[satCache[i].lastTime + 1] * DEG2RAD);\n            cosLon = Math.cos(satCache[i].lonList[satCache[i].lastTime + 1] * DEG2RAD + gmstNext);\n            sinLon = Math.sin(satCache[i].lonList[satCache[i].lastTime + 1] * DEG2RAD + gmstNext);\n\n            if (satCache[i].lastTime == 0) {\n              satVel[i * 3] = 0;\n              satVel[i * 3 + 1] = 0;\n              satVel[i * 3 + 2] = 0;\n            } else if (satVel[i * 3] == 0 && satVel[i * 3 + 1] == 0 && satVel[i * 3 + 2] == 0) {\n              satVel[i * 3] = (6371 + satCache[i].altList[satCache[i].lastTime + 1]) * cosLat * cosLon - satPos[i * 3];\n              satVel[i * 3 + 1] = (6371 + satCache[i].altList[satCache[i].lastTime + 1]) * cosLat * sinLon - satPos[i * 3 + 1];\n              satVel[i * 3 + 2] = (6371 + satCache[i].altList[satCache[i].lastTime + 1]) * sinLat - satPos[i * 3 + 2];\n            } else {\n              satVel[i * 3] += (6371 + satCache[i].altList[satCache[i].lastTime + 1]) * cosLat * cosLon - satPos[i * 3];\n              satVel[i * 3 + 1] += (6371 + satCache[i].altList[satCache[i].lastTime + 1]) * cosLat * sinLon - satPos[i * 3 + 1];\n              satVel[i * 3 + 2] += (6371 + satCache[i].altList[satCache[i].lastTime + 1]) * sinLat - satPos[i * 3 + 2];\n              satVel[i * 3] *= 0.5;\n              satVel[i * 3 + 1] *= 0.5;\n              satVel[i * 3 + 2] *= 0.5;\n            }\n\n            cosLat = Math.cos(satCache[i].latList[curMissivarTime] * DEG2RAD);\n            sinLat = Math.sin(satCache[i].latList[curMissivarTime] * DEG2RAD);\n            cosLon = Math.cos(satCache[i].lonList[curMissivarTime] * DEG2RAD + gmst);\n            sinLon = Math.sin(satCache[i].lonList[curMissivarTime] * DEG2RAD + gmst);\n\n            satPos[i * 3] = (6371 + satCache[i].altList[curMissivarTime]) * cosLat * cosLon;\n            satPos[i * 3 + 1] = (6371 + satCache[i].altList[curMissivarTime]) * cosLat * sinLon;\n            satPos[i * 3 + 2] = (6371 + satCache[i].altList[curMissivarTime]) * sinLat;\n\n            satCache[i].lastTime = curMissivarTime;\n\n            x = satPos[i * 3];\n            y = satPos[i * 3 + 1];\n            z = satPos[i * 3 + 2];\n\n            positionEcf = satellite.eciToEcf({ x: x, y: y, z: z }, gmst);\n            if (satellite.eciToGeodetic({ x: x, y: y, z: z }, gmst).height <= 150 && satellite.missile === false) {\n                console.error(satellite.SCC_NUM);\n                satCache[i].skip = true;\n            }\n            lookangles = satellite.ecfToLookAngles(sensor.observerGd, positionEcf);\n\n            azimuth = lookangles.azimuth * RAD2DEG;\n            elevation = lookangles.elevation * RAD2DEG;\n            rangeSat = lookangles.rangeSat;\n\n            satInView[i] = false; // Default in case no sensor selected\n\n            if (sensor.obsminaz > sensor.obsmaxaz) {\n                if (\n                    ((azimuth >= sensor.obsminaz || azimuth <= sensor.obsmaxaz) && elevation >= sensor.obsminel && elevation <= sensor.obsmaxel && rangeSat <= sensor.obsmaxrange && rangeSat >= sensor.obsminrange) ||\n                    ((azimuth >= sensor.obsminaz2 || azimuth <= sensor.obsmaxaz2) && elevation >= sensor.obsminel2 && elevation <= sensor.obsmaxel2 && rangeSat <= sensor.obsmaxrange2 && rangeSat >= sensor.obsminrange2)) {\n                    satInView[i] = true;\n                } else {\n                    satInView[i] = false;\n                }\n            } else {\n                if ((azimuth >= sensor.obsminaz && azimuth <= sensor.obsmaxaz && elevation >= sensor.obsminel && elevation <= sensor.obsmaxel && rangeSat <= sensor.obsmaxrange && rangeSat >= sensor.obsminrange) ||\n                    (azimuth >= sensor.obsminaz2 && azimuth <= sensor.obsmaxaz2 && elevation >= sensor.obsminel2 && elevation <= sensor.obsmaxel2 && rangeSat <= sensor.obsmaxrange2 && rangeSat >= sensor.obsminrange2)) {\n                    satInView[i] = true;\n                } else {\n                    satInView[i] = false;\n                }\n            }\n        } else if (isShowFOVBubble || isResetFOVBubble) {\n            // //////////////////////////////////\n            // FOV Bubble Drawing Code - START\n            // //////////////////////////////////\n            if (!isMultiSensor && sensor.observerGd !== defaultGd) {\n                mSensor[0] = sensor;\n                mSensor.length = 1;\n            }\n            sensorMarkerArray = [];\n            for (s = 0; s < mSensor.length; s++) {\n                sensorMarkerArray.push(i);\n                sensor = mSensor[s];\n                sensor.observerGd = {\n                    longitude: sensor.long * DEG2RAD,\n                    latitude: sensor.lat * DEG2RAD,\n                    height: sensor.obshei * 1, // Convert from string\n                };\n                if (satCache[i].marker) {\n                    satPos[i * 3] = 0;\n                    satPos[i * 3 + 1] = 0;\n                    satPos[i * 3 + 2] = 0;\n\n                    satVel[i * 3] = 0;\n                    satVel[i * 3 + 1] = 0;\n                    satVel[i * 3 + 2] = 0;\n                    if (isResetFOVBubble) {\n                        continue;\n                    }\n\n                    if (!isShowFOVBubble) continue;\n                    if (sensor.observerGd === defaultGd) continue;\n\n                    // Ignore Optical and Mechanical Sensors When showing Many\n                    if (isIgnoreNonRadar) {\n                        if (mSensor.length > 1 && sensor.type === 'Optical')\n                            continue;\n                        if (mSensor.length > 1 && sensor.type === 'Observer')\n                            continue;\n                        if (mSensor.length > 1 && sensor.type === 'Mechanical')\n                            continue;\n                    }\n\n                    // az, el, rng, pos;\n                    q = 20;\n\n                    // Don't show anything but the floor if in surveillance only mode\n                    // Unless it is a volume search radar\n                    if (!isShowSurvFence || sensor.volume) {\n                        // Only on non-360 FOV\n                        if (sensor.obsminaz !== 0 && sensor.obsmaxaz !== 360) {\n                            // //////////////////////////////////\n                            // Min AZ FOV\n                            // //////////////////////////////////\n                            for (\n                                rng = Math.max(sensor.obsminrange, 100);\n                                rng < Math.min(sensor.obsmaxrange, 60000);\n                                rng += Math.min(sensor.obsmaxrange, 60000) / 30\n                            ) {\n                                az = sensor.obsminaz;\n                                for (\n                                    el = sensor.obsminel;\n                                    el < sensor.obsmaxel;\n                                    el += 2\n                                ) {\n                                    pos = satellite.ecfToEci(\n                                        _lookAnglesToEcf(\n                                            az,\n                                            el,\n                                            rng,\n                                            sensor.observerGd.latitude,\n                                            sensor.observerGd.longitude,\n                                            sensor.observerGd.height\n                                        ),\n                                        gmst\n                                    );\n                                    try {\n                                        satCache[i].active = true;\n                                        satPos[i * 3] = pos.x;\n                                        satPos[i * 3 + 1] = pos.y;\n                                        satPos[i * 3 + 2] = pos.z;\n\n                                        satVel[i * 3] = 0;\n                                        satVel[i * 3 + 1] = 0;\n                                        satVel[i * 3 + 2] = 0;\n                                        i++;\n                                    } catch (e) {\n                                        console.log(e);\n                                    }\n                                }\n                            }\n\n                            // //////////////////////////////////\n                            // Max AZ FOV\n                            // //////////////////////////////////\n                            for (\n                                rng = Math.max(sensor.obsminrange, 100);\n                                rng < Math.min(sensor.obsmaxrange, 60000);\n                                rng += Math.min(sensor.obsmaxrange, 60000) / 30\n                            ) {\n                                az = sensor.obsmaxaz;\n                                for (\n                                    el = sensor.obsminel;\n                                    el < sensor.obsmaxel;\n                                    el += 2\n                                ) {\n                                    pos = satellite.ecfToEci(\n                                        _lookAnglesToEcf(\n                                            az,\n                                            el,\n                                            rng,\n                                            sensor.observerGd.latitude,\n                                            sensor.observerGd.longitude,\n                                            sensor.observerGd.height\n                                        ),\n                                        gmst\n                                    );\n                                    satCache[i].active = true;\n                                    satPos[i * 3] = pos.x;\n                                    satPos[i * 3 + 1] = pos.y;\n                                    satPos[i * 3 + 2] = pos.z;\n\n                                    satVel[i * 3] = 0;\n                                    satVel[i * 3 + 1] = 0;\n                                    satVel[i * 3 + 2] = 0;\n                                    i++;\n                                }\n                            }\n\n                            if (typeof sensor.obsminaz2 != 'undefined') {\n                                ////////////////////////////////\n                                // Cobra DANE Types\n                                ////////////////////////////////\n\n                                // //////////////////////////////////\n                                // Min AZ 2 FOV\n                                // //////////////////////////////////\n                                for (\n                                    rng = Math.max(sensor.obsminrange2, 100);\n                                    rng < Math.min(sensor.obsmaxrange2, 60000);\n                                    rng +=\n                                        Math.min(sensor.obsmaxrange2, 60000) /\n                                        30\n                                ) {\n                                    az = sensor.obsminaz2;\n                                    for (\n                                        el = sensor.obsminel2;\n                                        el < sensor.obsmaxel2;\n                                        el += 2\n                                    ) {\n                                        pos = satellite.ecfToEci(\n                                            _lookAnglesToEcf(\n                                                az,\n                                                el,\n                                                rng,\n                                                sensor.observerGd.latitude,\n                                                sensor.observerGd.longitude,\n                                                sensor.observerGd.height\n                                            ),\n                                            gmst\n                                        );\n                                        satCache[i].active = true;\n                                        satPos[i * 3] = pos.x;\n                                        satPos[i * 3 + 1] = pos.y;\n                                        satPos[i * 3 + 2] = pos.z;\n\n                                        satVel[i * 3] = 0;\n                                        satVel[i * 3 + 1] = 0;\n                                        satVel[i * 3 + 2] = 0;\n                                        i++;\n                                    }\n                                }\n\n                                // //////////////////////////////////\n                                // Max AZ 2 FOV\n                                // //////////////////////////////////\n                                for (\n                                    rng = Math.max(sensor.obsminrange2, 100);\n                                    rng < Math.min(sensor.obsmaxrange2, 60000);\n                                    rng +=\n                                        Math.min(sensor.obsmaxrange2, 60000) /\n                                        30\n                                ) {\n                                    az = sensor.obsmaxaz2;\n                                    for (\n                                        el = sensor.obsminel2;\n                                        el < sensor.obsmaxel2;\n                                        el += 2\n                                    ) {\n                                        pos = satellite.ecfToEci(\n                                            _lookAnglesToEcf(\n                                                az,\n                                                el,\n                                                rng,\n                                                sensor.observerGd.latitude,\n                                                sensor.observerGd.longitude,\n                                                sensor.observerGd.height\n                                            ),\n                                            gmst\n                                        );\n                                        satCache[i].active = true;\n                                        satPos[i * 3] = pos.x;\n                                        satPos[i * 3 + 1] = pos.y;\n                                        satPos[i * 3 + 2] = pos.z;\n\n                                        satVel[i * 3] = 0;\n                                        satVel[i * 3 + 1] = 0;\n                                        satVel[i * 3 + 2] = 0;\n                                        i++;\n                                    }\n                                }\n                            }\n\n                            // Only on 360 FOV\n                        } else {\n                            for (\n                                rng = Math.max(sensor.obsminrange, 100);\n                                rng < Math.min(sensor.obsmaxrange, 60000);\n                                rng += Math.min(sensor.obsmaxrange, 60000) / 30\n                            ) {\n                                el = sensor.obsmaxel;\n                                for (\n                                    az = sensor.obsminaz;\n                                    az < sensor.obsmaxaz;\n                                    az += 2\n                                ) {\n                                    pos = satellite.ecfToEci(\n                                        _lookAnglesToEcf(\n                                            az,\n                                            el,\n                                            rng,\n                                            sensor.observerGd.latitude,\n                                            sensor.observerGd.longitude,\n                                            sensor.observerGd.height\n                                        ),\n                                        gmst\n                                    );\n                                    satCache[i].active = true;\n                                    satPos[i * 3] = pos.x;\n                                    satPos[i * 3 + 1] = pos.y;\n                                    satPos[i * 3 + 2] = pos.z;\n\n                                    satVel[i * 3] = 0;\n                                    satVel[i * 3 + 1] = 0;\n                                    satVel[i * 3 + 2] = 0;\n                                    i++;\n                                }\n                            }\n                        }\n                    }\n\n                    // //////////////////////////////////\n                    // Floor of FOV\n                    // //////////////////////////////////\n                    q = 2;\n                    for (\n                        rng = Math.max(sensor.obsminrange, 100);\n                        rng < Math.min(sensor.obsmaxrange, 60000);\n                        rng += Math.min(sensor.obsmaxrange, 60000) / 30\n                    ) {\n                        for (az = 0; az < 360; az += 1 * q) {\n                            if (sensor.obsminaz > sensor.obsmaxaz) {\n                                if (\n                                    az >= sensor.obsminaz ||\n                                    az <= sensor.obsmaxaz\n                                ) {\n                                } else {\n                                    continue;\n                                }\n                            } else {\n                                if (\n                                    az >= sensor.obsminaz &&\n                                    az <= sensor.obsmaxaz\n                                ) {\n                                } else {\n                                    continue;\n                                }\n                            }\n                            pos = satellite.ecfToEci(\n                                _lookAnglesToEcf(\n                                    az,\n                                    sensor.obsminel,\n                                    rng,\n                                    sensor.observerGd.latitude,\n                                    sensor.observerGd.longitude,\n                                    sensor.observerGd.height\n                                ),\n                                gmst\n                            );\n                            if (i === len) {\n                                console.error('No More Markers');\n                                break;\n                            }\n                            satCache[i].active = true;\n                            satPos[i * 3] = pos.x;\n                            satPos[i * 3 + 1] = pos.y;\n                            satPos[i * 3 + 2] = pos.z;\n\n                            satVel[i * 3] = 0;\n                            satVel[i * 3 + 1] = 0;\n                            satVel[i * 3 + 2] = 0;\n                            i++;\n                        }\n                    }\n\n                    if (typeof sensor.obsminaz2 != 'undefined') {\n                        ////////////////////////////////\n                        // Cobra DANE Types\n                        ////////////////////////////////\n\n                        // //////////////////////////////////\n                        // Floor of FOV\n                        // //////////////////////////////////\n                        q = 2;\n                        for (\n                            rng = Math.max(sensor.obsminrange2, 100);\n                            rng < Math.min(sensor.obsmaxrange2, 60000);\n                            rng += Math.min(sensor.obsmaxrange2, 60000) / 30\n                        ) {\n                            for (az = 0; az < 360; az += 1 * q) {\n                                if (sensor.obsminaz2 > sensor.obsmaxaz2) {\n                                    if (\n                                        az >= sensor.obsminaz2 ||\n                                        az <= sensor.obsmaxaz2\n                                    ) {\n                                    } else {\n                                        continue;\n                                    }\n                                } else {\n                                    if (\n                                        az >= sensor.obsminaz2 &&\n                                        az <= sensor.obsmaxaz2\n                                    ) {\n                                    } else {\n                                        continue;\n                                    }\n                                }\n                                pos = satellite.ecfToEci(\n                                    _lookAnglesToEcf(\n                                        az,\n                                        sensor.obsminel2,\n                                        rng,\n                                        sensor.observerGd.latitude,\n                                        sensor.observerGd.longitude,\n                                        sensor.observerGd.height\n                                    ),\n                                    gmst\n                                );\n                                if (i === len) {\n                                    console.error('No More Markers');\n                                    break;\n                                }\n                                satCache[i].active = true;\n                                satPos[i * 3] = pos.x;\n                                satPos[i * 3 + 1] = pos.y;\n                                satPos[i * 3 + 2] = pos.z;\n\n                                satVel[i * 3] = 0;\n                                satVel[i * 3 + 1] = 0;\n                                satVel[i * 3 + 2] = 0;\n                                i++;\n                            }\n                        }\n                    }\n\n                    // Don't show anything but the floor if in surveillance only mode\n                    // Unless it is a volume search radar\n                    if (!isShowSurvFence || sensor.volume) {\n                        // //////////////////////////////////\n                        // Outside of FOV\n                        // //////////////////////////////////\n                        rng = Math.min(sensor.obsmaxrange, 60000);\n                        for (az = 0; az < 360; az += 2) {\n                            if (sensor.obsminaz > sensor.obsmaxaz) {\n                                if (\n                                    az >= sensor.obsminaz ||\n                                    az <= sensor.obsmaxaz\n                                ) {\n                                } else {\n                                    continue;\n                                }\n                            } else {\n                                if (\n                                    az >= sensor.obsminaz &&\n                                    az <= sensor.obsmaxaz\n                                ) {\n                                } else {\n                                    continue;\n                                }\n                            }\n                            for (\n                                el = sensor.obsminel;\n                                el < sensor.obsmaxel;\n                                el += 2\n                            ) {\n                                pos = satellite.ecfToEci(\n                                    _lookAnglesToEcf(\n                                        az,\n                                        el,\n                                        rng,\n                                        sensor.observerGd.latitude,\n                                        sensor.observerGd.longitude,\n                                        sensor.observerGd.height\n                                    ),\n                                    gmst\n                                );\n                                if (i === len) {\n                                    console.error('No More Markers');\n                                    break;\n                                }\n                                satCache[i].active = true;\n                                satPos[i * 3] = pos.x;\n                                satPos[i * 3 + 1] = pos.y;\n                                satPos[i * 3 + 2] = pos.z;\n\n                                satVel[i * 3] = 0;\n                                satVel[i * 3 + 1] = 0;\n                                satVel[i * 3 + 2] = 0;\n                                i++;\n                            }\n                        }\n\n                        if (typeof sensor.obsminaz2 != 'undefined') {\n                            ////////////////////////////////\n                            // Cobra DANE Types\n                            ////////////////////////////////\n                            // //////////////////////////////////\n                            // Outside of FOV\n                            // //////////////////////////////////\n                            rng = Math.min(sensor.obsmaxrange2, 60000);\n                            for (az = 0; az < 360; az += 2) {\n                                if (sensor.obsminaz2 > sensor.obsmaxaz2) {\n                                    if (\n                                        az >= sensor.obsminaz2 ||\n                                        az <= sensor.obsmaxaz2\n                                    ) {\n                                    } else {\n                                        continue;\n                                    }\n                                } else {\n                                    if (\n                                        az >= sensor.obsminaz2 &&\n                                        az <= sensor.obsmaxaz2\n                                    ) {\n                                    } else {\n                                        continue;\n                                    }\n                                }\n                                for (\n                                    el = sensor.obsminel2;\n                                    el < sensor.obsmaxel2;\n                                    el += 2\n                                ) {\n                                    pos = satellite.ecfToEci(\n                                        _lookAnglesToEcf(\n                                            az,\n                                            el,\n                                            rng,\n                                            sensor.observerGd.latitude,\n                                            sensor.observerGd.longitude,\n                                            sensor.observerGd.height\n                                        ),\n                                        gmst\n                                    );\n                                    if (i === len) {\n                                        console.error('No More Markers');\n                                        break;\n                                    }\n                                    satCache[i].active = true;\n                                    satPos[i * 3] = pos.x;\n                                    satPos[i * 3 + 1] = pos.y;\n                                    satPos[i * 3 + 2] = pos.z;\n\n                                    satVel[i * 3] = 0;\n                                    satVel[i * 3 + 1] = 0;\n                                    satVel[i * 3 + 2] = 0;\n                                    i++;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // //////////////////////////////////\n            // FOV Bubble Drawing Code - STOP\n            // //////////////////////////////////\n        } else if (isShowSatOverfly || isResetSatOverfly) {\n            // //////////////////////////////////\n            // Satellite Overfly Drawing Code - START\n            // //////////////////////////////////\n            if (satCache[i].marker) {\n                if (isResetSatOverfly && satCache[i].active === true) {\n                    satCache[i].active = false;\n\n                    satPos[i * 3] = 0;\n                    satPos[i * 3 + 1] = 0;\n                    satPos[i * 3 + 2] = 0;\n\n                    satVel[i * 3] = 0;\n                    satVel[i * 3 + 1] = 0;\n                    satVel[i * 3 + 2] = 0;\n                    continue;\n                }\n                for (snum = 0; snum < satelliteSelected.length; snum++) {\n                    if (satelliteSelected[snum] !== -1) {\n                        if (!isShowSatOverfly) continue;\n                        // Find the ECI position of the Selected Satellite\n                        satSelPosX = satPos[satelliteSelected[snum] * 3];\n                        satSelPosY = satPos[satelliteSelected[snum] * 3 + 1];\n                        satSelPosZ = satPos[satelliteSelected[snum] * 3 + 2];\n                        satSelPosEcf = {\n                            x: satSelPosX,\n                            y: satSelPosY,\n                            z: satSelPosZ,\n                        };\n                        satSelPos = satellite.ecfToEci(satSelPosEcf, gmst);\n\n                        // Find the Lat/Long of the Selected Satellite\n                        satSelGeodetic = satellite.eciToGeodetic(\n                            satSelPos,\n                            gmst\n                        ); // pv.position is called positionEci originally\n                        satHeight = satSelGeodetic.height;\n                        satSelPosEarth = {\n                            longitude: satSelGeodetic.longitude,\n                            latitude: satSelGeodetic.latitude,\n                            height: 1,\n                        };\n\n                        deltaLatInt = 1;\n                        if (satHeight < 2500 && selectedSatFOV <= 60)\n                            deltaLatInt = 0.5;\n                        if (satHeight > 7000 || selectedSatFOV >= 90)\n                            deltaLatInt = 2;\n                        if (satelliteSelected.length > 1) deltaLatInt = 2;\n                        for (\n                            deltaLat = -60;\n                            deltaLat < 60;\n                            deltaLat += deltaLatInt\n                        ) {\n                            lat =\n                                Math.max(\n                                    Math.min(\n                                        Math.round(\n                                            satSelGeodetic.latitude * RAD2DEG\n                                        ) + deltaLat,\n                                        90\n                                    ),\n                                    -90\n                                ) * DEG2RAD;\n                            if (lat > 90) continue;\n                            deltaLonInt = 1; // Math.max((Math.abs(lat)*RAD2DEG/15),1);\n                            if (satHeight < 2500 && selectedSatFOV <= 60)\n                                deltaLonInt = 0.5;\n                            if (satHeight > 7000 || selectedSatFOV >= 90)\n                                deltaLonInt = 2;\n                            if (satelliteSelected.length > 1) deltaLonInt = 2;\n                            for (\n                                deltaLon = 0;\n                                deltaLon < 181;\n                                deltaLon += deltaLonInt\n                            ) {\n                                // //////////\n                                // Add Long\n                                // //////////\n                                long =\n                                    satSelGeodetic.longitude +\n                                    deltaLon * DEG2RAD;\n                                satSelPosEarth = {\n                                    longitude: long,\n                                    latitude: lat,\n                                    height: 15,\n                                };\n                                // Find the Az/El of the position on the earth\n                                lookangles = satellite.ecfToLookAngles(\n                                    satSelPosEarth,\n                                    satSelPosEcf\n                                );\n                                // azimuth = lookangles.azimuth;\n                                elevation = lookangles.elevation;\n                                // rangeSat = lookangles.rangeSat;\n\n                                if (\n                                    elevation * RAD2DEG > 0 &&\n                                    90 - elevation * RAD2DEG < selectedSatFOV\n                                ) {\n                                    satSelPosEarth = satellite.geodeticToEcf(\n                                        satSelPosEarth\n                                    );\n\n                                    if (i === len) {\n                                        console.error('Ran out of Markers');\n                                        continue; // Only get so many markers.\n                                    }\n                                    satCache[i].active = true;\n\n                                    satPos[i * 3] = satSelPosEarth.x;\n                                    satPos[i * 3 + 1] = satSelPosEarth.y;\n                                    satPos[i * 3 + 2] = satSelPosEarth.z;\n\n                                    satVel[i * 3] = 0;\n                                    satVel[i * 3 + 1] = 0;\n                                    satVel[i * 3 + 2] = 0;\n                                    i++;\n                                }\n                                // //////////\n                                // Minus Long\n                                // //////////\n                                if (deltaLon === 0 || deltaLon === 180)\n                                    continue; // Don't Draw Two Dots On the Center Line\n                                long =\n                                    satSelGeodetic.longitude -\n                                    deltaLon * DEG2RAD;\n                                satSelPosEarth = {\n                                    longitude: long,\n                                    latitude: lat,\n                                    height: 15,\n                                };\n                                // Find the Az/El of the position on the earth\n                                lookangles = satellite.ecfToLookAngles(\n                                    satSelPosEarth,\n                                    satSelPosEcf\n                                );\n                                // azimuth = lookangles.azimuth;\n                                elevation = lookangles.elevation;\n                                // rangeSat = lookangles.rangeSat;\n\n                                if (\n                                    elevation * RAD2DEG > 0 &&\n                                    90 - elevation * RAD2DEG < selectedSatFOV\n                                ) {\n                                    satSelPosEarth = satellite.geodeticToEcf(\n                                        satSelPosEarth\n                                    );\n\n                                    if (i === len) {\n                                        console.error('Ran out of Markers');\n                                        continue; // Only get so many markers.\n                                    }\n                                    satCache[i].active = true;\n\n                                    satPos[i * 3] = satSelPosEarth.x;\n                                    satPos[i * 3 + 1] = satSelPosEarth.y;\n                                    satPos[i * 3 + 2] = satSelPosEarth.z;\n\n                                    satVel[i * 3] = 0;\n                                    satVel[i * 3 + 1] = 0;\n                                    satVel[i * 3 + 2] = 0;\n                                    i++;\n                                }\n\n                                if (lat === 90 || lat === -90) break; // One Dot for the Poles\n                            }\n                        }\n                    }\n                }\n            }\n            // //////////////////////////////////\n            // Satellite Overfly Drawing Code - STOP\n            // //////////////////////////////////\n        }\n        isResetSatOverfly = false;\n        if (satCache[i].marker) {\n            for (; i < len; i++) {\n                if (!satCache[i].active) {\n                    len -= fieldOfViewSetLength;\n                    break;\n                }\n                satPos[i * 3] = 0;\n                satPos[i * 3 + 1] = 0;\n                satPos[i * 3 + 2] = 0;\n\n                satVel[i * 3] = 0;\n                satVel[i * 3 + 1] = 0;\n                satVel[i * 3 + 2] = 0;\n                satCache[i].active = false;\n            }\n        }\n    }\n    if (isResetFOVBubble) {\n        isResetFOVBubble = false;\n        len -= fieldOfViewSetLength;\n    }\n\n    postMessageArray = {\n      satPos: satPos,\n      satVel: satVel,\n    };\n    // Add In View Data if Sensor Selected\n    if (sensor.observerGd !== defaultGd) {\n      postMessageArray.satInView = satInView;\n    }\n    // Add Sun View Data if Enabled\n    if (isSunlightView) {\n      postMessageArray.satInSun = satInSun;\n    }\n    if (sensorMarkerArray.length > 1) {\n      postMessageArray.sensorMarkerArray = sensorMarkerArray;\n    }\n\n    postMessage(postMessageArray);\n\n\n    // The longer the delay the more jitter at higher speeds of propagation\n    setTimeout(() => {\n        propagateCruncher();\n    }, (1 * globalPropagationRate * globalPropagationRateMultiplier) / divisor);\n    // //////////////////////////////////////////////////////////////////////////\n    // Benchmarking\n    //\n    // var stopTime1 = performance.now();\n    // if (numOfCrunches > 5) {\n    // totalCrunchTime1 += (stopTime1 - startTime1);\n    // averageTimeForCrunchLoop = totalCrunchTime1 / (numOfCrunches - 5);\n\n    // averageTimeForPropagate = totalCrunchTime2 / (numOfCrunches - 5);\n    // }\n    // //////////////////////////////////////////////////////////////////////////\n}\n\n/** Returns Ordinal Day (Commonly Called J Day) */\nfunction jday(year, mon, day, hr, minute, sec) {\n    'use strict';\n    return (\n        367.0 * year -\n        Math.floor(7 * (year + Math.floor((mon + 9) / 12.0)) * 0.25) +\n        Math.floor((275 * mon) / 9.0) +\n        day +\n        1721013.5 +\n        ((sec / 60.0 + minute) / 60.0 + hr) / 24.0 //  ut in days\n    );\n}\n\n/** Returns Current Propagation Time */\nfunction propTime() {\n    'use strict';\n\n    var now = new Date();\n    var realElapsedMsec = Number(now) - Number(propRealTime);\n    var scaledMsec = realElapsedMsec * propRate;\n    now.setTime(Number(propRealTime) + propOffset + scaledMsec);\n    return now;\n}\n\n/*\n StarCalc, a library for calculating star positions\n (c) 2014, Matthew Petroff\n Based on SunCalc, (c) 2011-2013, Vladimir Agafonkin\n https://github.com/mourner/suncalc\n*/\nvar sin = Math.sin,\n    cos = Math.cos,\n    tan = Math.tan,\n    asin = Math.asin,\n    atan = Math.atan2,\n    acos = Math.acos,\n    rad = PI / 180;\n\n// date/time constants and conversions\nconst J1970 = 2440588;\nconst J2000 = 2451545;\n\nfunction toJulian(date) {\n    return date.valueOf() / MILLISECONDS_PER_DAY - 0.5 + J1970;\n}\nfunction toDays(date) {\n    return toJulian(date) - J2000;\n}\n// general calculations for position\nfunction getAzimuth(H, phi, dec) {\n    return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));\n}\nfunction getAltitude(H, phi, dec) {\n    return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));\n}\nfunction getSiderealTime(d, lw) {\n    return rad * (280.16 + 360.9856235 * d) - lw;\n}\n\n// Reduce variable assignment during the loop\nvar lw, phi, d, H, h;\nfunction getStarPosition(date, lat, lng, c) {\n    lw = rad * -lng;\n    phi = rad * lat;\n    d = toDays(date);\n\n    H = getSiderealTime(d, lw) - (c.ra / 12) * PI;\n    h = getAltitude(H, phi, (c.dec / 180) * PI);\n\n    // altitude correction for refraction\n    h = h + (rad * 0.017) / tan(h + (rad * 10.26) / (h + rad * 5.1));\n\n    return {\n        azimuth: getAzimuth(H, phi, (c.dec / 180) * PI),\n        altitude: h,\n        vmag: c.vmag,\n        name: c.name,\n        pname: c.pname,\n        dist: c.dist,\n    };\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => module['default'] :\n\t\t() => module;\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/js/positionCruncher.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}
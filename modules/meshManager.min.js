!function(){if(settingsManager.noMeshManager)return;let e;meshManager={},meshManager.selectedSatPosition={x:0,y:0,z:0};let a,r=mat4.create(),n=mat3.create();meshManager.fileList=[];let t=["sat2","s1u","s2u","s3u","starlink","iss","gps","aehf","dsp","galileo","o3b","orbcomm","iridium","globalstar","debris0","debris1","debris2","rocketbody"];for(var o=0;o<t.length;o++){let e={obj:`${settingsManager.installDirectory}meshes/${t[o]}.obj`,mtl:`${settingsManager.installDirectory}meshes/${t[o]}.mtl`};meshManager.fileList.push(e)}meshManager.fragShaderCode="\n    precision mediump float;\n\n    varying vec3 vLightDirection;\n    varying float vInSun;\n    varying vec3 vTransformedNormal;\n    varying vec2 vTextureCoord;\n    varying vec4 vPosition;\n    varying vec3 vAmbient;\n    varying vec3 vDiffuse;\n    varying vec3 vSpecular;\n    varying float vSpecularExponent;\n\n    void main(void) {\n      float lightAmt = max(dot(vTransformedNormal, vLightDirection), 0.0);\n\n      vec3 ambientColor = vDiffuse * 0.1;\n      vec3 dirColor = vDiffuse * vAmbient * lightAmt * min(vInSun,1.0);\n      vec3 specColor = vSpecular * lightAmt * min(vInSun,1.0);\n\n      vec3 color = ambientColor + dirColor + specColor;\n\n      gl_FragColor = vec4(color, 1.0);\n    }\n  ",meshManager.vertShaderCode="\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexNormal;\n    attribute vec3 aSpecular;\n    attribute float aSpecularExponent;\n    attribute vec3 aAmbient;\n    attribute vec3 aDiffuse;\n    attribute vec2 aTextureCoord;\n\n    uniform mat4 uPMatrix;\n    uniform mat4 uCamMatrix;\n    uniform mat4 uMvMatrix;\n    uniform mat3 uNormalMatrix;\n    uniform vec3 uLightDirection;\n    uniform float uInSun;\n\n    varying vec2 vTextureCoord;\n    varying vec3 vTransformedNormal;\n    varying vec4 vPosition;\n    varying vec3 vLightDirection;\n    varying float vInSun;\n\n    varying vec3 vAmbient;\n    varying vec3 vDiffuse;\n    varying vec3 vSpecular;\n    varying float vSpecularExponent;\n\n    void main(void) {\n      vLightDirection = uLightDirection;\n      vAmbient = aAmbient;\n      vDiffuse = aDiffuse;\n      vSpecular = aSpecular;\n      vSpecularExponent = aSpecularExponent;\n      vInSun = uInSun;\n\n      vPosition = uCamMatrix * uMvMatrix * vec4(aVertexPosition, 1.0);\n      gl_Position = uPMatrix * vPosition;\n      vTextureCoord = aTextureCoord;\n      vTransformedNormal  = uNormalMatrix * aVertexNormal;\n    }\n  ",meshManager.isReady=!1,meshManager.init=(()=>{OBJ.downloadModels(meshManager.fileList).then(e=>{for(var[a,r]of Object.entries(e));meshManager.meshes=e,function(){let e=gl.createShader(gl.FRAGMENT_SHADER),a=meshManager.fragShaderCode;gl.shaderSource(e,a),gl.compileShader(e);let r=gl.createShader(gl.VERTEX_SHADER),n=meshManager.vertShaderCode;gl.shaderSource(r,n),gl.compileShader(r),meshManager.shaderProgram=gl.createProgram(),gl.attachShader(meshManager.shaderProgram,r),gl.attachShader(meshManager.shaderProgram,e),gl.linkProgram(meshManager.shaderProgram),gl.getProgramParameter(meshManager.shaderProgram,gl.LINK_STATUS)||console.log("Could not initialise shaders");gl.useProgram(meshManager.shaderProgram);const t={aVertexPosition:OBJ.Layout.POSITION.key,aVertexNormal:OBJ.Layout.NORMAL.key,aTextureCoord:OBJ.Layout.UV.key,aAmbient:OBJ.Layout.AMBIENT.key,aDiffuse:OBJ.Layout.DIFFUSE.key,aSpecular:OBJ.Layout.SPECULAR.key,aSpecularExponent:OBJ.Layout.SPECULAR_EXPONENT.key};meshManager.shaderProgram.attrIndices={},meshManager.shaderProgram.uPMatrix=gl.getUniformLocation(meshManager.shaderProgram,"uPMatrix"),meshManager.shaderProgram.uCamMatrix=gl.getUniformLocation(meshManager.shaderProgram,"uCamMatrix"),meshManager.shaderProgram.uMvMatrix=gl.getUniformLocation(meshManager.shaderProgram,"uMvMatrix"),meshManager.shaderProgram.uNormalMatrix=gl.getUniformLocation(meshManager.shaderProgram,"uNormalMatrix"),meshManager.shaderProgram.uLightDirection=gl.getUniformLocation(meshManager.shaderProgram,"uLightDirection"),meshManager.shaderProgram.uInSun=gl.getUniformLocation(meshManager.shaderProgram,"uInSun"),meshManager.shaderProgram.applyAttributePointers=function(e){const a=e.mesh.vertexBuffer.layout;for(const e in t){if(!t.hasOwnProperty(e)||-1==meshManager.shaderProgram.attrIndices[e])continue;const r=t[e];if(-1!=meshManager.shaderProgram.attrIndices[e]){const n=a.attributeMap[r];gl.vertexAttribPointer(meshManager.shaderProgram.attrIndices[e],n.size,gl[n.type],n.normalized,n.stride,n.offset)}}},meshManager.shaderProgram.enableVertexAttribArrays=function(e){for(const e in t)t.hasOwnProperty(e)&&(meshManager.shaderProgram.attrIndices[e]=gl.getAttribLocation(meshManager.shaderProgram,e),-1!=meshManager.shaderProgram.attrIndices[e]?gl.enableVertexAttribArray(meshManager.shaderProgram.attrIndices[e]):console.warn('Shader attribute "'+e+'" not found in shader. Is it undeclared or unused in the shader code?'))},meshManager.shaderProgram.disableVertexAttribArrays=function(e){for(const e in t)t.hasOwnProperty(e)&&(meshManager.shaderProgram.attrIndices[e]=gl.getAttribLocation(meshManager.shaderProgram,e),-1!=meshManager.shaderProgram.attrIndices[e]?gl.disableVertexAttribArray(meshManager.shaderProgram.attrIndices[e]):console.warn('Shader attribute "'+e+'" not found in shader. Is it undeclared or unused in the shader code?'))}}(),function(){var e=new OBJ.Layout(OBJ.Layout.POSITION,OBJ.Layout.NORMAL,OBJ.Layout.AMBIENT,OBJ.Layout.DIFFUSE,OBJ.Layout.UV,OBJ.Layout.SPECULAR,OBJ.Layout.SPECULAR_EXPONENT);for(var a in meshManager.meshes){var r=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,r);var n=meshManager.meshes[a].makeBufferData(e);gl.bufferData(gl.ARRAY_BUFFER,n,gl.STATIC_DRAW),r.numItems=n.numItems,r.layout=e,meshManager.meshes[a].vertexBuffer=r;var t=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,t);var o=meshManager.meshes[a].makeIndexBufferDataForMaterials(...Object.values(meshManager.meshes[a].materialIndices));gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,o,gl.STATIC_DRAW),t.numItems=o.numItems,meshManager.meshes[a].indexBuffer=t,meshManager.models[a]={},meshManager.models[a].mesh=meshManager.meshes[a]}meshManager.loaded=!0}(),meshManager.isReady=!0})}),meshManager.meshes={},meshManager.models={},meshManager.mvMatrix=mat4.create(),meshManager.mvMatrixStack=[],meshManager.pMatrix=mat4.create(),meshManager.drawObject=((t,o,i,s,g)=>{if(void 0===t)return;if(!meshManager.loaded)return;let m=s.isInSun();e=r,mat4.identity(e),mat4.translate(e,e,vec3.fromValues(t.position.x,t.position.y,t.position.z)),g&&mat4.rotateZ(e,e,longToYaw(s.getTEARR().lon*RAD2DEG)+180*DEG2RAD),a=n,mat3.normalFromMat4(a,e),gl.enable(gl.BLEND),gl.useProgram(meshManager.shaderProgram),gl.bindFramebuffer(gl.FRAMEBUFFER,null),gl.uniform3fv(meshManager.shaderProgram.uLightDirection,earth.lightDirection),gl.uniformMatrix3fv(meshManager.shaderProgram.uNormalMatrix,!1,a),gl.uniformMatrix4fv(meshManager.shaderProgram.uMvMatrix,!1,e),gl.uniformMatrix4fv(meshManager.shaderProgram.uPMatrix,!1,o),gl.uniformMatrix4fv(meshManager.shaderProgram.uCamMatrix,!1,i),gl.uniform1f(meshManager.shaderProgram.uInSun,m),gl.bindBuffer(gl.ARRAY_BUFFER,t.mesh.vertexBuffer),meshManager.shaderProgram.applyAttributePointers(t),meshManager.shaderProgram.enableVertexAttribArrays(t),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,t.mesh.indexBuffer),gl.drawElements(gl.TRIANGLES,t.mesh.indexBuffer.numItems,gl.UNSIGNED_SHORT,0),meshManager.shaderProgram.disableVertexAttribArrays(t),gl.disable(gl.BLEND)}),window.meshManager=meshManager}();
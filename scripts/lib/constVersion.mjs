import fs from 'fs';

/**
 * @param {string} version - version number
 * @returns {string} - formatted file contents
 */
const template = (version) =>
  `
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
export const VERSION = '${version}';\n
`;

/**
 * @param {string} source - path to package.json
 * @returns {Promise<string>} - resolves with version number
 */
const readVersion = async (source) => {
  // eslint-disable-next-line no-sync
  const data = fs.readFileSync(source, (err) => {
    if (err) throw err;
  });
  let json;

  try {
    json = JSON.parse(data);
  } catch {
    throw new Error(`file doesn't contain valid json`);
  }

  if (!json?.version) {
    throw new Error(`file doesn't contain version`);
  }

  return json.version;
};

/**
 * @param {string} path - path to package.json
 * @param {string} version - version number
 * @returns {Promise<void>} - resolves when version is written to file
 */
const writeVersion = (path, version) => {
  const data = template(version);
  return fs.writeFile(path, data, 'utf8', (err) => {
    if (err) throw err;
  });
};

/**
 * @param {string} source - path to the package.json
 * @param {string} dest - path to the version.js
 * @returns {void}
 */
export const generateConstVersion = (source, dest) => readVersion(source).then((ver) => writeVersion(dest, ver));

export default generateConstVersion;

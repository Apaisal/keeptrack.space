!function(){"use strict";let a=mat4.create(),t=mat3.create(),e={};function r(a,t,e,r,n,i){var o={};o.latitude=r,o.longitude=n,o.height=i;var g,l,s,u=satellite.geodeticToEcf(o);g=u.x,l=u.y,s=u.z;var m=Math.sin(r),M=Math.sin(n),d=Math.cos(r),c=Math.cos(n),v=DEG2RAD*a,p=DEG2RAD*t,f=-e*Math.cos(p)*Math.cos(v),h=e*Math.cos(p)*Math.sin(v),x=e*Math.sin(p);return{x:m*c*f+-M*h+d*c*x+g,y:m*M*f+c*h+d*M*x+l,z:-d*f+m*x+s}}!function(){var a,t,r,n,i,o,g,l,s,u,m,M={},d=!1,c=mat4.create(),v=mat3.create();M.earthJ=0,M.earthEra=0,M.timeTextStr="",M.timeTextStrEmpty="",M.lightDirection=[],M.propRateDOM=$("#propRate-status-box"),M.pos=[0,0,0];var p=!1,f=!1;function h(){p&&f&&M.bumpMap.isReady&&M.specularMap.isReady&&(!0,M.loaded=!0)}M.loaded=!1,M.isDayNightToggle=!1,M.init=function(){let o=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(o,e.shaders.earth.frag),gl.compileShader(o);let g=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(g,e.shaders.earth.vert),gl.compileShader(g),s=gl.createProgram(),gl.attachShader(s,g),gl.attachShader(s,o),gl.linkProgram(s),s.aVertexPosition=gl.getAttribLocation(s,"aVertexPosition"),s.aTexCoord=gl.getAttribLocation(s,"aTexCoord"),s.aVertexNormal=gl.getAttribLocation(s,"aVertexNormal"),s.uPMatrix=gl.getUniformLocation(s,"uPMatrix"),s.uCamMatrix=gl.getUniformLocation(s,"uCamMatrix"),s.uMvMatrix=gl.getUniformLocation(s,"uMvMatrix"),s.uNormalMatrix=gl.getUniformLocation(s,"uNormalMatrix"),s.uLightDirection=gl.getUniformLocation(s,"uLightDirection"),s.uAmbientLightColor=gl.getUniformLocation(s,"uAmbientLightColor"),s.uDirectionalLightColor=gl.getUniformLocation(s,"uDirectionalLightColor"),s.uSampler=gl.getUniformLocation(s,"uSampler"),s.uNightSampler=gl.getUniformLocation(s,"uNightSampler"),s.uBumpMap=gl.getUniformLocation(s,"uBumpMap"),s.uSpecMap=gl.getUniformLocation(s,"uSpecMap"),u=gl.createTexture();var l=new Image;l.onload=function(){settingsManager.loadStr("painting"),gl.bindTexture(gl.TEXTURE_2D,u),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,l),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT),p=!0,h()},l.src=settingsManager.installDirectory+"textures/earthmap512.jpg",M.loadHiRes=(()=>{var a=new Image;a.src=settingsManager.installDirectory+"textures/earthmap4k.jpg",settingsManager.nasaImages&&(a.src=settingsManager.installDirectory+"textures/mercator-tex.jpg"),settingsManager.trusatImages&&(l.src=settingsManager.installDirectory+"textures/trusatvector-4096.jpg"),settingsManager.blueImages&&(a.src=settingsManager.installDirectory+"textures/world_blue-2048.png"),settingsManager.vectorImages&&(a.src=settingsManager.installDirectory+"textures/dayearthvector-4096.jpg"),settingsManager.hiresImages&&(a.src=settingsManager.installDirectory+"textures/earthmap16k.jpg"),settingsManager.hiresNoCloudsImages&&(a.src=settingsManager.installDirectory+"textures/earthmap16k.jpg"),M.isUseHiRes=!0,a.onload=function(){gl.bindTexture(gl.TEXTURE_2D,u),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,a),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT),p=!0,M.isHiResReady=!0,h()}}),m=gl.createTexture();var d=new Image;d.onload=function(){gl.bindTexture(gl.TEXTURE_2D,m),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,d),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT),f=!0,h()},d.src=settingsManager.installDirectory+"textures/earthlights512.jpg",M.loadHiResNight=(()=>{var a=new Image;settingsManager.smallImages||(a.src=settingsManager.installDirectory+"textures/earthlights4k.jpg"),settingsManager.vectorImages&&(a.src=settingsManager.installDirectory+"textures/dayearthvector-4096.jpg"),(settingsManager.hiresImages||settingsManager.hiresNoCloudsImages)&&(a.src=settingsManager.installDirectory+"textures/earthlights16k.jpg"),a.onload=function(){gl.bindTexture(gl.TEXTURE_2D,m),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,a),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT),f=!0,h()}}),M.bumpMap={},M.bumpMap.isReady=!1,M.bumpMap.texture=gl.createTexture(),M.bumpMap.img=new Image,M.bumpMap.img.onload=function(){gl.bindTexture(gl.TEXTURE_2D,M.bumpMap.texture),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,M.bumpMap.img),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT),M.bumpMap.isReady=!0,h()},M.bumpMap.img.src=settingsManager.installDirectory+"textures/earthbump8k.jpg",settingsManager.smallImages&&(M.bumpMap.img.src=settingsManager.installDirectory+"textures/earthbump256.jpg"),settingsManager.isMobileModeEnabled&&(M.bumpMap.img.src=settingsManager.installDirectory+"textures/earthbump4k.jpg"),M.specularMap={},M.specularMap.isReady=!1,M.specularMap.texture=gl.createTexture(),M.specularMap.img=new Image,M.specularMap.img.onload=function(){gl.bindTexture(gl.TEXTURE_2D,M.specularMap.texture),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,M.specularMap.img),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT),M.specularMap.isReady=!0,h()},M.specularMap.img.src=settingsManager.installDirectory+"textures/earthspec8k.jpg",settingsManager.smallImages&&(M.specularMap.img.src=settingsManager.installDirectory+"textures/earthspec256.jpg"),settingsManager.isMobileModeEnabled&&(M.specularMap.img.src=settingsManager.installDirectory+"textures/earthspec4k.jpg");var c=[],v=[],x=[];for(let a=0;a<=settingsManager.earthNumLatSegs;a++){var R=Math.PI/settingsManager.earthNumLatSegs*a-Math.PI/2,A=Math.cos(Math.abs(R)),E=Math.sin(R);for(let t=0;t<=settingsManager.earthNumLonSegs;t++){var T=2*Math.PI/settingsManager.earthNumLonSegs*t,D=Math.cos(T)*A,S=Math.sin(T)*A,_=1-a/settingsManager.earthNumLatSegs,b=.5+t/settingsManager.earthNumLonSegs;c.push(D*RADIUS_OF_EARTH),c.push(S*RADIUS_OF_EARTH),c.push(E*RADIUS_OF_EARTH),x.push(b),x.push(_),v.push(D),v.push(S),v.push(E)}}var U=[];for(let a=0;a<settingsManager.earthNumLatSegs;a++)for(let t=0;t<settingsManager.earthNumLonSegs;t++){var P=a*(settingsManager.earthNumLonSegs+1)+t,N=P+1,C=(a+1)*(settingsManager.earthNumLonSegs+1)+t,F=C+1;U.push(P),U.push(N),U.push(C),U.push(C),U.push(F),U.push(N)}i=U.length,a=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,a),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(c),gl.STATIC_DRAW),t=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,t),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(v),gl.STATIC_DRAW),r=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,r),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(x),gl.STATIC_DRAW),n=gl.createBuffer(),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,n),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(U),gl.STATIC_DRAW),M.loaded=!0},M.update=(()=>{if(M.lastTime=o,timeManager.updatePropTime(),o=timeManager.propTimeVar,timeManager.selectedDate=o,M.lastTime-o<300){for(M.tDS=o.toJSON(),M.timeTextStr=M.timeTextStrEmpty,M.iText=11;M.iText<20;M.iText++)M.iText>11&&(M.timeTextStr+=M.tDS[M.iText-1]);settingsManager.isPropRateChange&&!settingsManager.isAlwaysHidePropRate&&timeManager.propRate0!==timeManager.propRate&&(timeManager.propRate>1.01||timeManager.propRate<.99?(timeManager.propRate<10&&uiManager.toast(`Propagation Speed: ${timeManager.propRate.toFixed(1)}x`,"standby"),timeManager.propRate>=10&&timeManager.propRate<100&&uiManager.toast(`Propagation Speed: ${timeManager.propRate.toFixed(1)}x`,"caution"),timeManager.propRate>=100&&uiManager.toast(`Propagation Speed: ${timeManager.propRate.toFixed(1)}x`,"serious")):uiManager.toast(`Propagation Speed: ${timeManager.propRate.toFixed(1)}x`,"normal"),timeManager.propRate0=timeManager.propRate,settingsManager.isPropRateChange=!1),settingsManager.disableUI||(d?document.getElementById("datetime-text").childNodes[0].nodeValue=M.timeTextStr:(document.getElementById("datetime-text").innerText=M.timeTextStr,d=!0))}!settingsManager.isEditTime&&settingsManager.cruncherReady||$("#datetime-input-tb").val(timeManager.selectedDate.toISOString().slice(0,10)+" "+timeManager.selectedDate.toISOString().slice(11,19)),M.earthJ=timeManager.jday(o.getUTCFullYear(),o.getUTCMonth()+1,o.getUTCDate(),o.getUTCHours(),o.getUTCMinutes(),o.getUTCSeconds()),M.earthJ+=o.getUTCMilliseconds()*MILLISECONDS_PER_DAY,M.earthEra=satellite.gstime(M.earthJ),sun.currentDirection(),vec3.normalize(M.lightDirection,M.lightDirection),g=c,mat4.identity(g),mat4.rotateZ(g,g,M.earthEra),mat4.translate(g,g,M.pos),l=v,mat3.normalFromMat4(l,g)}),M.draw=function(e,o){if(M.loaded)return gl.useProgram(s),gl.bindFramebuffer(gl.FRAMEBUFFER,null),gl.uniformMatrix3fv(s.uNormalMatrix,!1,l),gl.uniformMatrix4fv(s.uMvMatrix,!1,g),gl.uniformMatrix4fv(s.uPMatrix,!1,e),gl.uniformMatrix4fv(s.uCamMatrix,!1,o),gl.uniform3fv(s.uLightDirection,M.lightDirection),gl.uniform3fv(s.uAmbientLightColor,[.1,.1,.1]),gl.uniform3fv(s.uDirectionalLightColor,[1,1,1]),gl.uniform1i(s.uSampler,0),gl.activeTexture(gl.TEXTURE0),gl.bindTexture(gl.TEXTURE_2D,u),gl.uniform1i(s.uNightSampler,1),gl.activeTexture(gl.TEXTURE1),M.isDayNightToggle?gl.bindTexture(gl.TEXTURE_2D,u):gl.bindTexture(gl.TEXTURE_2D,m),gl.uniform1i(s.uBumpMap,2),gl.activeTexture(gl.TEXTURE2),gl.bindTexture(gl.TEXTURE_2D,M.bumpMap.texture),gl.uniform1i(s.uSpecMap,3),gl.activeTexture(gl.TEXTURE3),gl.bindTexture(gl.TEXTURE_2D,M.specularMap.texture),gl.bindBuffer(gl.ARRAY_BUFFER,r),gl.enableVertexAttribArray(s.aTexCoord),gl.vertexAttribPointer(s.aTexCoord,2,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ARRAY_BUFFER,a),gl.enableVertexAttribArray(s.aVertexPosition),gl.vertexAttribPointer(s.aVertexPosition,3,gl.FLOAT,!1,0,0),gl.vertexAttribPointer(gl.pickShaderProgram.aPos,3,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ARRAY_BUFFER,t),gl.enableVertexAttribArray(s.aVertexNormal),gl.vertexAttribPointer(s.aVertexNormal,3,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,n),gl.drawElements(gl.TRIANGLES,i,gl.UNSIGNED_SHORT,0),gl.disableVertexAttribArray(s.aTexCoord),gl.disableVertexAttribArray(s.aVertexPosition),gl.disableVertexAttribArray(s.aVertexNormal),gl.useProgram(gl.pickShaderProgram),gl.bindFramebuffer(gl.FRAMEBUFFER,gl.pickFb),gl.uniformMatrix4fv(gl.pickShaderProgram.uMvMatrix,!1,g),gl.disableVertexAttribArray(gl.pickShaderProgram.aColor),gl.enableVertexAttribArray(gl.pickShaderProgram.aPos),gl.drawElements(gl.TRIANGLES,i,gl.UNSIGNED_SHORT,0),!0},window.earth=M}(),function(){var r={};let n,i,o,g;r.lightDirection=[],r.init=function(){let a=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(a,e.shaders.atmosphere.frag),gl.compileShader(a);let t=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(t,e.shaders.atmosphere.vert),gl.compileShader(t),g=gl.createProgram(),gl.attachShader(g,t),gl.attachShader(g,a),gl.linkProgram(g),g.aVertexPosition=gl.getAttribLocation(g,"aVertexPosition"),g.aVertexNormal=gl.getAttribLocation(g,"aVertexNormal"),g.uPMatrix=gl.getUniformLocation(g,"uPMatrix"),g.uCamMatrix=gl.getUniformLocation(g,"uCamMatrix"),g.uMvMatrix=gl.getUniformLocation(g,"uMvMatrix"),g.uNormalMatrix=gl.getUniformLocation(g,"uNormalMatrix"),g.uLightDirection=gl.getUniformLocation(g,"uLightDirection");let l=[],s=[];for(let a=0;a<=settingsManager.atmospherelatSegs;a++){let t=Math.PI/settingsManager.atmospherelatSegs*a-Math.PI/2,e=Math.cos(Math.abs(t)),r=Math.sin(t);for(let a=0;a<=settingsManager.atmospherelonSegs;a++){let t=2*Math.PI/settingsManager.atmospherelonSegs*a,n=Math.cos(t)*e,i=Math.sin(t)*e;l.push(n*settingsManager.atmosphereSize),l.push(i*settingsManager.atmosphereSize),l.push(r*settingsManager.atmosphereSize),s.push(n),s.push(i),s.push(r)}}let u=[];for(let a=0;a<settingsManager.atmospherelatSegs;a++)for(let t=0;t<settingsManager.atmospherelonSegs;t++){var m=a*(settingsManager.atmospherelonSegs+1)+t,M=m+1,d=(a+1)*(settingsManager.atmospherelonSegs+1)+t,c=d+1;u.push(m),u.push(M),u.push(d),u.push(d),u.push(c),u.push(M)}r.vertCount=u.length,n=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,n),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(l),gl.STATIC_DRAW),i=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,i),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(s),gl.STATIC_DRAW),o=gl.createBuffer(),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,o),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(u),gl.STATIC_DRAW),r.loaded=!0},r.update=(()=>{r.mvMatrix=a,mat4.identity(r.mvMatrix),mat4.rotateY(r.mvMatrix,r.mvMatrix,90*DEG2RAD-camPitch),mat4.translate(r.mvMatrix,r.mvMatrix,[0,0,0]),r.nMatrix=t,mat3.normalFromMat4(r.nMatrix,r.mvMatrix)}),r.draw=function(a,t){if(r.loaded)return gl.enable(gl.BLEND),gl.disable(gl.DEPTH_TEST),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA),gl.useProgram(g),gl.bindFramebuffer(gl.FRAMEBUFFER,null),gl.uniformMatrix3fv(g.uNormalMatrix,!1,r.nMatrix),gl.uniformMatrix4fv(g.uMvMatrix,!1,r.mvMatrix),gl.uniformMatrix4fv(g.uPMatrix,!1,a),gl.uniformMatrix4fv(g.uCamMatrix,!1,t),gl.uniform3fv(g.uLightDirection,earth.lightDirection),gl.bindBuffer(gl.ARRAY_BUFFER,n),gl.enableVertexAttribArray(g.aVertexPosition),gl.vertexAttribPointer(g.aVertexPosition,3,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ARRAY_BUFFER,i),gl.enableVertexAttribArray(g.aVertexNormal),gl.vertexAttribPointer(g.aVertexNormal,3,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,o),gl.drawElements(gl.TRIANGLES,r.vertCount,gl.UNSIGNED_SHORT,0),gl.disableVertexAttribArray(g.aVertexPosition),gl.disableVertexAttribArray(g.aVertexNormal),gl.disable(gl.BLEND),gl.enable(gl.DEPTH_TEST),!0},window.atmosphere=r}(),function(){var n={};n.sunvar={},n.currentDirection=function(){return timeManager.updatePropTime(),n.sunvar.now=timeManager.propTimeVar,n.sunvar.j=timeManager.jday(n.sunvar.now.getUTCFullYear(),n.sunvar.now.getUTCMonth()+1,n.sunvar.now.getUTCDate(),n.sunvar.now.getUTCHours(),n.sunvar.now.getUTCMinutes(),n.sunvar.now.getUTCSeconds()),n.sunvar.j+=n.sunvar.now.getUTCMilliseconds()*MILLISECONDS_PER_DAY,n.getDirection(n.sunvar.j)},n.getDirection=function(a){n.sunvar.n=a-2451545,n.sunvar.L=280.46+.9856474*n.sunvar.n,n.sunvar.g=357.528+.9856003*n.sunvar.n,n.sunvar.L=n.sunvar.L%360,n.sunvar.g=n.sunvar.g%360,n.sunvar.ecLon=n.sunvar.L+1.915*Math.sin(n.sunvar.g*DEG2RAD)+.02*Math.sin(2*n.sunvar.g*DEG2RAD),n.sunvar.ob=function(a){return n.sunvar.t=(a-2451545)/3652500,n.sunvar.obliq=84381.448-4680.93*n.sunvar.t-1.55*Math.pow(n.sunvar.t,2)+1999.25*Math.pow(n.sunvar.t,3)-51.38*Math.pow(n.sunvar.t,4)-249.67*Math.pow(n.sunvar.t,5)-39.05*Math.pow(n.sunvar.t,6)+7.12*Math.pow(n.sunvar.t,7)+27.87*Math.pow(n.sunvar.t,8)+5.79*Math.pow(n.sunvar.t,9)+2.45*Math.pow(n.sunvar.t,10),n.sunvar.obliq/3600}(a),earth.lightDirection[0]=Math.cos(n.sunvar.ecLon*DEG2RAD),earth.lightDirection[1]=Math.cos(n.sunvar.ob*DEG2RAD)*Math.sin(n.sunvar.ecLon*DEG2RAD),earth.lightDirection[2]=Math.sin(n.sunvar.ob*DEG2RAD)*Math.sin(n.sunvar.ecLon*DEG2RAD)};let i,o,g,l,s,u,m;n.pos=[0,0,0],n.pos2=[0,0,0];let M;n.init=function(){let a=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(a,e.shaders.sun.frag),gl.compileShader(a);let t=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(t,e.shaders.sun.vert),gl.compileShader(t),m=gl.createProgram(),gl.attachShader(m,t),gl.attachShader(m,a),gl.linkProgram(m),m.aVertexPosition=gl.getAttribLocation(m,"aVertexPosition"),m.aTexCoord=gl.getAttribLocation(m,"aTexCoord"),m.aVertexNormal=gl.getAttribLocation(m,"aVertexNormal"),m.uPMatrix=gl.getUniformLocation(m,"uPMatrix"),m.uCamMatrix=gl.getUniformLocation(m,"uCamMatrix"),m.uMvMatrix=gl.getUniformLocation(m,"uMvMatrix"),m.uNormalMatrix=gl.getUniformLocation(m,"uNormalMatrix"),m.uLightDirection=gl.getUniformLocation(m,"uLightDirection"),m.uSunDis=gl.getUniformLocation(m,"uSunDis");var r=[],s=[],u=[];for(let a=0;a<=64;a++){var M=Math.PI/64*a-Math.PI/2,d=Math.cos(Math.abs(M)),c=Math.sin(M);for(let t=0;t<=64;t++){var v=2*Math.PI/64*t,p=Math.cos(v)*d,f=Math.sin(v)*d,h=1-a/64,x=.5+t/64;r.push(p*RADIUS_OF_DRAW_SUN),r.push(f*RADIUS_OF_DRAW_SUN),r.push(c*RADIUS_OF_DRAW_SUN),u.push(x),u.push(h),s.push(p),s.push(f),s.push(c)}}var R=[];for(let a=0;a<64;a++)for(let t=0;t<64;t++){var A=65*a+t,E=A+1,T=65*(a+1)+t,D=T+1;R.push(A),R.push(E),R.push(T),R.push(T),R.push(D),R.push(E)}l=R.length,i=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,i),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(r),gl.STATIC_DRAW),o=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,o),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(s),gl.STATIC_DRAW),g=gl.createBuffer(),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,g),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(R),gl.STATIC_DRAW),n.loaded=!0},n.draw=function(e,d){if(n.loaded){0===timeManager.propRate?timeManager.propTimeVar.setTime(Number(timeManager.propRealTime)+timeManager.propOffset):timeManager.propTimeVar.setTime(Number(timeManager.propRealTime)+timeManager.propOffset+(Number(timeManager.now)-Number(timeManager.propRealTime))*timeManager.propRate),n.now=timeManager.propTimeVar,n.sunvar.j=timeManager.jday(n.now.getUTCFullYear(),n.now.getUTCMonth()+1,n.now.getUTCDate(),n.now.getUTCHours(),n.now.getUTCMinutes(),n.now.getUTCSeconds()),n.sunvar.j+=n.now.getUTCMilliseconds()*MILLISECONDS_PER_DAY,n.sunvar.gmst=satellite.gstime(n.sunvar.j),n.sunvar.jdo=new A.JulianDay(n.sunvar.j),n.sunvar.coord=A.EclCoord.fromWgs84(0,0,0),n.sunvar.tp=A.Solar.topocentricPosition(n.sunvar.jdo,n.sunvar.coord,!1),n.sunvar.azimuth=n.sunvar.tp.hz.az*RAD2DEG+180,n.sunvar.elevation=n.sunvar.tp.hz.alt*RAD2DEG%360;var c=new A.JulianDay(A.JulianDay.dateToJD(n.now)).jdJ2000Century();return n.sunvar.g=180*A.Solar.meanAnomaly(c)/Math.PI,n.sunvar.g=n.sunvar.g%360,n.sunvar.R=1.00014-.01671*Math.cos(n.sunvar.g)-14e-5*Math.cos(2*n.sunvar.g),n.sunvar.range=149597870700*n.sunvar.R/1e3,n.eci=satellite.ecfToEci(r(n.sunvar.azimuth,n.sunvar.elevation,n.sunvar.range,0,0,0),n.sunvar.gmst),n.realXyz={x:n.eci.x,y:n.eci.y,z:n.eci.z},M=Math.max(Math.max(Math.abs(n.realXyz.x),Math.abs(n.realXyz.y)),Math.abs(n.realXyz.z)),n.pos[0]=n.realXyz.x/M*SUN_SCALAR_DISTANCE,n.pos[1]=n.realXyz.y/M*SUN_SCALAR_DISTANCE,n.pos[2]=n.realXyz.z/M*SUN_SCALAR_DISTANCE,n.pos2[0]=100*n.pos[0],n.pos2[1]=100*n.pos[1],n.pos2[2]=100*n.pos[2],s=a,mat4.identity(s),mat4.translate(s,s,n.pos),u=t,mat3.normalFromMat4(u,s),gl.enable(gl.BLEND),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA),gl.useProgram(m),gl.bindFramebuffer(gl.FRAMEBUFFER,null),gl.uniformMatrix3fv(m.uNormalMatrix,!1,u),gl.uniformMatrix4fv(m.uMvMatrix,!1,s),gl.uniformMatrix4fv(m.uPMatrix,!1,e),gl.uniformMatrix4fv(m.uCamMatrix,!1,d),gl.uniform3fv(m.uLightDirection,earth.lightDirection),gl.uniform1f(m.uSunDis,Math.sqrt(n.pos[0]**2+n.pos[1]**2+n.pos[2]**2)),gl.bindBuffer(gl.ARRAY_BUFFER,i),gl.enableVertexAttribArray(m.aVertexPosition),gl.vertexAttribPointer(m.aVertexPosition,3,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ARRAY_BUFFER,o),gl.enableVertexAttribArray(m.aVertexNormal),gl.vertexAttribPointer(m.aVertexNormal,3,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,g),gl.drawElements(gl.TRIANGLES,l,gl.UNSIGNED_SHORT,0),!0}},window.sun=n}(),function(){let n,i,o,g,l,s,u,m,M={};var d;M.pos=[0,0,0];M.getXYZ=(()=>(M.moonPos=SunCalc.getMoonPosition(sun.now,0,0),M.position=satellite.ecfToEci(r(180+M.moonPos.azimuth*RAD2DEG,M.moonPos.altitude*RAD2DEG,M.moonPos.distance,0,0,0),sun.sunvar.gmst),{x:M.position.x,y:M.position.y,z:M.position.z})),M.init=function(){let a=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(a,e.shaders.moon.frag),gl.compileShader(a);let t=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(t,e.shaders.moon.vert),gl.compileShader(t),m=gl.createProgram(),gl.attachShader(m,t),gl.attachShader(m,a),gl.linkProgram(m),m.aVertexPosition=gl.getAttribLocation(m,"aVertexPosition"),m.aTexCoord=gl.getAttribLocation(m,"aTexCoord"),m.aVertexNormal=gl.getAttribLocation(m,"aVertexNormal"),m.uPMatrix=gl.getUniformLocation(m,"uPMatrix"),m.uCamMatrix=gl.getUniformLocation(m,"uCamMatrix"),m.uMvMatrix=gl.getUniformLocation(m,"uMvMatrix"),m.uNormalMatrix=gl.getUniformLocation(m,"uNormalMatrix"),m.uSunPos=gl.getUniformLocation(m,"uSunPos"),m.uMoonDis=gl.getUniformLocation(m,"uMoonDis"),m.uSampler=gl.getUniformLocation(m,"uSampler"),d=gl.createTexture();var r=new Image;r.onload=function(){gl.bindTexture(gl.TEXTURE_2D,d),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,r),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);let a=M.getXYZ(),t=Math.max(Math.max(Math.abs(a.x),Math.abs(a.y)),Math.abs(a.z));M.pos[0]=a.x/t*MOON_SCALAR_DISTANCE,M.pos[1]=a.y/t*MOON_SCALAR_DISTANCE,M.pos[2]=a.z/t*MOON_SCALAR_DISTANCE,!0&&(M.loaded=!0)},r.src=settingsManager.installDirectory+"textures/moon-1024.jpg";var s=[],u=[],c=[];for(let a=0;a<=32;a++){var v=Math.PI/32*a-Math.PI/2,p=Math.cos(Math.abs(v)),f=Math.sin(v);for(let t=0;t<=32;t++){var h=2*Math.PI/32*t,x=Math.cos(h)*p,R=Math.sin(h)*p,A=1-a/32,E=.5+t/32;s.push(x*RADIUS_OF_DRAW_MOON),s.push(R*RADIUS_OF_DRAW_MOON),s.push(f*RADIUS_OF_DRAW_MOON),c.push(E),c.push(A),u.push(x),u.push(R),u.push(f)}}var T=[];for(let a=0;a<32;a++)for(let t=0;t<32;t++){var D=33*a+t,S=D+1,_=33*(a+1)+t,b=_+1;T.push(D),T.push(S),T.push(_),T.push(_),T.push(b),T.push(S)}l=T.length,n=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,n),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(s),gl.STATIC_DRAW),i=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,i),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(u),gl.STATIC_DRAW),o=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,o),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(c),gl.STATIC_DRAW),g=gl.createBuffer(),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,g),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(T),gl.STATIC_DRAW)},M.draw=function(e,c){if(M.loaded)return M.moonPos=SunCalc.getMoonPosition(sun.now,0,0),M.position=satellite.ecfToEci(r(180+M.moonPos.azimuth*RAD2DEG,M.moonPos.altitude*RAD2DEG,M.moonPos.distance,0,0,0),sun.sunvar.gmst),M.moonXYZ={x:M.position.x,y:M.position.y,z:M.position.z},M.moonMaxDist=Math.max(Math.max(Math.abs(M.moonXYZ.x),Math.abs(M.moonXYZ.y)),Math.abs(M.moonXYZ.z)),M.pos[0]=M.moonXYZ.x/M.moonMaxDist*MOON_SCALAR_DISTANCE,M.pos[1]=M.moonXYZ.y/M.moonMaxDist*MOON_SCALAR_DISTANCE,M.pos[2]=M.moonXYZ.z/M.moonMaxDist*MOON_SCALAR_DISTANCE,s=a,mat4.identity(s),mat4.translate(s,s,M.pos),u=t,mat3.normalFromMat4(u,s),gl.enable(gl.BLEND),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA),gl.useProgram(m),gl.bindFramebuffer(gl.FRAMEBUFFER,null),gl.uniformMatrix3fv(m.uNormalMatrix,!1,u),gl.uniformMatrix4fv(m.uMvMatrix,!1,s),gl.uniformMatrix4fv(m.uPMatrix,!1,e),gl.uniformMatrix4fv(m.uCamMatrix,!1,c),gl.uniform3fv(m.uSunPos,sun.pos2),gl.uniform1f(m.uMoonDis,Math.sqrt(M.pos[0]**2+M.pos[1]**2+M.pos[2]**2)),gl.uniform1i(m.uSampler,0),gl.activeTexture(gl.TEXTURE0),gl.bindTexture(gl.TEXTURE_2D,d),gl.bindBuffer(gl.ARRAY_BUFFER,o),gl.enableVertexAttribArray(m.aTexCoord),gl.vertexAttribPointer(m.aTexCoord,2,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ARRAY_BUFFER,n),gl.enableVertexAttribArray(m.aVertexPosition),gl.vertexAttribPointer(m.aVertexPosition,3,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ARRAY_BUFFER,i),gl.enableVertexAttribArray(m.aVertexNormal),gl.vertexAttribPointer(m.aVertexNormal,3,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,g),gl.drawElements(gl.TRIANGLES,l,gl.UNSIGNED_SHORT,0),gl.disableVertexAttribArray(m.aTexCoord),gl.disableVertexAttribArray(m.aVertexPosition),gl.disableVertexAttribArray(m.aVertexNormal),!0},window.moon=M}(),e.shaders={earth:{frag:"\n        precision mediump float;\n\n        uniform vec3 uAmbientLightColor;\n        uniform vec3 uDirectionalLightColor;\n        uniform vec3 uLightDirection;\n\n        varying vec2 vUv;\n        varying vec3 vNormal;\n\n        uniform sampler2D uSampler;\n        uniform sampler2D uNightSampler;\n        uniform sampler2D uBumpMap;\n        uniform sampler2D uSpecMap;\n\n        void main(void) {\n          // float shininess = 1.0;\n          // float diffuse = pow(max(dot(vNormal, uLightDirection), 0.0),shininess);\n          // float diffuseLight = 0.7;\n          float diffuse = max(dot(vNormal, uLightDirection), 0.0);\n          vec3 bumpTexColor = texture2D(uBumpMap, vUv).rgb * diffuse * 0.4;\n          vec3 specLightColor = texture2D(uSpecMap, vUv).rgb * diffuse * 0.1;\n\n          vec3 dayColor = uAmbientLightColor + (uDirectionalLightColor * diffuse);\n          vec3 dayTexColor = texture2D(uSampler, vUv).rgb * dayColor;\n          vec3 nightColor = texture2D(uNightSampler, vUv).rgb * pow(1.0 - diffuse, 2.0);\n\n          gl_FragColor = vec4(dayTexColor + nightColor + bumpTexColor + specLightColor, 1.0);\n        }\n        ",vert:"\n        attribute vec3 aVertexPosition;\n\n        attribute vec2 aTexCoord;\n        attribute vec3 aVertexNormal;\n        uniform mat4 uPMatrix;\n        uniform mat4 uCamMatrix;\n        uniform mat4 uMvMatrix;\n        uniform mat3 uNormalMatrix;\n\n        varying vec2 vUv;\n        varying vec3 vNormal;\n\n        void main(void) {\n          gl_Position = uPMatrix * uCamMatrix * uMvMatrix * vec4(aVertexPosition, 1.0);\n          vUv = aTexCoord;\n\n          vNormal = uNormalMatrix * aVertexNormal;\n        }\n        "},sun:{frag:"\n        precision mediump float;\n        uniform vec3 uLightDirection;\n\n        varying vec3 vNormal;\n        varying float vDist;\n        varying float vDist2;\n\n        void main(void) {\n          // Hide the Back Side of the Sphere to prevent duplicate suns\n          float darkAmount = max(dot(vNormal, -uLightDirection), 0.1);\n          // Create blur effect\n          float a = pow(vDist / 2.0 * -1.0 + 1.1, 10.0) * darkAmount;\n          // Set colors\n          float r = 1.0 * a;\n          float g = 1.0 * a;\n          float b = 0.4 * a;\n\n          if (vDist2 > 1.0) {\n            discard;\n            // r = 0.0;\n            // g = 1.0;\n            // b = 0.0;\n            // a = 1.0;\n          }\n\n          gl_FragColor = vec4(vec3(r,g,b), a);\n        }\n      ",vert:`\n        attribute vec3 aVertexPosition;\n        attribute vec3 aVertexNormal;\n\n        uniform mat4 uPMatrix;\n        uniform mat4 uCamMatrix;\n        uniform mat4 uMvMatrix;\n        uniform mat3 uNormalMatrix;\n        uniform float uSunDis;\n\n        varying vec3 vNormal;\n        varying float vDist;\n        varying float vDist2;\n\n        void main(void) {\n          vec4 position = uMvMatrix * vec4(aVertexPosition, 1.0);\n          vec4 position0 = uCamMatrix * uMvMatrix * vec4(vec3(0.0,0.0,0.0), 1.0);\n          vec4 position1 = uCamMatrix * position;\n          gl_Position = uPMatrix * position1;\n          vDist = distance(position0.xz,position1.xz) / ${RADIUS_OF_DRAW_SUN}.0;\n          vDist2 = distance(position.xyz,vec3(0.0,0.0,0.0)) / uSunDis;\n          vNormal = uNormalMatrix * aVertexNormal;\n        }`},moon:{frag:"\n        precision mediump float;\n\n        uniform vec3 uLightDirection;\n        varying vec2 vUv;\n        varying vec3 vNormal;\n\n        uniform sampler2D uSampler;\n        uniform vec3 uSunPos;\n\n        varying float vDist;\n\n        void main(void) {\n          // Moon Position - Sun Position\n          vec3 LightDirection = uSunPos - vec3(0.0,0.0,0.0);\n          LightDirection = normalize(LightDirection);\n\n          float diffuse = max(dot(vNormal, LightDirection), 0.0);\n          vec3 ambientLight = vec3(0.05,0.05,0.05);\n\n          vec3 litTexColor = texture2D(uSampler, vUv).rgb * (ambientLight + diffuse * 1.5);\n\n          if (vDist > 1.0) {\n            discard;\n            // litTexColor = vec3(1.0,0.0,0.0);\n          }\n\n          gl_FragColor = vec4(litTexColor, 1.0);\n        }\n      ",vert:"\n        attribute vec3 aVertexPosition;\n\n        attribute vec2 aTexCoord;\n        attribute vec3 aVertexNormal;\n\n        uniform mat4 uPMatrix;\n        uniform mat4 uCamMatrix;\n        uniform mat4 uMvMatrix;\n        uniform mat3 uNormalMatrix;\n        uniform float uMoonDis;\n\n        varying vec2 vUv;\n        varying vec3 vNormal;\n        varying float vDist;\n\n        void main(void) {\n          vec4 position = uMvMatrix * vec4(aVertexPosition, 1.0);\n          gl_Position = uPMatrix * uCamMatrix * position;\n          vDist = distance(position.xyz,vec3(0.0,0.0,0.0)) / uMoonDis;\n          vUv = aTexCoord;\n\n          vNormal = uNormalMatrix * aVertexNormal;\n        }\n      "},atmosphere:{frag:"\n        precision mediump float;\n\n        uniform vec3 uLightDirection;\n        varying vec3 vNormal;\n        varying float vDist;\n\n        void main () {\n          float sunAmount = max(dot(vNormal, uLightDirection), 0.1);\n          float darkAmount = max(dot(vNormal, -uLightDirection), 0.0);\n          float a4 = pow(1.3 - vDist / 2.0, 1.1) * 2.0;\n          float r = 1.0 - sunAmount;\n          float g = max(1.0 - sunAmount, 0.75) - darkAmount;\n          float b = max(sunAmount, 0.8) - darkAmount;\n          float a1 = min(sunAmount, 0.8) * 2.0;\n          float a2 = min(pow(darkAmount / 1.15, 2.0),0.2);\n          float a3 = pow(vDist,2.0) * -1.0 + 1.2;\n          float a = min(a1 - a2, a3) * a4;\n          gl_FragColor    = vec4(vec3(r,g,b), a);\n        }\n      ",vert:`\n        attribute vec3 aVertexPosition;\n        attribute vec3 aVertexNormal;\n\n        uniform mat4 uPMatrix;\n        uniform mat4 uCamMatrix;\n        uniform mat4 uMvMatrix;\n        uniform mat3 uNormalMatrix;\n\n        varying vec3 vNormal;\n        varying float vDist;\n\n        void main(void) {\n          vec4 position1 = uCamMatrix * uMvMatrix * vec4(aVertexPosition, 1.0);\n          vec4 position0 = uCamMatrix * uMvMatrix * vec4(vec3(0.0,0.0,0.0), 1.0);\n          gl_Position = uPMatrix * position1;\n          vDist = distance(position0.xz,position1.xz) / ${settingsManager.atmosphereSize}.0;\n          vNormal = normalize( uNormalMatrix * aVertexNormal );\n        }\n      `}},window.sceneManager=e}(),function(){var a={};a.shaderData=[{name:"dot-fragment.glsl",code:`\n      ${settingsManager.desktopOnlySatShaderFix1}\n      precision mediump float;\n\n      varying vec4 vColor;\n      varying float vStar;\n      varying float vDist;\n\n      float when_lt(float x, float y) {\n        return max(sign(y - x), 0.0);\n      }\n      float when_ge(float x, float y) {\n        return 1.0 - when_lt(x, y);\n      }\n\n      void main(void) {\n\n        vec2 ptCoord = gl_PointCoord * 2.0 - vec2(1.0, 1.0);\n        float r = 0.0;\n        float alpha = 0.0;\n        // If not a star and not on the ground\n        r += (${settingsManager.satShader.blurFactor1} - min(abs(length(ptCoord)), 1.0)) * when_lt(vDist, 200000.0) * when_ge(vDist, 6421.0);\n        alpha += (pow(2.0 * r + ${settingsManager.satShader.blurFactor2}, 3.0)) * when_lt(vDist, 200000.0) * when_ge(vDist, 6421.0);\n\n        // If on the ground\n        r += (${settingsManager.satShader.blurFactor1} - min(abs(length(ptCoord)), 1.0)) * when_lt(vDist, 6421.0);\n        alpha += (pow(2.0 * r + ${settingsManager.satShader.blurFactor2}, 3.0)) * when_lt(vDist, 6471.0);\n\n        // If a star\n        r += (${settingsManager.satShader.blurFactor3} - min(abs(length(ptCoord)), 1.0)) * when_ge(vDist, 200000.0);\n        alpha += (pow(2.0 * r + ${settingsManager.satShader.blurFactor4}, 3.0)) * when_ge(vDist, 200000.0);\n\n        alpha = min(alpha, 1.0);\n        if (alpha == 0.0) discard;\n        gl_FragColor = vec4(vColor.rgb, vColor.a * alpha);\n        // Reduce Flickering from Depth Fighting\n        ${settingsManager.desktopOnlySatShaderFix2}\n      }\n    `},{name:"dot-vertex-var.glsl",code:`\n        attribute vec3 aPos;\n        attribute vec4 aColor;\n        attribute float aStar;\n\n        uniform float minSize;\n        uniform float maxSize;\n\n        uniform mat4 uCamMatrix;\n        uniform mat4 uMvMatrix;\n        uniform mat4 uPMatrix;\n\n        varying vec4 vColor;\n        varying float vStar;\n        varying float vDist;\n\n        float when_lt(float x, float y) {\n          return max(sign(y - x), 0.0);\n        }\n        float when_ge(float x, float y) {\n          return 1.0 - when_lt(x, y);\n        }\n\n        void main(void) {\n          vec4 position = uPMatrix * uCamMatrix *  uMvMatrix * vec4(aPos, 1.0);\n          float drawSize = 0.0;\n          float dist = distance(vec3(0.0, 0.0, 0.0),aPos.xyz);\n\n          // Satellite\n          drawSize +=\n            when_lt(aStar, 0.5) *\n            (min(max(pow(${settingsManager.satShader.distanceBeforeGrow} / position.z, 2.1), minSize * 0.9), maxSize) * 1.0);\n\n          // Something on the ground\n          drawSize +=\n            when_ge(aStar, 0.5) * when_lt(dist, 6421.0) *\n            (min(max(pow(${settingsManager.satShader.distanceBeforeGrow} / position.z, 2.1), minSize * 0.75), maxSize) * 1.0);\n\n          // Star or Searched Object\n          drawSize +=\n            when_ge(aStar, 0.5) * when_ge(dist, 6421.0) *\n            (min(max(${settingsManager.satShader.starSize} * 100000.0 / dist, ${settingsManager.satShader.starSize}),${settingsManager.satShader.starSize} * 1.0));\n\n          gl_PointSize = drawSize;\n          gl_Position = position;\n          vColor = aColor;\n          vStar = aStar * 1.0;\n          vDist = dist;\n        }\n      `},{name:"dot-fragment-rm.glsl",code:`\n          precision mediump float;\n\n          void main(void) {\n\n            vec2 ptCoord = gl_PointCoord * 2.0 - vec2(1.0, 1.0);\n\n            float r = (${settingsManager.satShader.blurFactor1} - min(abs(length(ptCoord)), 1.0));\n            float alpha = (pow(2.0 * r + ${settingsManager.satShader.blurFactor2}, 3.0));\n\n            alpha = min(alpha, 1.0);\n            gl_FragColor = vec4(1.0, 0.0, 1.0, alpha);\n          }\n        `},{name:"dot-vertex-rm.glsl",code:`\n            attribute vec3 aPos;\n\n            uniform mat4 uCamMatrix;\n            uniform mat4 uMvMatrix;\n            uniform mat4 uPMatrix;\n\n            void main(void) {\n              vec4 position = uPMatrix * uCamMatrix *  uMvMatrix * vec4(aPos, 1.0);\n              float drawSize = 0.0;\n              float dist = distance(vec3(0.0, 0.0, 0.0),aPos.xyz);\n\n              drawSize = (min(max(pow(${settingsManager.satShader.distanceBeforeGrow} / position.z, 2.1), 4.0 * 0.75), 80.0) * 1.0);\n\n              gl_PointSize = drawSize;\n              gl_Position = position;\n            }\n          `},{name:"pick-fragment.glsl",code:"\n            precision mediump float;\n\n            varying vec3 vColor;\n\n            void main(void) {\n              gl_FragColor = vec4(vColor, 1.0);\n            }\n          "},{name:"pick-vertex.glsl",code:"\n              attribute vec3 aPos;\n              attribute vec3 aColor;\n              attribute float aPickable;\n\n              uniform mat4 uCamMatrix;\n              uniform mat4 uMvMatrix;\n              uniform mat4 uPMatrix;\n\n              varying vec3 vColor;\n\n              void main(void) {\n                float dotSize = 16.0;\n                vec4 position = uPMatrix * uCamMatrix *  uMvMatrix * vec4(aPos, 1.0);\n                gl_Position = position;\n                gl_PointSize = dotSize * aPickable;\n                vColor = aColor * aPickable;\n              }\n            "},{name:"path-fragment.glsl",code:"\n              precision mediump float;\n\n              varying vec4 vColor;\n              varying float vAlpha;\n\n              void main(void) {\n                gl_FragColor = vec4(vColor[0],vColor[1],vColor[2], vColor[3] * vAlpha);\n              }\n            "},{name:"path-vertex.glsl",code:"\n            attribute vec4 aPos;\n\n            uniform mat4 uCamMatrix;\n            uniform mat4 uMvMatrix;\n            uniform mat4 uPMatrix;\n            uniform vec4 uColor;\n\n            varying vec4 vColor;\n            varying float vAlpha;\n\n            void main(void) {\n              vec4 position = uPMatrix * uCamMatrix *  uMvMatrix * vec4(aPos[0],aPos[1],aPos[2], 1.0);\n              gl_Position = position;\n              vColor = uColor;\n              vAlpha = aPos[3];\n            }\n          "}],a.shaderDataLen=a.shaderData.length;var t=0;a.getShaderCode=function(e){for(t=0;t<a.shaderDataLen;t++)if(a.shaderData[t].name===e)return a.shaderData[t].code;return null},window.shaderLoader=a}(),radarDataManager={},radarDataManager.radarData=[],radarDataManager.drawT1=0,radarDataManager.init=(()=>{$.getScript(`${settingsManager.installDirectory}radarData/radarData.txt`,function(a){settingsManager.loadStr("radarData"),$("#loading-screen").fadeIn(1e3,function(){radarDataManager.setup(a),$("#loading-screen").fadeOut("slow"),setTimeout(function(){settingsManager.loadStr("math")},800)})})}),radarDataManager.changeTimeToFirstDataTime=(()=>{timeManager.propOffset=new Date(radarDataManager.radarData[0].t)-Date.now(),$("#datetime-input-tb").datepicker("setDate",new Date(timeManager.propRealTime+timeManager.propOffset)),satCruncher.postMessage({typ:"offset",dat:timeManager.propOffset.toString()+" "+timeManager.propRate.toString()})}),radarDataManager.findFirstDataTime=(()=>{let a=1*timeManager.propTime();for(let t=0;t<radarDataManager.radarData.length;t++)if(radarDataManager.radarData[t].t>a-3e3)return void(radarDataManager.drawT1=t)}),radarDataManager.setup=(a=>{let t,e,r,n,i;db.log("radarDataManager.init"),radarDataManager.radarData=JSON.parse(a);for(let a=0;a<radarDataManager.radarData.length;a++)r=new Date(radarDataManager.radarData[a].t),t=timeManager.jday(r.getUTCFullYear(),r.getUTCMonth()+1,r.getUTCDate(),r.getUTCHours(),r.getUTCMinutes(),r.getUTCSeconds()),t+=1.15741e-8*r.getUTCMilliseconds(),e=satellite.gstime(t),n=satellite.lookAnglesToEcf(radarDataManager.radarData[a].a,radarDataManager.radarData[a].e,radarDataManager.radarData[a].r,sensorManager.sensorList.COD.lat*DEG2RAD,sensorManager.sensorList.COD.long*DEG2RAD,sensorManager.sensorList.COD.obshei),i=satellite.ecfToEci(n,e),radarDataManager.radarData[a].x=i.x,radarDataManager.radarData[a].y=i.y,radarDataManager.radarData[a].z=i.z;satSet.updateRadarData(),radarDataManager.changeTimeToFirstDataTime(),settingsManager.radarDataReady=!0}),radarDataManager.createFakeData=(()=>{let a=[],t=Date.now(),e=0;for(var r=0;r<36e5;r+=1e3)for(let n=0;n<20;n++){let n=240*Math.random()-18,i=2+2*Math.random();e<2&&(i=2+83*Math.random()),10==++e&&(e=0),a.push({t:t-2592e5+r,dataType:1,m:`${Math.round(1e5*Math.random())}`,ti:`${Math.round(1e5*Math.random())}`,oi:`${Math.round(1e5*Math.random())}`,si:`${Math.round(45e3*Math.random()-3e4)}`,mc:`${Math.round(5*Math.random()-3)}`,mo:`${Math.round(20*Math.random())}`,r:150+5556*Math.random(),a:n,e:i,ae:3*Math.random(),ee:3*Math.random(),rc:40*Math.random()/10})}return a}),window.radarDataManager=radarDataManager;
// // Requires server to be running
import 'jsdom-worker';
import '@app/js/settingsManager/settingsManager.js';

import '@app/js/settingsManager/settingsManager.js';
import { keepTrackApi } from '@app/js/api/externalApi';
import { missileManager } from '@app/js/plugins/missile/missileManager';
import { orbitManager } from '@app/js/orbitManager/orbitManager';
import { satellite } from '@app/js/lib/lookangles';
import { timeManager } from '@app/js/timeManager/timeManager';

keepTrackApi.programs.missileManager = missileManager;
keepTrackApi.programs.satellite = satellite;
keepTrackApi.programs.orbitManager = orbitManager;
keepTrackApi.programs.timeManager = timeManager;
keepTrackApi.programs.settingsManager = {
  plugins: {
    datetime: {},
  },
};


keepTrackApi.programs.orbitManager = orbitManager;
// @ponicode

describe("missileManager.getMissileTEARR", () => {
    test("0", () => {
        let callFunction: any = () => {
            missileManager.getMissileTEARR({ altList: "Anas", startTime: 2.0, latList: [9876, 12345, 12345], lonList: [-5.48, 100, -100, 0, -100] }, { observerGd: "4.0.0-beta1\t", alt: "Jean-Philippe", lat: 77.4325, lon: 90, obsminaz: 100, obsmaxaz: true, obsminel: 0.0, obsmaxel: "4.0.0-beta1\t", obsmaxrange: "1.0.0", obsminrange: true, obsminaz2: true, obsmaxaz2: -5.48, obsminel2: "v1.2.4", obsmaxel2: false, obsmaxrange2: 30, obsminrange2: false })
        }
    
        expect(callFunction).not.toThrow()
    })

    test("1", () => {
        let callFunction: any = () => {
            missileManager.getMissileTEARR({ altList: "Edmond", startTime: 500, latList: [12345, 12345, 9876], lonList: [-100] }, { observerGd: true, alt: "bc23a9d531064583ace8f67dad60f6bb", lat: false, lon: 1, obsminaz: -5.48, obsmaxaz: false, obsminel: false, obsmaxel: true, obsmaxrange: 70, obsminrange: false, obsminaz2: 0, obsmaxaz2: "v4.0.0-rc.4", obsminel2: 4, obsmaxel2: 100, obsmaxrange2: true, obsminrange2: true })
        }
    
        expect(callFunction).not.toThrow()
    })

    test("2", () => {
        let callFunction: any = () => {
            missileManager.getMissileTEARR({ altList: "Michael", startTime: 6, latList: [100,0,100], lonList: [-100, 0, 100] }, { observerGd: "a1969970175", alt: "bc23a9d531064583ace8f67dad60f6bb", lat: 81.1172, lon: true, obsminaz: false, obsmaxaz: "v4.0.0-rc.4", obsminel: 0.5, obsmaxel: "^5.0.0", obsmaxrange: 50, obsminrange: 1, obsminaz2: "1.0.0", obsmaxaz2: false, obsminel2: 320, obsmaxel2: "4.0.0-beta1\t", obsmaxrange2: 1, obsminrange2: "foo bar" })
        }
    
        expect(callFunction).not.toThrow()
    })

    test("3", () => {
        let callFunction: any = () => {
            missileManager.getMissileTEARR({ altList: "Pierre Edouard", startTime: 500, latList: [100,0,100, 100,0,100, 100,0,100], lonList: [100, 1, 1, -100, -5.48] }, { observerGd: "v4.0.0-rc.4", alt: "Edmond", lat: 77.4325, lon: 90, obsminaz: -5.48, obsmaxaz: true, obsminel: 10.0, obsmaxel: "v1.2.4", obsmaxrange: "1.0.0", obsminrange: true, obsminaz2: true, obsmaxaz2: 1, obsminel2: "1.0.0", obsmaxel2: true, obsmaxrange2: 320, obsminrange2: false })
        }
    
        expect(callFunction).not.toThrow()
    })

    test("4", () => {
        let callFunction: any = () => {
            missileManager.getMissileTEARR({ altList: "George", startTime: 4, latList: [9876, 100,0,100], lonList: [0] }, { observerGd: false, alt: 12, lat: false, lon: 320, obsminaz: -100, obsmaxaz: false, obsminel: true, obsmaxel: false, obsmaxrange: 410, obsminrange: false, obsminaz2: 100, obsmaxaz2: "v1.2.4", obsminel2: 410, obsmaxel2: 1, obsmaxrange2: false, obsminrange2: false })
        }
    
        expect(callFunction).not.toThrow()
    })

    test("5", () => {
        let callFunction: any = () => {
            missileManager.getMissileTEARR({ altList: "", startTime: Infinity, latList: [], lonList: [] }, { observerGd: Infinity, alt: true, lat: true, lon: "", obsminaz: false, obsmaxaz: "", obsminel: false, obsmaxel: Infinity, obsmaxrange: Infinity, obsminrange: true, obsminaz2: "", obsmaxaz2: "", obsminel2: Infinity, obsmaxel2: "", obsmaxrange2: false, obsminrange2: "" })
        }
    
        expect(callFunction).not.toThrow()
    })
})

// @ponicode
describe("missileManager._Pressure", () => {
    test("0", () => {
        let callFunction: any = () => {
            missileManager._Pressure(2.0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("1", () => {
        let callFunction: any = () => {
            missileManager._Pressure(0.1)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("2", () => {
        let callFunction: any = () => {
            missileManager._Pressure(1.0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("3", () => {
        let callFunction: any = () => {
            missileManager._Pressure(10.0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("4", () => {
        let callFunction: any = () => {
            missileManager._Pressure(0.5)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("5", () => {
        let callFunction: any = () => {
            missileManager._Pressure(Infinity)
        }
    
        expect(callFunction).not.toThrow()
    })
})

// @ponicode
describe("missileManager._Temperature", () => {
    test("0", () => {
        let callFunction: any = () => {
            missileManager._Temperature(120.0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("1", () => {
        let callFunction: any = () => {
            missileManager._Temperature(20)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("2", () => {
        let callFunction: any = () => {
            missileManager._Temperature(110)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("3", () => {
        let callFunction: any = () => {
            missileManager._Temperature(47.5)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("4", () => {
        let callFunction: any = () => {
            missileManager._Temperature(12.5)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("5", () => {
        let callFunction: any = () => {
            missileManager._Temperature(Infinity)
        }
    
        expect(callFunction).not.toThrow()
    })
})

// @ponicode
describe("missileManager._CD", () => {
    test("0", () => {
        (<any>orbitManager).orbitWorker = {
            onmessage: () => {
                // Intentional
            },
        };

        let callFunction: any = () => {
            missileManager._CD(3.625)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("1", () => {
        let callFunction: any = () => {
            missileManager._CD(400)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("2", () => {
        let callFunction: any = () => {
            missileManager._CD(550)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("3", () => {
        let callFunction: any = () => {
            missileManager._CD(380)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("4", () => {
        let callFunction: any = () => {
            missileManager._CD(1.625)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("5", () => {
        let callFunction: any = () => {
            missileManager._CD(-Infinity)
        }
    
        expect(callFunction).not.toThrow()
    })
})

// @ponicode
describe("missileManager._CoordinateCalculator", () => {
    test("0", () => {
        let callFunction: any = () => {
            missileManager._CoordinateCalculator(0, 12345, 987650, 12)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("1", () => {
        let callFunction: any = () => {
            missileManager._CoordinateCalculator(-5.48, 12345, "a1969970175", "a1969970175")
        }
    
        expect(callFunction).not.toThrow()
    })

    test("2", () => {
        let callFunction: any = () => {
            missileManager._CoordinateCalculator(-100, "a1969970175", 12, "a1969970175")
        }
    
        expect(callFunction).not.toThrow()
    })

    test("3", () => {
        let callFunction: any = () => {
            missileManager._CoordinateCalculator(-100, 56784, 12, "a1969970175")
        }
    
        expect(callFunction).not.toThrow()
    })

    test("4", () => {
        let callFunction: any = () => {
            missileManager._CoordinateCalculator(-5.48, 12345, "a1969970175", 12)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("5", () => {
        let callFunction: any = () => {
            missileManager._CoordinateCalculator(NaN, NaN, NaN, NaN)
        }
    
        expect(callFunction).not.toThrow()
    })
})

// @ponicode
describe("missileManager._IterationFun", () => {
    test("0", () => {
        let callFunction: any = () => {
            missileManager._IterationFun(-5.48, 30, 987650, 2.0, 12, -29.45, 9876, 100, 6370000, "a1969970175", 18, 6370000)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("1", () => {
        let callFunction: any = () => {
            missileManager._IterationFun(-5.48, 4, "a1969970175", 0.1, 987650, -1.0, "bc23a9d531064583ace8f67dad60f6bb", -100, 1, "bc23a9d531064583ace8f67dad60f6bb", 75, 1)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("2", () => {
        let callFunction: any = () => {
            missileManager._IterationFun(0, 0, 12, 10.0, 987650, -0.5, "bc23a9d531064583ace8f67dad60f6bb", 100, 1000, 12345, 35, 3500.0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("3", () => {
        let callFunction: any = () => {
            missileManager._IterationFun(100, 30, 987650, 1.0, "bc23a9d531064583ace8f67dad60f6bb", 10.0, "c466a48309794261b64a4f02cfcc3d64", 1, 9999, 56784, 5, 2000.0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("4", () => {
        let callFunction: any = () => {
            missileManager._IterationFun(-5.48, 0, 12, 10.0, 12345, 10.23, 12345, -5.48, 5000.0, 56784, 25, 0.01)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("5", () => {
        let callFunction: any = () => {
            missileManager._IterationFun(Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity)
        }
    
        expect(callFunction).not.toThrow()
    })
})

// @ponicode
describe("missileManager._Bisection", () => {
    test("0", () => {
        let callFunction: any = () => {
            missileManager._Bisection(350, -5.48, 50, 56784, 56784, 0.1, 56784, 56784, 987650, 1, "bc23a9d531064583ace8f67dad60f6bb", -100, 100, 56784, 5, 10.0, 0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("1", () => {
        let callFunction: any = () => {
            missileManager._Bisection(320, 0, 90, 987650, 12, 0.1, 12345, 12345, "a1969970175", 320, 9876, 1, 3500.0, 12, 25, 0.0, 3500.0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("2", () => {
        let callFunction: any = () => {
            missileManager._Bisection(520, -5.48, 350, "bc23a9d531064583ace8f67dad60f6bb", 12, 10.0, 12345, 987650, "bc23a9d531064583ace8f67dad60f6bb", 100, "c466a48309794261b64a4f02cfcc3d64", 100, 0.01, 56784, 18, -1.0, 0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("3", () => {
        let callFunction: any = () => {
            missileManager._Bisection(50, -5.48, 320, "bc23a9d531064583ace8f67dad60f6bb", 987650, 10.0, 12345, 987650, 12, 70, "bc23a9d531064583ace8f67dad60f6bb", -5.48, 3500.0, 12, 75, 0.5, 1000)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("4", () => {
        let callFunction: any = () => {
            missileManager._Bisection(410, 0, 4, "a1969970175", "bc23a9d531064583ace8f67dad60f6bb", 10.0, 56784, 12345, 12345, 550, 9876, 0, 0.01, 12345, 75, 1.0, 3500.0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("5", () => {
        let callFunction: any = () => {
            missileManager._Bisection(NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN)
        }
    
        expect(callFunction).not.toThrow()
    })
})

// @ponicode
describe("missileManager.clearMissiles", () => {
    test("0", () => {
        let callFunction: any = () => {
            missileManager.clearMissiles()
        }
    
        expect(callFunction).not.toThrow()
    })
})

// @ponicode
describe("missileManager.Missile", () => {
    test("0", () => {
        let callFunction: any = () => {
            missileManager.Missile(1, 12, 12345, 12, 0, "Tasty", true, "Rustic", 256, 1, "bc23a9d531064583ace8f67dad60f6bb", 0.5, false, 0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("1", () => {
        let callFunction: any = () => {
            missileManager.Missile(1, 56784, 56784, 987650, 0, false, 7588892, true, 16, 100000, 12345, -0.5, "France", -100)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("2", () => {
        let callFunction: any = () => {
            missileManager.Missile(-5.48, 12, 12345, 12, 100, "Gorgeous", false, "1.0.0", 64, 3500.0, "bc23a9d531064583ace8f67dad60f6bb", -29.45, "United States", -100)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("3", () => {
        let callFunction: any = () => {
            missileManager.Missile(-5.48, 12345, 987650, 987650, 1, "Rustic", "01:04:03", false, 10, 0.01, "bc23a9d531064583ace8f67dad60f6bb", -29.45, false, 0)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("4", () => {
        let callFunction: any = () => {
            missileManager.Missile(-100, 987650, 987650, 56784, 1, true, "Mon Aug 03 12:45:00", "bc23a9d531064583ace8f67dad60f6bb", 16, 0.01, "c466a48309794261b64a4f02cfcc3d64", -1.0, "China", 1)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("5", () => {
        let callFunction: any = () => {
            missileManager.Missile(NaN, NaN, NaN, NaN, NaN, NaN, false, "", NaN, NaN, NaN, NaN, NaN, NaN)
        }
    
        expect(callFunction).not.toThrow()
    })
})

// @ponicode
describe("missileManager.MassRaidPre", () => {
    test("0", () => {
        let callFunction: any = () => {
            missileManager.MassRaidPre("bc23a9d531064583ace8f67dad60f6bb", "m2v")
        }
    
        expect(callFunction).not.toThrow()
    })

    test("1", () => {
        let callFunction: any = () => {
            missileManager.MassRaidPre("2017-09-29T19:01:00.000", "mpe")
        }
    
        expect(callFunction).not.toThrow()
    })

    test("2", () => {
        let callFunction: any = () => {
            missileManager.MassRaidPre("Mon Aug 03 12:45:00", "jpeg")
        }
    
        expect(callFunction).not.toThrow()
    })

    test("3", () => {
        let callFunction: any = () => {
            missileManager.MassRaidPre(12345, "mpe")
        }
    
        expect(callFunction).not.toThrow()
    })

    test("4", () => {
        let callFunction: any = () => {
            missileManager.MassRaidPre("01:04:03", "pdf")
        }
    
        expect(callFunction).not.toThrow()
    })

    test("5", () => {
        let callFunction: any = () => {
            missileManager.MassRaidPre(-Infinity, "")
        }
    
        expect(callFunction).not.toThrow()
    })
})

(A = {
    JMod: 2400000.5,
    J2000: 2451545,
    J1900: 2415020,
    B1900: 2415020.3135,
    B1950: 2433282.4235,
    JulianYear: 365.25,
    JulianCentury: 36525,
    BesselianYear: 365.2421988,
    AU: 149597870,
}),
    (A.EclCoord = function (t, a, n) {
        if (isNaN(t) || isNaN(a))
            throw Error('Invalid EclCoord object: (' + t + ', ' + a + ')');
        (this.lat = t), (this.lng = a), void 0 !== n && (this.h = n);
    }),
    (A.EclCoord.prototype = {
        toWgs84String: function () {
            return (
                A.Math.formatNum((180 * this.lat) / Math.PI) +
                ', ' +
                A.Math.formatNum((180 * -this.lng) / Math.PI)
            );
        },
    }),
    (A.EclCoord.fromWgs84 = function (t, a, n) {
        return new A.EclCoord((t * Math.PI) / 180, (-a * Math.PI) / 180, n);
    }),
    (A.EqCoord = function (t, a) {
        if (isNaN(t) || isNaN(a))
            throw Error('Invalid EqCoord object: (' + t + ', ' + a + ')');
        (this.ra = t), (this.dec = a);
    }),
    (A.EqCoord.prototype = {
        toString: function () {
            return (
                'ra:' +
                A.Math.formatNum((180 * this.ra) / Math.PI) +
                ', dec:' +
                A.Math.formatNum((180 * this.dec) / Math.PI)
            );
        },
    }),
    (A.HzCoord = function (t, a) {
        if (isNaN(t) || isNaN(a))
            throw Error('Invalid HzCoord object: (' + t + ', ' + a + ')');
        (this.az = t), (this.alt = a);
    }),
    (A.HzCoord.prototype = {
        toString: function () {
            return (
                'azi:' +
                A.Math.formatNum((180 * this.az) / Math.PI) +
                ', alt:' +
                A.Math.formatNum((180 * this.alt) / Math.PI)
            );
        },
    }),
    (A.Coord = {
        dmsToDeg: function (t, a, n, r) {
            return (r = (60 * (60 * a + n) + r) / 3600), t ? -r : r;
        },
        calcAngle: function (t, a, n, r) {
            return (A.Coord.dmsToDeg(t, a, n, r) * Math.PI) / 180;
        },
        calcRA: function (t, a, n) {
            return ((A.Coord.dmsToDeg(!1, t, a, n) % 24) * 15 * Math.PI) / 180;
        },
        secondsToHMSStr: function (t) {
            var a = Math.floor(t / 86400);
            t = A.Math.pMod(t, 86400);
            var n = Math.floor(t / 3600) % 24,
                r = Math.floor(t / 60) % 60;
            return (
                (0 !== a ? a + 'd ' : '') +
                (10 > n ? '0' : '') +
                n +
                ':' +
                (10 > r ? '0' : '') +
                r +
                ':' +
                (10 > (t = Math.floor(t % 60)) ? '0' : '') +
                t
            );
        },
        secondsToHMStr: function (t) {
            var a = Math.floor(t / 86400);
            t = A.Math.pMod(t, 86400);
            var n = Math.floor(t / 3600) % 24;
            return (
                (0 !== a ? a + 'd ' : '') +
                (10 > n ? '0' : '') +
                n +
                ':' +
                (10 > (t = Math.floor(t / 60) % 60) ? '0' : '') +
                t
            );
        },
        eqToEcl: function (t, a) {
            var n = Math.sin(t.ra),
                r = Math.sin(t.dec),
                e = Math.cos(t.dec),
                o = Math.sin(a),
                i = Math.cos(a);
            return new A.EclCoord(
                Math.atan2(n * i + (r / e) * o, Math.cos(t.ra)),
                Math.asin(r * i - e * o * n)
            );
        },
        eclToEq: function (t, a) {
            var n = Math.sin(t.lat),
                r = Math.sin(t.lng),
                e = Math.cos(t.lng),
                o = Math.sin(a),
                i = Math.cos(a),
                h = Math.atan2(n * i - (r / e) * o, Math.cos(t.lat));
            return (
                0 > h && (h += 2 * Math.PI),
                new A.EqCoord(h, Math.asin(r * i + e * o * n))
            );
        },
        eqToHz: function (t, a, n) {
            n = n - a.lng - t.ra;
            var r = Math.cos(n),
                e = Math.sin(a.lat);
            a = Math.cos(a.lat);
            var o = Math.sin(t.dec);
            return (
                (t = Math.cos(t.dec)),
                new A.HzCoord(
                    Math.atan2(Math.sin(n), r * e - (o / t) * a),
                    Math.asin(e * o + a * t * r)
                )
            );
        },
    }),
    (A.DeltaT = {
        jdToJde: function (t, a) {
            return a || (a = A.DeltaT.estimate(t)), t + a / 86400;
        },
        jdeToJd: function (t, a) {
            return a || (a = A.DeltaT.estimate(t)), t - a / 86400;
        },
        decimalYear: function (t) {
            return (t = A.JulianDay.jdToCalendar(t)).y + (t.m - 0.5) / 12;
        },
        estimate: function (t) {
            var a = A.DeltaT.decimalYear(t);
            return (
                (t = Math.pow),
                -500 > a
                    ? 32 * t((a - 1820) / 100, 2) - 20
                    : 500 > a
                    ? 10583.6 -
                      1014.41 * (a /= 100) +
                      33.78311 * t(a, 2) -
                      5.952053 * t(a, 3) -
                      0.1798452 * t(a, 4) +
                      0.022174192 * t(a, 5) +
                      0.0090316521 * t(a, 6)
                    : 1600 > a
                    ? 1574.2 -
                      556.01 * (a = (a - 1e3) / 100) +
                      71.23472 * t(a, 2) +
                      0.319781 * t(a, 3) -
                      0.8503463 * t(a, 4) -
                      0.005050998 * t(a, 5) +
                      0.0083572073 * t(a, 6)
                    : 1700 > a
                    ? 120 -
                      0.9808 * (a -= 1600) -
                      0.01532 * t(a, 2) +
                      t(a, 3) / 7129
                    : 1800 > a
                    ? 8.83 +
                      0.1603 * (a -= 1700) -
                      0.0059285 * t(a, 2) +
                      13336e-8 * t(a, 3) -
                      t(a, 4) / 1174e3
                    : 1860 > a
                    ? 13.72 -
                      0.332447 * (a -= 1800) +
                      0.0068612 * t(a, 2) +
                      0.0041116 * t(a, 3) -
                      37436e-8 * t(a, 4) +
                      121272e-10 * t(a, 5) -
                      1.699e-7 * t(a, 6) +
                      8.75e-10 * t(a, 7)
                    : 1900 > a
                    ? 7.62 +
                      0.5737 * (a -= 1860) -
                      0.251754 * t(a, 2) +
                      0.01680668 * t(a, 3) -
                      0.0004473624 * t(a, 4) +
                      t(a, 5) / 233174
                    : 1920 > a
                    ? 1.494119 * (a -= 1900) -
                      2.79 -
                      0.0598939 * t(a, 2) +
                      0.0061966 * t(a, 3) -
                      197e-6 * t(a, 4)
                    : 1941 > a
                    ? 21.2 +
                      0.84493 * (a -= 1920) -
                      0.0761 * t(a, 2) +
                      0.0020936 * t(a, 3)
                    : 1961 > a
                    ? 29.07 +
                      0.407 * (a -= 1950) -
                      t(a, 2) / 233 +
                      t(a, 3) / 2547
                    : 1986 > a
                    ? 45.45 +
                      1.067 * (a -= 1975) -
                      t(a, 2) / 260 -
                      t(a, 3) / 718
                    : 2005 > a
                    ? 63.86 +
                      0.3345 * (a -= 2e3) -
                      0.060374 * t(a, 2) +
                      0.0017275 * t(a, 3) +
                      651814e-9 * t(a, 4) +
                      2373599e-11 * t(a, 5)
                    : 2050 > a
                    ? 62.92 + 0.32217 * (a -= 2e3) + 0.005589 * t(a, 2)
                    : 2150 > a
                    ? 32 * t((a - 1820) / 100, 2) - 20 - 0.5628 * (2150 - a)
                    : 32 * t((a - 1820) / 100, 2) - 20
            );
        },
    }),
    (A.Globe = {
        Er: 6378.14,
        Fl: 1 / 298.257,
        parallaxConstants: function (t, a) {
            a || (a = 0);
            var n = 1 - A.Globe.Fl,
                r = (0.001 * a) / A.Globe.Er;
            return {
                rhoslat:
                    Math.sin(Math.atan(n * Math.tan(t))) * n + r * Math.sin(t),
                rhoclat: Math.cos(Math.atan(n * Math.tan(t))) + r * Math.cos(t),
            };
        },
    }),
    (A.Interp = {
        newLen3: function (t, a, n) {
            if (3 != n.length) throw 'Error not 3';
            if (a == t) throw 'Error no x range';
            var r = n[1] - n[0],
                e = n[2] - n[1];
            return {
                x1: t,
                x3: a,
                y: n,
                a: r,
                b: e,
                c: e - r,
                abSum: r + e,
                xSum: a + t,
                xDiff: a - t,
            };
        },
        interpolateX: function (t, a) {
            return A.Interp.interpolateN(t, (2 * a - t.xSum) / t.xDiff);
        },
        interpolateN: function (t, a) {
            return t.y[1] + 0.5 * a * (t.abSum + a * t.c);
        },
    }),
    (A.JulianDay = function (t, a) {
        t instanceof Date && (t = A.JulianDay.dateToJD(t)),
            (this.jd = t),
            (this.deltaT = a || A.DeltaT.estimate(this.jd)),
            (this.jde = A.DeltaT.jdToJde(this.jd, this.deltaT));
    }),
    (A.JulianDay.prototype = {
        toCalendar: function () {
            return A.JulianDay.jdToCalendar(this.jd);
        },
        toDate: function () {
            return A.JulianDay.jdToDate(this.jd);
        },
        jdJ2000Century: function () {
            return (this.jd - A.J2000) / A.JulianCentury;
        },
        jdeJ2000Century: function () {
            return (this.jde - A.J2000) / A.JulianCentury;
        },
        startOfDay: function () {
            return new A.JulianDay(
                Math.floor(this.jde - 0.5) + 0.5,
                this.deltaT
            );
        },
    }),
    (A.JulianDay.gregorianTimeStart = Date.UTC(1582, 9, 4)),
    (A.JulianDay.jdFromGregorian = function (t, a, n) {
        return new A.JulianDay(A.JulianDay.jdFromGregorian(t, a, n));
    }),
    (A.JulianDay.jdFromJulian = function (t, a, n) {
        return new A.JulianDay(A.JulianDay.calendarJulianToJD(t, a, n));
    }),
    (A.JulianDay.jdFromJDE = function (t) {
        var a = A.DeltaT.estimate(t);
        return (t = A.DeltaT.jdeToJd(t, a)), new A.JulianDay(t, a);
    }),
    (A.JulianDay.dateToJD = function (t) {
        var a =
            t.getUTCDate() +
            A.JulianDay.secondsFromHMS(
                t.getUTCHours(),
                t.getUTCMinutes(),
                t.getUTCSeconds()
            ) /
                86400;
        return t.getTime() < A.JulianDay.gregorianTimeStart
            ? A.JulianDay.calendarJulianToJD(
                  t.getUTCFullYear(),
                  t.getUTCMonth() + 1,
                  a
              )
            : A.JulianDay.calendarGregorianToJD(
                  t.getUTCFullYear(),
                  t.getUTCMonth() + 1,
                  a
              );
    }),
    (A.JulianDay.calendarGregorianToJD = function (t, a, n) {
        (1 != a && 2 != a) || (t--, (a += 12));
        var r = Math.floor(t / 100);
        return (
            Math.floor((36525 * (t + 4716)) / 100) +
            Math.floor((306 * (a + 1)) / 10) +
            (2 - r + Math.floor(r / 4)) +
            n -
            1524.5
        );
    }),
    (A.JulianDay.calendarJulianToJD = function (t, a, n) {
        return (
            (1 != a && 2 != a) || (t--, (a += 12)),
            Math.floor((36525 * (t + 4716)) / 100) +
                Math.floor((306 * (a + 1)) / 10) +
                n -
                1524.5
        );
    }),
    (A.JulianDay.secondsFromHMS = function (t, a, n) {
        return 3600 * t + 60 * a + n;
    }),
    (A.JulianDay.jdToDate = function (t) {
        var a = A.JulianDay.jdToCalendar(t);
        return (
            (t = A.Math.modF(t + 0.5)[1]),
            (t = Math.round(86400 * t)),
            new Date(
                Date.UTC(
                    a.y,
                    a.m - 1,
                    Math.floor(a.d),
                    Math.floor(t / 3600) % 24,
                    Math.floor(t / 60) % 60,
                    Math.floor(t % 60)
                )
            )
        );
    }),
    (A.JulianDay.jdToCalendar = function (t) {
        var a = (r = (t = A.Math.modF(t + 0.5))[0]);
        2299151 <= r &&
            (a =
                r +
                1 +
                (a = Math.floor((100 * r - 186721625) / 3652425)) -
                Math.floor(a / 4));
        var n = a + 1524,
            r = Math.floor((100 * n - 12210) / 36525),
            e = Math.floor((36525 * r) / 100);
        a = Math.floor((1e4 * (n - e)) / 306001);
        return (
            (t = n - e - Math.floor((306001 * a) / 1e4) + t[1]),
            {
                y:
                    1 == (a = 14 == a || 15 == a ? a - 13 : a - 1) || 2 == a
                        ? Math.floor(r) - 4715
                        : Math.floor(r) - 4716,
                m: a,
                d: t,
            }
        );
    }),
    (A.JulianDay.leapYearGregorian = function (t) {
        return (0 == t % 4 && 0 != t % 100) || 0 == t % 400;
    }),
    (A.JulianDay.dayOfYear = function (t, a, n, r) {
        return (t = 2), r && t--, A.JulianDay._wholeMonths(a, t) + n;
    }),
    (A.JulianDay._wholeMonths = function (t, a) {
        return Math.round((275 * t) / 9 - ((t + 9) / 12) * a - 30);
    }),
    (A.Math = {
        pMod: function (t, a) {
            var n = t % a;
            return 0 > n && (n += a), n;
        },
        modF: function (t) {
            return 0 > t
                ? ((t = -t), [-Math.floor(t), -t % 1])
                : [Math.floor(t), t % 1];
        },
        horner: function (t, a) {
            var n = a.length - 1;
            if (0 >= n) throw 'empty array not supported';
            for (var r = a[n]; 0 < n; ) r = r * t + a[--n];
            return r;
        },
        formatNum: function (t, a) {
            var n = Math.pow(10, 4 | a);
            return Math.round(t * n) / n;
        },
    }),
    (A.Moon = {
        parallax: function (t) {
            return Math.asin(6378.14 / t);
        },
        apparentEquatorial: function (t) {
            var a = A.Moon.geocentricPosition(t),
                n = A.Nutation.nutation(t);
            return (
                (t = A.Nutation.meanObliquityLaskar(t) + n.deltaobliquity),
                {
                    eq: A.Coord.eclToEq(
                        new A.EclCoord(a.lng + n.deltalng, a.lat),
                        t
                    ),
                    delta: a.delta,
                }
            );
        },
        apparentTopocentric: function (t, a, n) {
            var r = A.Moon.apparentEquatorial(t),
                e = A.Globe.parallaxConstants(a.lat, a.h),
                o = A.Moon.parallax(r.delta);
            return (
                n || (n = A.Sidereal.apparentInRa(t)),
                {
                    eq: A.Parallax.topocentric(
                        r.eq,
                        o,
                        e.rhoslat,
                        e.rhoclat,
                        a.lng,
                        n
                    ),
                    delta: r.delta,
                }
            );
        },
        topocentricPosition: function (t, a, n) {
            var r = A.Sidereal.apparentInRa(t);
            t = A.Moon.apparentTopocentric(t, a, r);
            var e = A.Coord.eqToHz(t.eq, a, r);
            return (
                !0 === n && (e.alt += A.Refraction.bennett2(e.alt)),
                (a = A.Moon.parallacticAngle(
                    a.lat,
                    r - (a.lng + t.eq.ra),
                    t.eq.dec
                )),
                { hz: e, eq: t.eq, delta: t.delta, q: a }
            );
        },
        approxTransit: function (t, a) {
            var n = t.startOfDay();
            return A.Rise.approxTransit(
                a,
                A.Sidereal.apparent0UT(n),
                A.Moon.apparentTopocentric(n, a).eq
            );
        },
        approxTimes: function (t, a) {
            t = t.startOfDay();
            var n = A.Moon.apparentTopocentric(t, a),
                r = A.Moon.parallax(n.delta),
                e = ((r = A.Rise.stdh0Lunar(r)), A.Sidereal.apparent0UT(t));
            return A.Rise.approxTimes(a, r, e, n.eq);
        },
        times: function (t, a) {
            t = t.startOfDay();
            var n = A.Moon.apparentTopocentric(
                    new A.JulianDay(t.jd - 1, t.deltaT),
                    a
                ),
                r = A.Moon.apparentTopocentric(t, a),
                e = A.Moon.apparentTopocentric(
                    new A.JulianDay(t.jd + 1, t.deltaT),
                    a
                ),
                o = A.Moon.parallax(r.delta),
                i = ((o = A.Rise.stdh0Lunar(o)), A.Sidereal.apparent0UT(t));
            return A.Rise.times(a, t.deltaT, o, i, [n.eq, r.eq, e.eq]);
        },
        parallacticAngle: function (t, a, n) {
            return Math.atan2(
                Math.sin(a),
                Math.tan(t) * Math.cos(n) - Math.sin(n) * Math.cos(a)
            );
        },
        geocentricPosition: function (t) {
            var a = Math.PI / 180,
                n = t.jdeJ2000Century();
            t = A.Math.pMod(
                A.Math.horner(n, [
                    218.3164477 * a,
                    481267.88123421 * a,
                    -0.0015786 * a,
                    a / 538841,
                    -a / 65194e3,
                ]),
                2 * Math.PI
            );
            var r,
                e = A.Math.pMod(
                    A.Math.horner(n, [
                        297.8501921 * a,
                        445267.1114034 * a,
                        -0.0018819 * a,
                        a / 545868,
                        -a / 113065e3,
                    ]),
                    2 * Math.PI
                ),
                o = A.Math.pMod(
                    A.Math.horner(n, [
                        357.5291092 * a,
                        35999.0502909 * a,
                        -1535e-7 * a,
                        a / 2449e4,
                    ]),
                    2 * Math.PI
                ),
                i = A.Math.pMod(
                    A.Math.horner(n, [
                        134.9633964 * a,
                        477198.8675055 * a,
                        0.0087414 * a,
                        a / 69699,
                        -a / 14712e3,
                    ]),
                    2 * Math.PI
                ),
                h = A.Math.pMod(
                    A.Math.horner(n, [
                        93.272095 * a,
                        483202.0175233 * a,
                        -0.0036539 * a,
                        -a / 3526e3,
                        a / 86331e4,
                    ]),
                    2 * Math.PI
                ),
                l = 119.75 * a + 131.849 * a * n,
                u = 53.09 * a + 479264.29 * a * n,
                M = 313.45 * a + 481266.484 * a * n,
                c = (n = A.Math.horner(n, [1, -0.002516, -74e-7])) * n,
                s =
                    ((u =
                        3958 * Math.sin(l) +
                        1962 * Math.sin(t - h) +
                        318 * Math.sin(u)),
                    0);
            for (
                l =
                    -2235 * Math.sin(t) +
                    382 * Math.sin(M) +
                    175 * Math.sin(l - h) +
                    175 * Math.sin(l + h) +
                    127 * Math.sin(t - i) -
                    115 * Math.sin(t + i),
                    M = 0;
                M < A.Moon.ta.length;
                M++
            ) {
                var d =
                        e * (r = A.Moon.ta[M])[0] +
                        o * r[1] +
                        i * r[2] +
                        h * r[3],
                    p = Math.sin(d);
                d = Math.cos(d);
                switch (r[1]) {
                    case 0:
                        (u += r[4] * p), (s += r[5] * d);
                        break;
                    case 1:
                    case -1:
                        (u += r[4] * p * n), (s += r[5] * d * n);
                        break;
                    case 2:
                    case -2:
                        (u += r[4] * p * c), (s += r[5] * d * c);
                        break;
                    default:
                        throw 'error';
                }
            }
            for (M = 0; M < A.Moon.tb.length; M++)
                switch (
                    ((r = A.Moon.tb[M]),
                    (p = Math.sin(e * r[0] + o * r[1] + i * r[2] + h * r[3])),
                    r[1])
                ) {
                    case 0:
                        l += r[4] * p;
                        break;
                    case 1:
                    case -1:
                        l += r[4] * p * n;
                        break;
                    case 2:
                    case -2:
                        l += r[4] * p * c;
                        break;
                    default:
                        throw 'error';
                }
            return {
                lng: A.Math.pMod(t, 2 * Math.PI) + 1e-6 * u * a,
                lat: 1e-6 * l * a,
                delta: 385000.56 + 0.001 * s,
            };
        },
        ta: [
            [0, 0, 1, 0, 6288774, -20905355],
            [2, 0, -1, 0, 1274027, -3699111],
            [2, 0, 0, 0, 658314, -2955968],
            [0, 0, 2, 0, 213618, -569925],
            [0, 1, 0, 0, -185116, 48888],
            [0, 0, 0, 2, -114332, -3149],
            [2, 0, -2, 0, 58793, 246158],
            [2, -1, -1, 0, 57066, -152138],
            [2, 0, 1, 0, 53322, -170733],
            [2, -1, 0, 0, 45758, -204586],
            [0, 1, -1, 0, -40923, -129620],
            [1, 0, 0, 0, -34720, 108743],
            [0, 1, 1, 0, -30383, 104755],
            [2, 0, 0, -2, 15327, 10321],
            [0, 0, 1, 2, -12528, 0],
            [0, 0, 1, -2, 10980, 79661],
            [4, 0, -1, 0, 10675, -34782],
            [0, 0, 3, 0, 10034, -23210],
            [4, 0, -2, 0, 8548, -21636],
            [2, 1, -1, 0, -7888, 24208],
            [2, 1, 0, 0, -6766, 30824],
            [1, 0, -1, 0, -5163, -8379],
            [1, 1, 0, 0, 4987, -16675],
            [2, -1, 1, 0, 4036, -12831],
            [2, 0, 2, 0, 3994, -10445],
            [4, 0, 0, 0, 3861, -11650],
            [2, 0, -3, 0, 3665, 14403],
            [0, 1, -2, 0, -2689, -7003],
            [2, 0, -1, 2, -2602, 0],
            [2, -1, -2, 0, 2390, 10056],
            [1, 0, 1, 0, -2348, 6322],
            [2, -2, 0, 0, 2236, -9884],
            [0, 1, 2, 0, -2120, 5751],
            [0, 2, 0, 0, -2069, 0],
            [2, -2, -1, 0, 2048, -4950],
            [2, 0, 1, -2, -1773, 4130],
            [2, 0, 0, 2, -1595, 0],
            [4, -1, -1, 0, 1215, -3958],
            [0, 0, 2, 2, -1110, 0],
            [3, 0, -1, 0, -892, 3258],
            [2, 1, 1, 0, -810, 2616],
            [4, -1, -2, 0, 759, -1897],
            [0, 2, -1, 0, -713, -2117],
            [2, 2, -1, 0, -700, 2354],
            [2, 1, -2, 0, 691, 0],
            [2, -1, 0, -2, 596, 0],
            [4, 0, 1, 0, 549, -1423],
            [0, 0, 4, 0, 537, -1117],
            [4, -1, 0, 0, 520, -1571],
            [1, 0, -2, 0, -487, -1739],
            [2, 1, 0, -2, -399, 0],
            [0, 0, 2, -2, -381, -4421],
            [1, 1, 1, 0, 351, 0],
            [3, 0, -2, 0, -340, 0],
            [4, 0, -3, 0, 330, 0],
            [2, -1, 2, 0, 327, 0],
            [0, 2, 1, 0, -323, 1165],
            [1, 1, -1, 0, 299, 0],
            [2, 0, 3, 0, 294, 0],
            [2, 0, -1, -2, 0, 8752],
        ],
        tb: [
            [0, 0, 0, 1, 5128122],
            [0, 0, 1, 1, 280602],
            [0, 0, 1, -1, 277693],
            [2, 0, 0, -1, 173237],
            [2, 0, -1, 1, 55413],
            [2, 0, -1, -1, 46271],
            [2, 0, 0, 1, 32573],
            [0, 0, 2, 1, 17198],
            [2, 0, 1, -1, 9266],
            [0, 0, 2, -1, 8822],
            [2, -1, 0, -1, 8216],
            [2, 0, -2, -1, 4324],
            [2, 0, 1, 1, 4200],
            [2, 1, 0, -1, -3359],
            [2, -1, -1, 1, 2463],
            [2, -1, 0, 1, 2211],
            [2, -1, -1, -1, 2065],
            [0, 1, -1, -1, -1870],
            [4, 0, -1, -1, 1828],
            [0, 1, 0, 1, -1794],
            [0, 0, 0, 3, -1749],
            [0, 1, -1, 1, -1565],
            [1, 0, 0, 1, -1491],
            [0, 1, 1, 1, -1475],
            [0, 1, 1, -1, -1410],
            [0, 1, 0, -1, -1344],
            [1, 0, 0, -1, -1335],
            [0, 0, 3, 1, 1107],
            [4, 0, 0, -1, 1021],
            [4, 0, -1, 1, 833],
            [0, 0, 1, -3, 777],
            [4, 0, -2, 1, 671],
            [2, 0, 0, -3, 607],
            [2, 0, 2, -1, 596],
            [2, -1, 1, -1, 491],
            [2, 0, -2, 1, -451],
            [0, 0, 3, -1, 439],
            [2, 0, 2, 1, 422],
            [2, 0, -3, -1, 421],
            [2, 1, -1, 1, -366],
            [2, 1, 0, 1, -351],
            [4, 0, 0, 1, 331],
            [2, -1, 1, 1, 315],
            [2, -2, 0, -1, 302],
            [0, 0, 1, 3, -283],
            [2, 1, 1, -1, -229],
            [1, 1, 0, -1, 223],
            [1, 1, 0, 1, 223],
            [0, 1, -2, -1, -220],
            [2, 1, -1, -1, -220],
            [1, 0, 1, 1, -185],
            [2, -1, -2, -1, 181],
            [0, 1, 2, 1, -177],
            [4, 0, -2, -1, 176],
            [4, -1, -1, -1, 166],
            [1, 0, 1, -1, -164],
            [4, 0, 1, -1, 132],
            [1, 0, -1, -1, -119],
            [4, -1, 0, -1, 115],
            [2, -2, 0, 1, 107],
        ],
    }),
    (A.MoonIllum = {
        phaseAngleEq: function (t, a, n, r) {
            return (
                (t = A.MoonIllum._coselong(t, n)),
                Math.atan2(r * Math.sin(Math.acos(t)), a - r * t)
            );
        },
        phaseAngleEq2: function (t, a) {
            return Math.acos(-A.MoonIllum._coselong(t, a));
        },
        illuminated: function (t) {
            return (1 + Math.cos(t)) / 2;
        },
        positionAngle: function (t, a) {
            var n = Math.cos(a.dec);
            return Math.atan2(
                n * Math.sin(a.ra - t.ra),
                Math.sin(a.dec) * Math.cos(t.dec) -
                    n * Math.sin(t.dec) * Math.cos(a.ra - t.ra)
            );
        },
        _coselong: function (t, a) {
            return (
                Math.sin(a.dec) * Math.sin(t.dec) +
                Math.cos(a.dec) * Math.cos(t.dec) * Math.cos(a.ra - t.ra)
            );
        },
    }),
    (A.Nutation = {
        nutation: function (t) {
            t = t.jdeJ2000Century();
            for (
                var a =
                        (A.Math.horner(t, [
                            297.85036,
                            445267.11148,
                            -0.0019142,
                            1 / 189474,
                        ]) *
                            Math.PI) /
                        180,
                    n =
                        (A.Math.horner(t, [
                            357.52772,
                            35999.05034,
                            -1603e-7,
                            -1 / 3e5,
                        ]) *
                            Math.PI) /
                        180,
                    r =
                        (A.Math.horner(t, [
                            134.96298,
                            477198.867398,
                            0.0086972,
                            1 / 5620,
                        ]) *
                            Math.PI) /
                        180,
                    e =
                        (A.Math.horner(t, [
                            93.27191,
                            483202.017538,
                            -0.0036825,
                            1 / 327270,
                        ]) *
                            Math.PI) /
                        180,
                    o =
                        (A.Math.horner(t, [
                            125.04452,
                            -1934.136261,
                            0.0020708,
                            1 / 45e4,
                        ]) *
                            Math.PI) /
                        180,
                    i = 0,
                    h = 0,
                    l = A.Nutation.table22A.length - 1;
                0 <= l;
                l--
            ) {
                var u = A.Nutation.table22A[l],
                    M = u[0] * a + u[1] * n + u[2] * r + u[3] * e + u[4] * o,
                    c = Math.cos(M);
                (i = i + Math.sin(M) * (u[5] + u[6] * t)),
                    (h = h + c * (u[7] + u[8] * t));
            }
            return {
                deltalng: (Math.PI / 180) * (1e-4 / 3600) * i,
                deltaobliquity: (Math.PI / 180) * (1e-4 / 3600) * h,
            };
        },
        nutationInRA: function (t) {
            var a = A.Nutation.meanObliquityLaskar(t);
            return (
                (t = A.Nutation.nutation(t)).deltalng *
                Math.cos(a + t.deltaobliquity)
            );
        },
        trueObliquity: function (t) {
            return (
                A.Nutation.meanObliquityLaskar(t) +
                (t = A.Nutation.nutation(t)).deltaobliquity
            );
        },
        meanObliquity: function (t) {
            return A.Math.horner(t.jdeJ2000Century(), [
                (84381.448 / 3600) * (Math.PI / 180),
                (-46.815 / 3600) * (Math.PI / 180),
                (-59e-5 / 3600) * (Math.PI / 180),
                (0.001813 / 3600) * (Math.PI / 180),
            ]);
        },
        meanObliquityLaskar: function (t) {
            return A.Math.horner(0.01 * t.jdeJ2000Century(), [
                (84381.448 / 3600) * (Math.PI / 180),
                (-4680.93 / 3600) * (Math.PI / 180),
                (-1.55 / 3600) * (Math.PI / 180),
                (1999.25 / 3600) * (Math.PI / 180),
                (-51.38 / 3600) * (Math.PI / 180),
                (-249.67 / 3600) * (Math.PI / 180),
                (-39.05 / 3600) * (Math.PI / 180),
                (7.12 / 3600) * (Math.PI / 180),
                (27.87 / 3600) * (Math.PI / 180),
                (5.79 / 3600) * (Math.PI / 180),
                (2.45 / 3600) * (Math.PI / 180),
            ]);
        },
        table22A: [
            [0, 0, 0, 0, 1, -171996, -174.2, 92025, 8.9],
            [-2, 0, 0, 2, 2, -13187, -1.6, 5736, -3.1],
            [0, 0, 0, 2, 2, -2274, -0.2, 977, -0.5],
            [0, 0, 0, 0, 2, 2062, 0.2, -895, 0.5],
            [0, 1, 0, 0, 0, 1426, -3.4, 54, -0.1],
            [0, 0, 1, 0, 0, 712, 0.1, -7, 0],
            [-2, 1, 0, 2, 2, -517, 1.2, 224, -0.6],
            [0, 0, 0, 2, 1, -386, -0.4, 200, 0],
            [0, 0, 1, 2, 2, -301, 0, 129, -0.1],
            [-2, -1, 0, 2, 2, 217, -0.5, -95, 0.3],
            [-2, 0, 1, 0, 0, -158, 0, 0, 0],
            [-2, 0, 0, 2, 1, 129, 0.1, -70, 0],
            [0, 0, -1, 2, 2, 123, 0, -53, 0],
            [2, 0, 0, 0, 0, 63, 0, 0, 0],
            [0, 0, 1, 0, 1, 63, 0.1, -33, 0],
            [2, 0, -1, 2, 2, -59, 0, 26, 0],
            [0, 0, -1, 0, 1, -58, -0.1, 32, 0],
            [0, 0, 1, 2, 1, -51, 0, 27, 0],
            [-2, 0, 2, 0, 0, 48, 0, 0, 0],
            [0, 0, -2, 2, 1, 46, 0, -24, 0],
            [2, 0, 0, 2, 2, -38, 0, 16, 0],
            [0, 0, 2, 2, 2, -31, 0, 13, 0],
            [0, 0, 2, 0, 0, 29, 0, 0, 0],
            [-2, 0, 1, 2, 2, 29, 0, -12, 0],
            [0, 0, 0, 2, 0, 26, 0, 0, 0],
            [-2, 0, 0, 2, 0, -22, 0, 0, 0],
            [0, 0, -1, 2, 1, 21, 0, -10, 0],
            [0, 2, 0, 0, 0, 17, -0.1, 0, 0],
            [2, 0, -1, 0, 1, 16, 0, -8, 0],
            [-2, 2, 0, 2, 2, -16, 0.1, 7, 0],
            [0, 1, 0, 0, 1, -15, 0, 9, 0],
            [-2, 0, 1, 0, 1, -13, 0, 7, 0],
            [0, -1, 0, 0, 1, -12, 0, 6, 0],
            [0, 0, 2, -2, 0, 11, 0, 0, 0],
            [2, 0, -1, 2, 1, -10, 0, 5, 0],
            [2, 0, 1, 2, 2, -8, 0, 3, 0],
            [0, 1, 0, 2, 2, 7, 0, -3, 0],
            [-2, 1, 1, 0, 0, -7, 0, 0, 0],
            [0, -1, 0, 2, 2, -7, 0, 3, 0],
            [2, 0, 0, 2, 1, -7, 0, 3, 0],
            [2, 0, 1, 0, 0, 6, 0, 0, 0],
            [-2, 0, 2, 2, 2, 6, 0, -3, 0],
            [-2, 0, 1, 2, 1, 6, 0, -3, 0],
            [2, 0, -2, 0, 1, -6, 0, 3, 0],
            [2, 0, 0, 0, 1, -6, 0, 3, 0],
            [0, -1, 1, 0, 0, 5, 0, 0, 0],
            [-2, -1, 0, 2, 1, -5, 0, 3, 0],
            [-2, 0, 0, 0, 1, -5, 0, 3, 0],
            [0, 0, 2, 2, 1, -5, 0, 3, 0],
            [-2, 0, 2, 0, 1, 4, 0, 0, 0],
            [-2, 1, 0, 2, 1, 4, 0, 0, 0],
            [0, 0, 1, -2, 0, 4, 0, 0, 0],
            [-1, 0, 1, 0, 0, -4, 0, 0, 0],
            [-2, 1, 0, 0, 0, -4, 0, 0, 0],
            [1, 0, 0, 0, 0, -4, 0, 0, 0],
            [0, 0, 1, 2, 0, 3, 0, 0, 0],
            [0, 0, -2, 2, 2, -3, 0, 0, 0],
            [-1, -1, 1, 0, 0, -3, 0, 0, 0],
            [0, 1, 1, 0, 0, -3, 0, 0, 0],
            [0, -1, 1, 2, 2, -3, 0, 0, 0],
            [2, -1, -1, 2, 2, -3, 0, 0, 0],
            [0, 0, 3, 2, 2, -3, 0, 0, 0],
            [2, -1, 0, 2, 2, -3, 0, 0, 0],
        ],
    }),
    (A.Parallax = {
        earthsunParallax: ((8.794 / 60 / 60) * Math.PI) / 180,
        horizontal: function (t) {
            return ((8.794 / 60 / 60) * Math.PI) / 180 / t;
        },
        topocentric: function (t, a, n, r, e, o) {
            (e = A.Math.pMod(o - e - t.ra, 2 * Math.PI)),
                (a = Math.sin(a)),
                (o = Math.cos(e));
            var i = Math.cos(t.dec);
            return (
                (e = Math.atan2(-r * a * Math.sin(e), i - r * a * o)),
                new A.EqCoord(
                    t.ra + e,
                    Math.atan2(
                        (Math.sin(t.dec) - n * a) * Math.cos(e),
                        i - r * a * o
                    )
                )
            );
        },
        topocentric2: function (t, a, n, r, e, o) {
            return (
                (e = A.Math.pMod(o - e - t.ra, 2 * Math.PI)),
                (o = Math.cos(t.dec)),
                new A.EqCoord(
                    t.ra + (-a * r * Math.sin(e)) / o,
                    t.dec + -a * (n * o - r * Math.cos(e) * Math.sin(t.dec))
                )
            );
        },
    }),
    (A.Refraction = {
        bennett: function (t) {
            0 > t && (t = 0);
            var a = Math.PI / 180;
            return a / 60 / Math.tan(t + (7.31 * a * a) / (t + 4.4 * a));
        },
        bennett2: function (t) {
            var a = 0.06 / (n = 60 / (r = Math.PI / 180)),
                n = 14.7 * n * r,
                r = 13 * r;
            return (t = A.Refraction.bennett(t)) - a * Math.sin(n * t + r);
        },
        saemundsson: function (t) {
            var a = Math.PI / 180;
            return (
                (1.02 * a) / 60 / Math.tan(t + (10.3 * a * a) / (t + 5.11 * a))
            );
        },
    }),
    (A.Rise = {
        meanRefraction: (0.5667 * Math.PI) / 180,
        stdh0Stellar: (-0.5667 * Math.PI) / 180,
        stdh0Solar: (-0.8333 * Math.PI) / 180,
        stdh0LunarMean: (0.125 * Math.PI) / 180,
        stdh0Lunar: function (t) {
            return 0.7275 * t - A.Rise.meanRefraction;
        },
        circumpolar: function (t, a, n) {
            return -1 >
                (t =
                    (Math.sin(a) - Math.sin(t) * Math.sin(n)) /
                    (Math.cos(t) * Math.cos(n))) || 1 < t
                ? null
                : t;
        },
        approxTransit: function (t, a, n) {
            return (43200 * (n.ra + t.lng)) / Math.PI - a;
        },
        approxTimes: function (t, a, n, r) {
            return (a = A.Rise.circumpolar(t.lat, a, r.dec))
                ? ((a = (43200 * Math.acos(a)) / Math.PI),
                  (t = (43200 * (r.ra + t.lng)) / Math.PI - n),
                  {
                      transit: A.Math.pMod(t, 86400),
                      transitd: Math.floor(t / 86400),
                      rise: A.Math.pMod(t - a, 86400),
                      rised: Math.floor((t - a) / 86400),
                      set: A.Math.pMod(t + a, 86400),
                      setd: Math.floor((t + a) / 86400),
                  })
                : null;
        },
        times: function (t, a, n, r, e) {
            function o(e) {
                var o = A.Math.pMod(r + (360.985647 * e) / 360, 86400),
                    i = e + a,
                    u = A.Interp.interpolateX(h, i);
                (i = A.Interp.interpolateX(l, i)),
                    (o = (o * Math.PI) / 43200 - (t.lng + u)),
                    (u = Math.cos(i));
                return A.Math.pMod(
                    e +
                        (((M * Math.sin(i) + c * u * Math.cos(o) - n) /
                            (u * c * Math.sin(o))) *
                            43200) /
                            Math.PI,
                    86400
                );
            }
            var i = A.Rise.approxTimes(t, n, r, e[1]);
            if (!i) return null;
            var h = A.Interp.newLen3(-86400, 86400, [
                    e[0].ra,
                    e[1].ra,
                    e[2].ra,
                ]),
                l = A.Interp.newLen3(-86400, 86400, [
                    e[0].dec,
                    e[1].dec,
                    e[2].dec,
                ]);
            e = r + (360.985647 * i.transit) / 360;
            var u = A.Interp.interpolateX(h, i.transit + a);
            i.transit = A.Math.pMod(
                i.transit - (e - (43200 * (t.lng + u)) / Math.PI),
                86400
            );
            var M = Math.sin(t.lat),
                c = Math.cos(t.lat);
            return (i.rise = o(i.rise)), (i.set = o(i.set)), i;
        },
    }),
    (A.Sidereal = {
        iau82: [24110.54841, 8640184.812866, 0.093104, 62e-7],
        jdToCFrac: function (t) {
            return (
                (t = A.Math.modF(t.jd + 0.5)),
                [new A.JulianDay(t[0] - 0.5).jdJ2000Century(), t[1]]
            );
        },
        mean: function (t) {
            return A.Math.pMod(A.Sidereal._mean(t), 86400);
        },
        _mean: function (t) {
            return (t = A.Sidereal._mean0UT(t)).s + 86636.55536784 * t.f;
        },
        _meanInRA: function (t) {
            return (
                ((t = A.Sidereal._mean0UT(t)).s * Math.PI) / 43200 +
                2.0054758187 * t.f * Math.PI
            );
        },
        mean0UT: function (t) {
            return (t = A.Sidereal._mean0UT(t)), A.Math.pMod(t.s, 86400);
        },
        _mean0UT: function (t) {
            return (
                (t = A.Sidereal.jdToCFrac(t)),
                { s: A.Math.horner(t[0], A.Sidereal.iau82), f: t[1] }
            );
        },
        apparentInRa: function (t) {
            var a = A.Sidereal._meanInRA(t);
            return (
                (t = A.Nutation.nutationInRA(t)),
                A.Math.pMod(a + t, 2 * Math.PI)
            );
        },
        apparent: function (t) {
            var a = A.Sidereal._mean(t);
            return (
                (t = (648e3 * A.Nutation.nutationInRA(t)) / Math.PI / 15),
                A.Math.pMod(a + t, 86400)
            );
        },
        apparentLocal: function (t, a) {
            var n = A.Sidereal.apparent(t);
            return A.Math.pMod(n - (43200 * a) / Math.PI, 86400);
        },
        apparent0UT: function (t) {
            var a = A.Math.modF(t.jd + 0.5);
            return (
                (t = A.Math.modF(t.jde + 0.5)),
                (a =
                    A.Math.horner(
                        (a[0] - 0.5 - A.J2000) / 36525,
                        A.Sidereal.iau82
                    ) +
                    86636.55536784 * a[1]),
                (t =
                    (648e3 * A.Nutation.nutationInRA(new A.JulianDay(t[0]))) /
                    Math.PI /
                    15),
                A.Math.pMod(a + t, 86400)
            );
        },
    }),
    (A.Solar = {
        earthsunDelta: 149597870,
        apparentEquatorial: function (t) {
            var a = t.jdJ2000Century(),
                n = A.Solar.node(a);
            a = A.Solar.apparentLongitude(a, n);
            return (
                (t =
                    A.Nutation.meanObliquityLaskar(t) +
                    ((0.00256 * Math.PI) / 180) * Math.cos(n)),
                (n = Math.sin(a)),
                new A.EqCoord(
                    Math.atan2(Math.cos(t) * n, Math.cos(a)),
                    Math.asin(Math.sin(t) * n)
                )
            );
        },
        apparentTopocentric: function (t, a, n) {
            var r = A.Solar.apparentEquatorial(t),
                e = A.Globe.parallaxConstants(a.lat, a.h);
            return (
                n || (n = A.Sidereal.apparentInRa(t)),
                A.Parallax.topocentric2(
                    r,
                    A.Parallax.earthsunParallax,
                    e.rhoslat,
                    e.rhoclat,
                    a.lng,
                    n
                )
            );
        },
        topocentricPosition: function (t, a, n) {
            var r = A.Sidereal.apparentInRa(t);
            return (
                (t = A.Solar.apparentTopocentric(t, a, r)),
                (a = A.Coord.eqToHz(t, a, r)),
                !0 === n && (a.alt += A.Refraction.bennett2(a.alt)),
                { hz: a, eq: t }
            );
        },
        approxTransit: function (t, a) {
            var n = t.startOfDay();
            return A.Rise.approxTransit(
                a,
                A.Sidereal.apparent0UT(n),
                A.Solar.apparentTopocentric(n, a)
            );
        },
        approxTimes: function (t, a) {
            var n = t.startOfDay(),
                r = A.Solar.apparentTopocentric(n, a),
                e = A.Rise.stdh0Solar;
            n = A.Sidereal.apparent0UT(n);
            return A.Rise.approxTimes(a, e, n, r);
        },
        times: function (t, a) {
            var n = t.startOfDay(),
                r = A.Solar.apparentTopocentric(
                    new A.JulianDay(n.jd - 1, n.deltaT),
                    a
                ),
                e = A.Solar.apparentTopocentric(n, a),
                o = A.Solar.apparentTopocentric(
                    new A.JulianDay(n.jd + 1, n.deltaT),
                    a
                ),
                i = A.Rise.stdh0Solar,
                h = A.Sidereal.apparent0UT(n);
            return A.Rise.times(a, n.deltaT, i, h, [r, e, o]);
        },
        meanAnomaly: function (t) {
            return (
                (A.Math.horner(t, [357.52911, 35999.05029, -1537e-7]) *
                    Math.PI) /
                180
            );
        },
        trueLongitude: function (t) {
            var a =
                    (A.Math.horner(t, [280.46646, 36000.76983, 3032e-7]) *
                        Math.PI) /
                    180,
                n = A.Solar.meanAnomaly(t);
            return (
                (t =
                    ((A.Math.horner(t, [1.914602, -0.004817, -14e-6]) *
                        Math.sin(n) +
                        (0.019993 - 101e-6 * t) * Math.sin(2 * n) +
                        289e-6 * Math.sin(3 * n)) *
                        Math.PI) /
                    180),
                {
                    s: A.Math.pMod(a + t, 2 * Math.PI),
                    v: A.Math.pMod(n + t, 2 * Math.PI),
                }
            );
        },
        apparentLongitude: function (t, a) {
            return (
                a || (a = A.Solar.node(t)),
                A.Solar.trueLongitude(t).s -
                    (0.00569 * Math.PI) / 180 -
                    ((0.00478 * Math.PI) / 180) * Math.sin(a)
            );
        },
        node: function (t) {
            return ((125.04 - 1934.136 * t) * Math.PI) / 180;
        },
    }),
    (A.Solistice = {
        march: function (t) {
            return 1e3 > t
                ? A.Solistice._eq(t, A.Solistice.mc0)
                : A.Solistice._eq(t - 2e3, A.Solistice.mc2);
        },
        june: function (t) {
            return 1e3 > t
                ? A.Solistice._eq(t, A.Solistice.jc0)
                : A.Solistice._eq(t - 2e3, A.Solistice.jc2);
        },
        september: function (t) {
            return 1e3 > t
                ? A.Solistice._eq(t, A.Solistice.sc0)
                : A.Solistice._eq(t - 2e3, A.Solistice.sc2);
        },
        december: function (t) {
            return 1e3 > t
                ? A.Solistice._eq(t, A.Solistice.dc0)
                : A.Solistice._eq(t - 2e3, A.Solistice.dc2);
        },
        _eq: function (t, a) {
            for (
                var n = A.Math.horner(0.001 * t, a),
                    r = (n - A.J2000) / A.JulianCentury,
                    e =
                        ((35999.373 * Math.PI) / 180) * r -
                        (2.47 * Math.PI) / 180,
                    o =
                        ((e =
                            1 + 0.0334 * Math.cos(e) + 7e-4 * Math.cos(2 * e)),
                        0),
                    i = this.terms.length - 1;
                0 <= i;
                i--
            ) {
                var h = this.terms[i];
                o = o + h[0] * Math.cos(((h[1] + h[2] * r) * Math.PI) / 180);
            }
            return n + (1e-5 * o) / e;
        },
        mc0: [1721139.29189, 365242.1374, 0.06134, 0.00111, -71e-5],
        jc0: [1721233.25401, 365241.72562, -0.05232, 0.00907, 25e-5],
        sc0: [1721325.70455, 365242.49558, -0.11677, -0.00297, 74e-5],
        dc0: [1721414.39987, 365242.88257, -0.00769, -0.00933, -6e-5],
        mc2: [2451623.80984, 365242.37404, 0.05169, -0.00411, -57e-5],
        jc2: [2451716.56767, 365241.62603, 0.00325, 0.00888, -3e-4],
        sc2: [2451810.21715, 365242.01767, -0.11575, 0.00337, 78e-5],
        dc2: [2451900.05952, 365242.74049, -0.06223, -0.00823, 32e-5],
        terms: [
            [485, 324.96, 1934.136],
            [203, 337.23, 32964.467],
            [199, 342.08, 20.186],
            [182, 27.85, 445267.112],
            [156, 73.14, 45036.886],
            [136, 171.52, 22518.443],
            [77, 222.54, 65928.934],
            [74, 296.72, 3034.906],
            [70, 243.58, 9037.513],
            [58, 119.81, 33718.147],
            [52, 297.17, 150.678],
            [50, 21.02, 2281.226],
            [45, 247.54, 29929.562],
            [44, 325.15, 31555.956],
            [29, 60.93, 4443.417],
            [18, 155.12, 67555.328],
            [17, 288.79, 4562.452],
            [16, 198.04, 62894.029],
            [14, 199.76, 31436.921],
            [12, 95.39, 14577.848],
            [12, 287.11, 31931.756],
            [12, 320.81, 34777.259],
            [9, 227.73, 1222.114],
            [8, 15.45, 16859.074],
        ],
    });

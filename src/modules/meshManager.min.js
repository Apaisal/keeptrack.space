!function(){if(settingsManager.noMeshManager)return;let r,e={};e.selectedSatPosition={x:0,y:0,z:0};let a,t=mat4.create(),n=mat3.create();e.fileList=[];let o=["sat2","s1u","s2u","s3u","starlink","iss","gps","aehf","dsp","galileo","o3b","orbcomm","iridium","globalstar","debris0","debris1","debris2","rocketbody"];for(var i=0;i<o.length;i++){let r={obj:`${settingsManager.installDirectory}meshes/${o[i]}.obj`,mtl:`${settingsManager.installDirectory}meshes/${o[i]}.mtl`};e.fileList.push(r)}e.fragShaderCode="\n    precision mediump float;\n\n    varying vec3 vLightDirection;\n    varying float vInSun;\n    varying vec3 vTransformedNormal;\n    varying vec2 vTextureCoord;\n    varying vec4 vPosition;\n    varying vec3 vAmbient;\n    varying vec3 vDiffuse;\n    varying vec3 vSpecular;\n    varying float vSpecularExponent;\n\n    void main(void) {\n      float lightAmt = max(dot(vTransformedNormal, vLightDirection), 0.0);\n\n      vec3 ambientColor = vDiffuse * 0.1;\n      vec3 dirColor = vDiffuse * vAmbient * lightAmt * min(vInSun,1.0);\n      vec3 specColor = vSpecular * lightAmt * min(vInSun,1.0);\n\n      vec3 color = ambientColor + dirColor + specColor;\n\n      gl_FragColor = vec4(color, 1.0);\n    }\n  ",e.vertShaderCode="\n    attribute vec3 aVertexPosition;\n    attribute vec3 aVertexNormal;\n    attribute vec3 aSpecular;\n    attribute float aSpecularExponent;\n    attribute vec3 aAmbient;\n    attribute vec3 aDiffuse;\n    attribute vec2 aTextureCoord;\n\n    uniform mat4 uPMatrix;\n    uniform mat4 uCamMatrix;\n    uniform mat4 uMvMatrix;\n    uniform mat3 uNormalMatrix;\n    uniform vec3 uLightDirection;\n    uniform float uInSun;\n\n    varying vec2 vTextureCoord;\n    varying vec3 vTransformedNormal;\n    varying vec4 vPosition;\n    varying vec3 vLightDirection;\n    varying float vInSun;\n\n    varying vec3 vAmbient;\n    varying vec3 vDiffuse;\n    varying vec3 vSpecular;\n    varying float vSpecularExponent;\n\n    void main(void) {\n      vLightDirection = uLightDirection;\n      vAmbient = aAmbient;\n      vDiffuse = aDiffuse;\n      vSpecular = aSpecular;\n      vSpecularExponent = aSpecularExponent;\n      vInSun = uInSun;\n\n      vPosition = uCamMatrix * uMvMatrix * vec4(aVertexPosition, 1.0);\n      gl_Position = uPMatrix * vPosition;\n      vTextureCoord = aTextureCoord;\n      vTransformedNormal  = uNormalMatrix * aVertexNormal;\n    }\n  ",e.isReady=!1,e.init=(()=>{OBJ.downloadModels(e.fileList).then(r=>{for(var[a,t]of Object.entries(r));e.meshes=r,function(){let r=gl.createShader(gl.FRAGMENT_SHADER),a=e.fragShaderCode;gl.shaderSource(r,a),gl.compileShader(r);let t=gl.createShader(gl.VERTEX_SHADER),n=e.vertShaderCode;gl.shaderSource(t,n),gl.compileShader(t),e.shaderProgram=gl.createProgram(),gl.attachShader(e.shaderProgram,t),gl.attachShader(e.shaderProgram,r),gl.linkProgram(e.shaderProgram),gl.getProgramParameter(e.shaderProgram,gl.LINK_STATUS)||console.log("Could not initialise shaders");gl.useProgram(e.shaderProgram);const o={aVertexPosition:OBJ.Layout.POSITION.key,aVertexNormal:OBJ.Layout.NORMAL.key,aTextureCoord:OBJ.Layout.UV.key,aAmbient:OBJ.Layout.AMBIENT.key,aDiffuse:OBJ.Layout.DIFFUSE.key,aSpecular:OBJ.Layout.SPECULAR.key,aSpecularExponent:OBJ.Layout.SPECULAR_EXPONENT.key};e.shaderProgram.attrIndices={},e.shaderProgram.uPMatrix=gl.getUniformLocation(e.shaderProgram,"uPMatrix"),e.shaderProgram.uCamMatrix=gl.getUniformLocation(e.shaderProgram,"uCamMatrix"),e.shaderProgram.uMvMatrix=gl.getUniformLocation(e.shaderProgram,"uMvMatrix"),e.shaderProgram.uNormalMatrix=gl.getUniformLocation(e.shaderProgram,"uNormalMatrix"),e.shaderProgram.uLightDirection=gl.getUniformLocation(e.shaderProgram,"uLightDirection"),e.shaderProgram.uInSun=gl.getUniformLocation(e.shaderProgram,"uInSun"),e.shaderProgram.applyAttributePointers=function(r){const a=r.mesh.vertexBuffer.layout;for(const r in o){if(!o.hasOwnProperty(r)||-1==e.shaderProgram.attrIndices[r])continue;const t=o[r];if(-1!=e.shaderProgram.attrIndices[r]){const n=a.attributeMap[t];gl.vertexAttribPointer(e.shaderProgram.attrIndices[r],n.size,gl[n.type],n.normalized,n.stride,n.offset)}}},e.shaderProgram.enableVertexAttribArrays=function(r){for(const r in o)o.hasOwnProperty(r)&&(e.shaderProgram.attrIndices[r]=gl.getAttribLocation(e.shaderProgram,r),-1!=e.shaderProgram.attrIndices[r]?gl.enableVertexAttribArray(e.shaderProgram.attrIndices[r]):console.warn('Shader attribute "'+r+'" not found in shader. Is it undeclared or unused in the shader code?'))},e.shaderProgram.disableVertexAttribArrays=function(r){for(const r in o)o.hasOwnProperty(r)&&(e.shaderProgram.attrIndices[r]=gl.getAttribLocation(e.shaderProgram,r),-1!=e.shaderProgram.attrIndices[r]?gl.disableVertexAttribArray(e.shaderProgram.attrIndices[r]):console.warn('Shader attribute "'+r+'" not found in shader. Is it undeclared or unused in the shader code?'))}}(),function(){var r=new OBJ.Layout(OBJ.Layout.POSITION,OBJ.Layout.NORMAL,OBJ.Layout.AMBIENT,OBJ.Layout.DIFFUSE,OBJ.Layout.UV,OBJ.Layout.SPECULAR,OBJ.Layout.SPECULAR_EXPONENT);for(var a in e.meshes){var t=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,t);var n=e.meshes[a].makeBufferData(r);gl.bufferData(gl.ARRAY_BUFFER,n,gl.STATIC_DRAW),t.numItems=n.numItems,t.layout=r,e.meshes[a].vertexBuffer=t;var o=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,o);var i=e.meshes[a].makeIndexBufferDataForMaterials(...Object.values(e.meshes[a].materialIndices));gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,i,gl.STATIC_DRAW),o.numItems=i.numItems,e.meshes[a].indexBuffer=o,e.models[a]={},e.models[a].mesh=e.meshes[a]}e.loaded=!0}(),e.isReady=!0})}),e.meshes={},e.models={},e.mvMatrix=mat4.create(),e.mvMatrixStack=[],e.pMatrix=mat4.create(),e.drawObject=((o,i,s,l,g)=>{if(void 0===o)return;if(!e.loaded)return;let m=l.isInSun();r=t,mat4.identity(r),mat4.translate(r,r,vec3.fromValues(o.position.x,o.position.y,o.position.z)),g&&mat4.rotateZ(r,r,longToYaw(l.getTEARR().lon*RAD2DEG)+180*DEG2RAD),a=n,mat3.normalFromMat4(a,r),gl.enable(gl.BLEND),gl.useProgram(e.shaderProgram),gl.bindFramebuffer(gl.FRAMEBUFFER,null),gl.uniform3fv(e.shaderProgram.uLightDirection,earth.lightDirection),gl.uniformMatrix3fv(e.shaderProgram.uNormalMatrix,!1,a),gl.uniformMatrix4fv(e.shaderProgram.uMvMatrix,!1,r),gl.uniformMatrix4fv(e.shaderProgram.uPMatrix,!1,i),gl.uniformMatrix4fv(e.shaderProgram.uCamMatrix,!1,s),gl.uniform1f(e.shaderProgram.uInSun,m),gl.bindBuffer(gl.ARRAY_BUFFER,o.mesh.vertexBuffer),e.shaderProgram.applyAttributePointers(o),e.shaderProgram.enableVertexAttribArrays(o),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,o.mesh.indexBuffer),gl.drawElements(gl.TRIANGLES,o.mesh.indexBuffer.numItems,gl.UNSIGNED_SHORT,0),e.shaderProgram.disableVertexAttribArrays(o),gl.disable(gl.BLEND)}),window.meshManager=e}();